#
# SHARED CONFIGURATION FOR DEV SERVICES
#
# To include configurations set here, use the following syntax at the beginning
# of the docker-compose.yaml file:
#
# include:
#   - docker-compose.common.yaml
#

# ? ----------------------------------------------------------------------------
# ? NETWORK DEFINITION
# ? ----------------------------------------------------------------------------
networks:
  mycelium_net:
    driver: bridge

# ? ----------------------------------------------------------------------------
# ? SHARED CONFIGURATION
# ? ----------------------------------------------------------------------------
x-common-mycelium: &common-config
  networks: &common-networks
    - mycelium_net
  env_file:
    - .devcontainer/.env

# ? ----------------------------------------------------------------------------
# ? SERVICES DEFINITION
# ? ----------------------------------------------------------------------------
services:
  # ? --------------------------------------------------------------------------
  # ? DATABASES
  # ? --------------------------------------------------------------------------
  myc-postgres:
    # Inject all shared configs
    <<: *common-config

    container_name: myc-postgres
    image: 'postgres:12'
    restart: on-failure
    environment:
      - POSTGRES_USERNAME=postgres
      - POSTGRES_PASSWORD=postgres
    ports:
      - 5432:5432/tcp
    volumes:
      - ./postgres/volume:/var/lib/postgresql/data
      #- ./postgres/sql/up.sql:/docker-entrypoint-initdb.d/up.sql:cached
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 5s
      timeout: 5s
      retries: 20

  myc-otel-collector:
    # Inject all shared configs
    <<: *common-config

    image: otel/opentelemetry-collector-contrib:latest
    command: [ "--config=/etc/otel-collector-config.dev.yaml" ]
    volumes:
      - ./otel/otel-collector-config.dev.yaml:/etc/otel-collector-config.dev.yaml
    ports:
      - 4317:4317 # OTLP gRPC
      - 4318:4318 # OTLP HTTP
      - 8889:8889 # Prometheus metrics endpoint

  myc-jaeger:
    # Inject all shared configs
    <<: *common-config

    container_name: myc-jaeger
    image: 'jaegertracing/all-in-one:latest'
    restart: on-failure
    environment:
      - COLLECTOR_OTLP_ENABLED=true
      - COLLECTOR_ZIPKIN_HOST_PORT=myc-jaeger-devcontainer:9411

    ports:
      - 16686:16686 # Jaeger UI
      - 14268:14268 # HTTP ingress for OpenTelemetry traces
      - 14250:14250 # gRPC ingress

  myc-prometheus:
    # Inject all shared configs
    <<: *common-config

    image: prom/prometheus:v2.52.0
    volumes:
      - ./otel/prometheus.dev.yml:/etc/prometheus/prometheus.dev.yml
    ports:
      - "9090:9090"

  myc-grafana:
    # Inject all shared configs
    <<: *common-config

    image: grafana/grafana:latest
    container_name: myc-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin

  myc-redis:
    # Inject all shared configs
    <<: *common-config

    container_name: myc-redis
    image: redis:6.2-alpine
    restart: on-failure
    ports:
      - '6379:6379'
    command: redis-server --save 20 1 --loglevel warning --requirepass ${MYC_REDIS_PASS}
    volumes:
      - ./redis:/data

  myc-vault:
    # Inject network
    networks: *common-networks

    container_name: myc-vault
    build:
      context: ./.devcontainer/vault
      dockerfile: Dockerfile
      args:
        UID: 1001
        GID: 1001
    command: vault server -config /vault/config/vault.hcl
    environment:
      VAULT_ADDR: http://0.0.0.0:8200
      VAULT_API_ADDR: http://0.0.0.0:8200
      VAULT_ADDRESS: http://0.0.0.0:8200
      VAULT_UI: true
    ports:
      - 8200:8200
      - 8201:8201
    restart: on-failure
    cap_add:
      - IPC_LOCK

  myc-test-service:
    # Inject all shared configs
    <<: *common-config

    container_name: myc-test-service
    entrypoint:
      #- /bin/sh
      #- -c
      #- sleep infinity
      - myc-api-test-svc
    build:
      context: .
      dockerfile: Dockerfile.dev
      no_cache: true
    environment:
      - SERVICE_PORT=8083
    ports:
      - 8083:8083
