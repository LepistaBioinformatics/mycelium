{
  "openapi": "3.1.0",
  "info": {
    "contact": {
      "email": "sgelias@outlook.com",
      "name": "Samuel Galv√£o Elias"
    },
    "description": "# Mycelium API Gateway\n\n**Mycelium** is a powerful **API Gateway** designed to provide secure and\nflexible management of API services. It combines advanced authentication\nmechanisms with robust resource and access control, making it the ideal solution\nfor organizations managing multiple clients and services.\n\n---\n\n## üöÄ Key Features\n\n### üåê **API Gateway with Multi-Tenant Support**\n\n- Mycelium functions as a central **API Gateway**, streamlining the management\n  of API requests and responses.\n- It supports **tenants**, which are namespaces that separate resources for\n  different user groups. This feature is crucial for businesses offering APIs to\n  multiple clients, ensuring resource isolation and secure operations.\n\n### üîê **Comprehensive Authentication Options**\n\nMycelium provides a variety of authentication methods to suit different\nscenarios:\n\n- **Native Authentication**: Standard username and password login for end users\n  with TOTP support.\n- **OAuth2 Integration**: Authentication using Azure and Google accounts for\n  seamless third-party integration.\n- **Connection String Authentication**: Token-based authentication for\n  service-to-service communication, with tokens generated securely by Mycelium.\n\n### üõ°Ô∏è **Role Management System**\n\n- Mycelium includes a full-featured **role management system**, allowing users\n  to create and manage hierarchical roles.\n- This system enables flexible role definitions, ensuring that access levels\n  align with specific organizational requirements.\n\n### üéõÔ∏è **Permission Management System**\n\n- Mycelium provides granular **permission management**, letting users define\n  specific access rights for various resources.\n- This ensures fine-grained control over who can view, modify, or manage APIs\n  and related resources.\n\n### ü™™ **Detailed Access Control**\n\n- Downstream APIs can receive user profile information from Mycelium, allowing\n  them to customize responses based on the user's role and permissions.\n\n### **Endpoints protection by role**\n\n- Downstream APIs can be protected by role and specific permissions, ensuring\n  that only users with the appropriate access level can interact with them.\n- The filtration process is performed at the gateway level, preventing\n  unauthorized access to downstream services.\n\n---\n\nBy combining the capabilities of an API Gateway with advanced authentication,\nmulti-tenant support, and detailed access control systems, Mycelium empowers\norganizations to securely manage their APIs and scale efficiently across diverse\nclient needs.\n\n## üõ°Ô∏è Mycelium roles\n\nMycelium works with a set of predefined roles that can be assigned to users.\nPredefined roles ensures a consistent and secure access control across the\norganization. Standard roles include full application access roles (super user\n[SU] and not super user roles), as well as roles with limited access to specific\ntenants or resources.\n\n### **Super User (SU) Roles**\n\nSuper users has the ability to scale up and down user and permissions and\nperform application level operations. Super users inherits abilities from all\nother roles.\n\n- **Staff's**: Has the exclusive ability to upgrade and downgrade new users to\n  the manager's and staff's roles.\n\n- **Manager's**: Has the exclusive ability to manage tenants and their\n  resources.\n\n### **Application Level Roles (not SU)**\n\n- TODO\n\n### **Tenant Level Roles**\n\n- TODO\n\n### **Account Level Roles**\n\n- TODO\n\n### **Beginners**\n\n- TODO\n\n### **Service**\n\n- TODO\n\n---\n",
    "license": {
      "identifier": "Apache-2.0",
      "name": "Apache 2.0"
    },
    "title": "Mycelium API",
    "version": "8.0.1-beta.1"
  },
  "paths": {
    "/adm/rs/tenant-owner/tenants/{tenant_id}/trash": {
      "patch": {
        "operationId": "update_tenant_trashing_status_url",
        "tags": [
          "Tenant_Owner__Tenant"
        ],
        "summary": "Include a trash status to a tenant",
        "parameters": [
          {
            "name": "tenant_id",
            "in": "path",
            "description": "The tenant unique id.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Tenant updated."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Forbidden."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Unknown internal server error."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Tenant not updated."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Unauthorized."
          }
        }
      }
    },
    "/adm/rs/tenant-manager/guests/accounts/{account_id}/roles/{role_id}": {
      "delete": {
        "operationId": "revoke_user_guest_to_subscription_manager_account_url",
        "tags": [
          "Tenant_Manager__Guest"
        ],
        "summary": "Uninvite user to perform a role to account",
        "parameters": [
          {
            "name": "x-mycelium-tenant-id",
            "in": "header",
            "description": "The tenant unique id.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "account_id",
            "in": "path",
            "description": "The account primary key.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "role_id",
            "in": "path",
            "description": "The guest-role unique id.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "email",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Unauthorized."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Unknown internal server error."
          },
          "204": {
            "description": "Guest User uninvited."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Forbidden."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Guest User not uninvited."
          }
        }
      }
    },
    "/adm/rs/tenant-owner/meta": {
      "post": {
        "operationId": "create_tenant_meta_url",
        "tags": [
          "Tenant_Owner__Meta"
        ],
        "summary": "Register a tenant metadata",
        "parameters": [
          {
            "name": "x-mycelium-tenant-id",
            "in": "header",
            "description": "The tenant unique id.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateTenantMetaBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HashMap"
                }
              }
            },
            "description": "Meta created."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Meta already exists."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Forbidden."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Unknown internal server error."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Unauthorized."
          }
        }
      },
      "delete": {
        "operationId": "delete_tenant_meta_url",
        "tags": [
          "Tenant_Owner__Meta"
        ],
        "summary": "Delete a tenant metadata",
        "parameters": [
          {
            "name": "x-mycelium-tenant-id",
            "in": "header",
            "description": "The tenant unique id.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteTenantMetaBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Unknown internal server error."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Forbidden."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Meta not deleted."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Unauthorized."
          },
          "204": {
            "description": "Meta deleted."
          }
        }
      }
    },
    "/adm/rs/beginners/users/totp/validate-app": {
      "post": {
        "operationId": "totp_finish_activation_url",
        "tags": [
          "Beginners__User"
        ],
        "summary": "Validate TOTP app",
        "description": "This route should be used to validate the TOTP app after enabling it.\n\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TotpUpdatingValidationBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Unknown internal server error."
          },
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MyceliumLoginResponse"
                }
              }
            },
            "description": "Credentials are valid."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Unauthorized."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Forbidden."
          }
        }
      }
    },
    "/adm/rs/subscriptions-manager/tags/{tag_id}": {
      "put": {
        "operationId": "update_account_tag_url",
        "tags": [
          "Subscriptions_Manager__Tag"
        ],
        "summary": "Update a tag",
        "parameters": [
          {
            "name": "tag_id",
            "in": "path",
            "description": "The tag primary key.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "x-mycelium-tenant-id",
            "in": "header",
            "description": "The tenant unique id.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateAccountTagBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Unknown internal server error."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Forbidden."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Unauthorized."
          },
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Tag"
                }
              }
            },
            "description": "Tag successfully registered."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Bad request."
          }
        }
      },
      "delete": {
        "operationId": "delete_account_tag_url",
        "tags": [
          "Subscriptions_Manager__Tag"
        ],
        "summary": "Delete a tag",
        "parameters": [
          {
            "name": "tag_id",
            "in": "path",
            "description": "The tag primary key.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "x-mycelium-tenant-id",
            "in": "header",
            "description": "The tenant unique id.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Tag"
                }
              }
            },
            "description": "Tag successfully registered."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Unknown internal server error."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Forbidden."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Bad request."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Unauthorized."
          }
        }
      }
    },
    "/adm/rs/beginners/users/status": {
      "get": {
        "operationId": "check_email_registration_status_url",
        "tags": [
          "Beginners__User"
        ],
        "summary": "DEPRECATED: Check email status",
        "description": "This endpoint is deprecated. Please use the /status endpoint instead.\n\n\n\n",
        "responses": {
          "410": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "This endpoint is deprecated. Please use the /status endpoint instead."
          }
        },
        "security": [
          {}
        ]
      }
    },
    "/health/now": {
      "get": {
        "operationId": "now_url",
        "tags": [
          "Index__Heath_Check"
        ],
        "summary": "Provide a datetime with the server's timezone.",
        "description": "This is usual during system checks.",
        "responses": {
          "200": {
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "The current datetime with timezone."
          }
        }
      }
    },
    "/adm/rs/subscriptions-manager/guests/accounts/{account_id}/roles/{role_id}": {
      "delete": {
        "operationId": "uninvite_guest_url",
        "tags": [
          "Subscriptions_Manager__Guest"
        ],
        "summary": "Uninvite user to perform a role to account",
        "parameters": [
          {
            "name": "x-mycelium-tenant-id",
            "in": "header",
            "description": "The tenant unique id.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "account_id",
            "in": "path",
            "description": "The account primary key.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "role_id",
            "in": "path",
            "description": "The guest-role unique id.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "email",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Unknown internal server error."
          },
          "204": {
            "description": "Guest User uninvited."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Guest User not uninvited."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Forbidden."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Unauthorized."
          }
        }
      },
      "post": {
        "operationId": "guest_user_url",
        "tags": [
          "Subscriptions_Manager__Guest"
        ],
        "summary": "Guest a user to work on account.",
        "description": "This action gives the ability of the target account (specified through\nthe `account` argument) to perform actions specified in the `role`\npath argument.",
        "parameters": [
          {
            "name": "x-mycelium-tenant-id",
            "in": "header",
            "description": "The tenant unique id.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "account_id",
            "in": "path",
            "description": "The account primary key.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "role_id",
            "in": "path",
            "description": "The guest-role unique id.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GuestUserBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GuestUser"
                }
              }
            },
            "description": "Guest already exist."
          },
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GuestUser"
                }
              }
            },
            "description": "Guesting done."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Unauthorized."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Forbidden."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Unknown internal server error."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Bad request."
          }
        }
      }
    },
    "/adm/su/managers/accounts": {
      "post": {
        "operationId": "create_system_account_url",
        "tags": [
          "Managers__Accounts"
        ],
        "summary": "Create system account",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateSystemSubscriptionAccountBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Forbidden."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Unknown internal server error."
          },
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/GuestRole"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Account created."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Unauthorized."
          }
        }
      }
    },
    "/adm/rs/gateway-manager/routes": {
      "get": {
        "operationId": "list_routes_url",
        "tags": [
          "Gateway_Manager__Route"
        ],
        "summary": "List routes by service",
        "description": "This function is restricted to the GatewayManager users. List routes by\nservice name or service id.\n\n",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": false,
            "schema": {
              "type": [
                "string",
                "null"
              ],
              "format": "uuid"
            }
          },
          {
            "name": "name",
            "in": "query",
            "required": false,
            "schema": {
              "type": [
                "string",
                "null"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Route"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Fetching success."
          },
          "204": {
            "description": "Not found."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Forbidden."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Unauthorized."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Unknown internal server error."
          }
        }
      }
    },
    "/adm/rs/beginners/profile": {
      "get": {
        "operationId": "fetch_profile_url",
        "tags": [
          "Beginners__Profile"
        ],
        "summary": "Fetch a user's profile.",
        "parameters": [
          {
            "name": "withUrl",
            "in": "query",
            "required": false,
            "schema": {
              "type": [
                "boolean",
                "null"
              ]
            }
          }
        ],
        "responses": {
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Bad request."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Forbidden."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Unauthorized."
          },
          "204": {
            "description": "Not found."
          },
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Profile"
                }
              }
            },
            "description": "Profile fetching done."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Unknown internal server error."
          }
        }
      }
    },
    "/adm/rs/beginners/tenants/{tenant_id}": {
      "get": {
        "operationId": "fetch_tenant_public_info_url",
        "tags": [
          "Beginners__Tenant"
        ],
        "summary": "Fetch a user's profile.",
        "parameters": [
          {
            "name": "tenant_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Unauthorized."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Unknown internal server error."
          },
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Tenant"
                }
              }
            },
            "description": "Profile fetching done."
          },
          "204": {
            "description": "Not found."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Bad request."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Forbidden."
          }
        }
      }
    },
    "/adm/rs/tenant-owner/accounts/{account_id}": {
      "delete": {
        "operationId": "delete_tenant_manager_account_url",
        "tags": [
          "Tenant_Owner__Account"
        ],
        "summary": "Delete a tenant manager account",
        "description": "This action will soft delete the tenant manager account.\n\n",
        "parameters": [
          {
            "name": "x-mycelium-tenant-id",
            "in": "header",
            "description": "The tenant unique id.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "account_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Account deleted."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Unauthorized."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Forbidden."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Unknown internal server error."
          }
        }
      }
    },
    "/adm/rs/users-manager/accounts/{account_id}/unarchive": {
      "patch": {
        "operationId": "unarchive_account_url",
        "tags": [
          "Users_Manager__Account"
        ],
        "summary": "Unarchive account",
        "description": "Set target account as un-archived.",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "The account primary key.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Account not activated."
          },
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Account"
                }
              }
            },
            "description": "Account activated."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Forbidden."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Unknown internal server error."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Unauthorized."
          }
        }
      }
    },
    "/adm/rs/accounts-manager/guests/accounts/{account_id}/roles/{role_id}": {
      "post": {
        "operationId": "guest_to_children_account_url",
        "tags": [
          "Account_Manager__Guest"
        ],
        "summary": "Guest a user to work on account.",
        "description": "This action gives the ability of the target account (specified through\nthe `account` argument) to perform actions specified in the `role`\npath argument.",
        "parameters": [
          {
            "name": "x-mycelium-tenant-id",
            "in": "header",
            "description": "The tenant unique id.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "account_id",
            "in": "path",
            "description": "The account primary key.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "role_id",
            "in": "path",
            "description": "The guest-role unique id.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GuestUserToChildrenBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GuestUser"
                }
              }
            },
            "description": "Guest already exist."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Forbidden."
          },
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GuestUser"
                }
              }
            },
            "description": "Guesting done."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Unauthorized."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Unknown internal server error."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Bad request."
          }
        }
      }
    },
    "/adm/su/managers/tenants/{id}": {
      "delete": {
        "operationId": "delete_tenant_url",
        "tags": [
          "Managers__Tenants"
        ],
        "summary": "Delete a tenant",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The tenant primary key.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Forbidden."
          },
          "201": {
            "content": {
              "text/plain": {
                "schema": {
                  "format": "uuid",
                  "type": "string"
                }
              }
            },
            "description": "Tenant successfully registered."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Unknown internal server error."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Bad request."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Unauthorized."
          }
        }
      }
    },
    "/adm/rs/tenant-owner/tenants/{tenant_id}/verify": {
      "patch": {
        "operationId": "update_tenant_verifying_status_url",
        "tags": [
          "Tenant_Owner__Tenant"
        ],
        "summary": "Include a verified status to a tenant",
        "parameters": [
          {
            "name": "tenant_id",
            "in": "path",
            "description": "The tenant unique id.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Tenant updated."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Tenant not updated."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Forbidden."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Unknown internal server error."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Unauthorized."
          }
        }
      }
    },
    "/adm/svc/tools": {
      "get": {
        "operationId": "list_discoverable_services_url",
        "tags": [
          "Service__Tools"
        ],
        "summary": "List routes by service",
        "description": "This function is restricted to the GatewayManager users. List routes by\nservice name or service id.\n\n",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": false,
            "schema": {
              "type": [
                "string",
                "null"
              ],
              "format": "uuid"
            }
          },
          {
            "name": "name",
            "in": "query",
            "required": false,
            "schema": {
              "type": [
                "string",
                "null"
              ]
            }
          }
        ],
        "responses": {
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Unknown internal server error."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Unauthorized."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Forbidden."
          },
          "204": {
            "description": "Not found."
          },
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListServicesResponse"
                }
              }
            },
            "description": "Fetching success."
          }
        },
        "security": [
          {}
        ]
      }
    },
    "/adm/rs/guests-manager/guest-roles/{guest_role_id}/permissions": {
      "patch": {
        "operationId": "update_guest_role_permissions_url",
        "tags": [
          "Guest_Manager__Guest_Role"
        ],
        "summary": "Change permissions of Guest Role",
        "description": "Upgrade or Downgrade permissions of Guest Role.",
        "parameters": [
          {
            "name": "guest_role_id",
            "in": "path",
            "description": "The guest-role primary key.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateGuestRolePermissionsBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Guest Role not deleted."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Unknown internal server error."
          },
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GuestRole"
                }
              }
            },
            "description": "Guest Role updated."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Unauthorized."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Forbidden."
          }
        }
      }
    },
    "/adm/su/managers/tenants": {
      "post": {
        "operationId": "create_tenant_url",
        "tags": [
          "Managers__Tenants"
        ],
        "summary": "Create a new tenant",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateTenantBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Unauthorized."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Forbidden."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Unknown internal server error."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Tenant already exists."
          },
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Tenant"
                }
              }
            },
            "description": "Tenant created."
          }
        }
      },
      "get": {
        "operationId": "list_tenant_url",
        "tags": [
          "Managers__Tenants"
        ],
        "summary": "List tenants",
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "description": "Filter tenants by name",
            "required": false,
            "schema": {
              "type": [
                "string",
                "null"
              ]
            }
          },
          {
            "name": "owner",
            "in": "query",
            "description": "Filter tenants by owner",
            "required": false,
            "schema": {
              "type": [
                "string",
                "null"
              ],
              "format": "uuid"
            }
          },
          {
            "name": "metadata",
            "in": "query",
            "description": "Filter tenants by metadata key",
            "required": false,
            "schema": {
              "type": [
                "string",
                "null"
              ]
            }
          },
          {
            "name": "tag",
            "in": "query",
            "description": "Filter tenants by tag\n\nExample: `key=value`",
            "required": false,
            "schema": {
              "type": [
                "string",
                "null"
              ]
            }
          },
          {
            "name": "skip",
            "in": "query",
            "required": false,
            "schema": {
              "type": [
                "integer",
                "null"
              ],
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "required": false,
            "schema": {
              "type": [
                "integer",
                "null"
              ],
              "format": "int32"
            }
          }
        ],
        "responses": {
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Unknown internal server error."
          },
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Tenant"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Fetching success."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Forbidden."
          },
          "204": {
            "description": "Not found."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Unauthorized."
          }
        }
      }
    },
    "/adm/rs/beginners/users/totp/disable": {
      "post": {
        "operationId": "totp_disable_url",
        "tags": [
          "Beginners__User"
        ],
        "summary": "Disable TOTP",
        "description": "This route should be used to disable the TOTP app.\n\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TotpUpdatingValidationBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Unknown internal server error."
          },
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MyceliumLoginResponse"
                }
              }
            },
            "description": "Credentials are valid."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Unauthorized."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Forbidden."
          }
        }
      }
    },
    "/adm/rs/tenant-manager/tenants/{tenant_id}": {
      "get": {
        "operationId": "get_tenant_details_url",
        "tags": [
          "Tenant_Manager__Tenant"
        ],
        "summary": "Fetch a tenant's details",
        "parameters": [
          {
            "name": "tenant_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Forbidden."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Unknown internal server error."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Bad request."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Unauthorized."
          },
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Tenant"
                }
              }
            },
            "description": "Profile fetching done."
          },
          "204": {
            "description": "Not found."
          }
        }
      }
    },
    "/adm/rs/tenant-manager/guests/accounts/{account_id}": {
      "post": {
        "operationId": "guest_user_to_subscription_manager_account_url",
        "tags": [
          "Tenant_Manager__Guest"
        ],
        "summary": "Guest a user to work on account.",
        "description": "This action gives the ability of the target account (specified through\nthe `account` argument) to perform actions specified in the `role`\npath argument.",
        "parameters": [
          {
            "name": "x-mycelium-tenant-id",
            "in": "header",
            "description": "The tenant unique id.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "account_id",
            "in": "path",
            "description": "The account primary key.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GuestUserToSubscriptionManagerAccountBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Unauthorized."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Bad request."
          },
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GuestUser"
                }
              }
            },
            "description": "Guesting done."
          },
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GuestUser"
                }
              }
            },
            "description": "Guest already exist."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Forbidden."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Unknown internal server error."
          }
        }
      }
    },
    "/adm/rs/users-manager/accounts/{account_id}/deactivate": {
      "patch": {
        "operationId": "deactivate_account_url",
        "tags": [
          "Users_Manager__Account"
        ],
        "summary": "Deactivate account",
        "description": "Any account could be activated and deactivated. This action turn an\naccount deactivated.",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "The account primary key.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Account"
                }
              }
            },
            "description": "Account activated."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Unknown internal server error."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Account not activated."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Unauthorized."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Forbidden."
          }
        }
      }
    },
    "/adm/rs/subscriptions-manager/tags": {
      "post": {
        "operationId": "register_account_tag_url",
        "tags": [
          "Subscriptions_Manager__Tag"
        ],
        "summary": "Register a tag",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "The account unique id.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "x-mycelium-tenant-id",
            "in": "header",
            "description": "The tenant unique id.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateAccountTagBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Unknown internal server error."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Bad request."
          },
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Tag"
                }
              }
            },
            "description": "Tag successfully registered."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Forbidden."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Unauthorized."
          }
        }
      }
    },
    "/adm/rs/system-manager/error-codes/prefixes/{prefix}/codes/{code}": {
      "get": {
        "operationId": "get_error_code_url",
        "tags": [
          "System_Manager__Error_Code"
        ],
        "summary": "Get an error code.",
        "description": "Get error code by prefix and code.\n\n",
        "parameters": [
          {
            "name": "prefix",
            "in": "path",
            "description": "The error prefix.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The error code.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Unauthorized."
          },
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorCode"
                }
              }
            },
            "description": "Fetching success."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Forbidden."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Unknown internal server error."
          },
          "204": {
            "description": "Not found."
          }
        }
      },
      "delete": {
        "operationId": "delete_error_code_url",
        "tags": [
          "System_Manager__Error_Code"
        ],
        "summary": "Delete an error code.",
        "description": "Delete error code by prefix and code.\n\n",
        "parameters": [
          {
            "name": "prefix",
            "in": "path",
            "description": "The error prefix.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The error code.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Error code deleted."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Forbidden."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Error code not deleted."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Unauthorized."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Unknown internal server error."
          }
        }
      },
      "patch": {
        "operationId": "update_error_code_message_and_details_url",
        "tags": [
          "System_Manager__Error_Code"
        ],
        "summary": "Update an error code.",
        "description": "Update error code message and details.\n\n",
        "parameters": [
          {
            "name": "prefix",
            "in": "path",
            "description": "The error prefix.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The error code.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateErrorCodeMessageAndDetailsBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Forbidden."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Unknown internal server error."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Error code not updated."
          },
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorCode"
                }
              }
            },
            "description": "Error code updated."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Unauthorized."
          }
        }
      }
    },
    "/health": {
      "get": {
        "operationId": "health_url",
        "tags": [
          "Index__Heath_Check"
        ],
        "summary": "Provide a health check endpoint.",
        "description": "If the server is running it returns a 200 response with a JSON body\ncontaining the success message.",
        "responses": {
          "200": {
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Health check passed."
          }
        }
      }
    },
    "/adm/rs/users-manager/accounts/{account_id}/approve": {
      "patch": {
        "operationId": "approve_account_url",
        "tags": [
          "Users_Manager__Account"
        ],
        "summary": "Approve account after creation",
        "description": "New accounts should be approved after has permissions to perform\noperation on the system. These endpoint should approve such account.",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "The account primary key.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Account"
                }
              }
            },
            "description": "Account approved."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Account not approved."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Forbidden."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Unknown internal server error."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Unauthorized."
          }
        }
      }
    },
    "/adm/su/staffs/accounts/{account_id}/downgrade": {
      "patch": {
        "operationId": "downgrade_account_privileges_url",
        "tags": [
          "Staffs__Accounts"
        ],
        "summary": "Downgrade account privileges",
        "description": "Decrease permissions of the refereed account.",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "The account primary key.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DowngradeAccountPrivilegesBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Account not downgraded."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Unknown internal server error."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Unauthorized."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Forbidden."
          },
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Account"
                }
              }
            },
            "description": "Account downgraded."
          }
        }
      }
    },
    "/adm/rs/guests-manager/guest-roles": {
      "get": {
        "operationId": "list_guest_roles_url",
        "tags": [
          "Guest_Manager__Guest_Role"
        ],
        "summary": "List Roles",
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "description": "The name of the guest role.",
            "required": false,
            "schema": {
              "type": [
                "string",
                "null"
              ]
            }
          },
          {
            "name": "slug",
            "in": "query",
            "description": "The slug of the guest role.",
            "required": false,
            "schema": {
              "type": [
                "string",
                "null"
              ]
            }
          },
          {
            "name": "system",
            "in": "query",
            "description": "If it is a system role.",
            "required": false,
            "schema": {
              "type": [
                "boolean",
                "null"
              ]
            }
          }
        ],
        "responses": {
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Unknown internal server error."
          },
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/GuestRole"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Success."
          },
          "204": {
            "description": "Not found."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Unauthorized."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Forbidden."
          }
        }
      },
      "post": {
        "operationId": "crate_guest_role_url",
        "tags": [
          "Guest_Manager__Guest_Role"
        ],
        "summary": "Create Guest Role",
        "description": "Guest Roles provide permissions to simple Roles.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateGuestRoleBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GuestRole"
                }
              }
            },
            "description": "Guest Role created."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Unauthorized."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Unknown internal server error."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Forbidden."
          },
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GuestRole"
                }
              }
            },
            "description": "Guest Role already exists."
          }
        }
      }
    },
    "/adm/rs/subscriptions-manager/guests/accounts/{account_id}": {
      "get": {
        "operationId": "list_guest_on_subscription_account_url",
        "tags": [
          "Subscriptions_Manager__Guest"
        ],
        "summary": "List guest accounts related to a subscription account",
        "description": "This action fetches all non-subscription accounts related to the\ninformed subscription account.",
        "parameters": [
          {
            "name": "x-mycelium-tenant-id",
            "in": "header",
            "description": "The tenant unique id.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "account_id",
            "in": "path",
            "description": "The account primary key.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Forbidden."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Unauthorized."
          },
          "204": {
            "description": "Not found."
          },
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedRecord_GuestUser"
                }
              }
            },
            "description": "Fetching success."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Unknown internal server error."
          }
        }
      }
    },
    "/adm/rs/tenant-owner/tenants/{tenant_id}/": {
      "patch": {
        "operationId": "update_tenant_name_and_description_url",
        "tags": [
          "Tenant_Owner__Tenant"
        ],
        "summary": "Update the name and description of a tenant",
        "parameters": [
          {
            "name": "tenant_id",
            "in": "path",
            "description": "The tenant unique id.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateTenantNameAndDescriptionBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Unauthorized."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Forbidden."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Unknown internal server error."
          },
          "202": {
            "description": "Tenant updated."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Tenant not updated."
          }
        }
      }
    },
    "/adm/rs/subscriptions-manager/accounts/{account_id}/propagate": {
      "post": {
        "operationId": "propagate_existing_subscription_account_url",
        "tags": [
          "Subscriptions_Manager__Account"
        ],
        "summary": "Propagate Subscription Account",
        "description": "Propagate a single subscription account.",
        "parameters": [
          {
            "name": "x-mycelium-tenant-id",
            "in": "header",
            "description": "The tenant unique id.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "account_id",
            "in": "path",
            "description": "The account primary key.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Account"
                }
              }
            },
            "description": "Propagating success."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Unauthorized."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Forbidden."
          },
          "204": {
            "description": "Not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Unknown internal server error."
          }
        }
      }
    },
    "/adm/rs/users-manager/accounts/{account_id}/disapprove": {
      "patch": {
        "operationId": "disapprove_account_url",
        "tags": [
          "Users_Manager__Account"
        ],
        "summary": "Disapprove account after creation",
        "description": "Also approved account should be disapproved at any time. These endpoint\nwork for this.",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "The account primary key.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Account not disapproved."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Unauthorized."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Forbidden."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Unknown internal server error."
          },
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Account"
                }
              }
            },
            "description": "Account disapproved."
          }
        }
      }
    },
    "/adm/rs/tenant-owner/accounts": {
      "post": {
        "operationId": "create_management_account_url",
        "tags": [
          "Tenant_Owner__Account"
        ],
        "summary": "Create a management account",
        "description": "Management accounts are used to manage tenant resources. Tenant managers\nshould manage subscription accounts.\n\n",
        "parameters": [
          {
            "name": "x-mycelium-tenant-id",
            "in": "header",
            "description": "The tenant unique id.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Account"
                }
              }
            },
            "description": "Account created."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Unauthorized."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Forbidden."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Unknown internal server error."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Account already exists."
          }
        }
      }
    },
    "/adm/rs/beginners/accounts": {
      "post": {
        "operationId": "create_default_account_url",
        "tags": [
          "Beginners__Account"
        ],
        "summary": "Create a user related account",
        "description": "A user related account is an account that is created for a physical person.\n\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateDefaultAccountBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Unauthorized."
          },
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Account"
                }
              }
            },
            "description": "Account already exists."
          },
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Account"
                }
              }
            },
            "description": "Account successfully created."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Forbidden."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Unknown internal server error."
          }
        }
      },
      "get": {
        "operationId": "get_my_account_details_url",
        "tags": [
          "Beginners__Account"
        ],
        "summary": "Get my account details",
        "description": "Get the details of the account associated with the current user.",
        "responses": {
          "204": {
            "description": "Not found."
          },
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Account"
                }
              }
            },
            "description": "Fetching success."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Unauthorized."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Forbidden."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Unknown internal server error."
          }
        }
      }
    },
    "/adm/rs/beginners/tokens": {
      "post": {
        "operationId": "create_connection_string_url",
        "tags": [
          "Beginners__Token"
        ],
        "summary": "Create Connection String",
        "description": "This action creates a connection string that is associated with the user\naccount. The connection string has the same permissions of the user account.\n\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateTokenBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Unauthorized."
          },
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateTokenResponse"
                }
              }
            },
            "description": "Token created."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Forbidden."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Unknown internal server error."
          }
        }
      }
    },
    "/adm/rs/tenant-owner/owners": {
      "post": {
        "operationId": "guest_tenant_owner_url",
        "tags": [
          "Tenant_Owner__Owner"
        ],
        "summary": "Guest a user to work as a tenant owner",
        "parameters": [
          {
            "name": "x-mycelium-tenant-id",
            "in": "header",
            "description": "The tenant unique id.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GuestTenantOwnerBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Unauthorized."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Forbidden."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Unknown internal server error."
          },
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TenantOwnerConnection"
                }
              }
            },
            "description": "Owner created."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Owner already exists."
          }
        }
      },
      "delete": {
        "operationId": "revoke_tenant_owner_url",
        "tags": [
          "Tenant_Owner__Owner"
        ],
        "summary": "Revoke a user from working as a tenant owner",
        "parameters": [
          {
            "name": "x-mycelium-tenant-id",
            "in": "header",
            "description": "The tenant unique id.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GuestTenantOwnerBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Owner deleted."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Unauthorized."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Owner deleted."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Forbidden."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Unknown internal server error."
          }
        }
      }
    },
    "/adm/rs/guests-manager/guest-roles/{guest_role_id}/children/{child_id}": {
      "post": {
        "operationId": "insert_role_child_url",
        "tags": [
          "Guest_Manager__Guest_Role"
        ],
        "summary": "Set Child Role",
        "description": "Insert a child role to a parent role.",
        "parameters": [
          {
            "name": "guest_role_id",
            "in": "path",
            "description": "The guest-role primary key.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "child_id",
            "in": "path",
            "description": "The child guest-role primary key.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateGuestRolePermissionsBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Unauthorized."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Guest Role not deleted."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Forbidden."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Unknown internal server error."
          },
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GuestRole"
                }
              }
            },
            "description": "Guest Role updated."
          }
        }
      },
      "delete": {
        "operationId": "remove_role_child_url",
        "tags": [
          "Guest_Manager__Guest_Role"
        ],
        "summary": "Delete Child Role",
        "description": "Delete a child role to a parent role.",
        "parameters": [
          {
            "name": "guest_role_id",
            "in": "path",
            "description": "The guest-role primary key.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "child_id",
            "in": "path",
            "description": "The child guest-role primary key.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateGuestRolePermissionsBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GuestRole"
                }
              }
            },
            "description": "Guest Role updated."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Unauthorized."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Guest Role not deleted."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Forbidden."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Unknown internal server error."
          }
        }
      }
    },
    "/adm/rs/users-manager/accounts/{account_id}/archive": {
      "patch": {
        "operationId": "archive_account_url",
        "tags": [
          "Users_Manager__Account"
        ],
        "summary": "Archive account",
        "description": "Set target account as archived.",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "The account primary key.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Unknown internal server error."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Forbidden."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Account not activated."
          },
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Account"
                }
              }
            },
            "description": "Account activated."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Unauthorized."
          }
        }
      }
    },
    "/adm/rs/gateway-manager/services": {
      "get": {
        "operationId": "list_services_url",
        "tags": [
          "Gateway_Manager__Service"
        ],
        "summary": "List routes by service",
        "description": "This function is restricted to the GatewayManager users. List routes by\nservice name or service id.\n\n",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": false,
            "schema": {
              "type": [
                "string",
                "null"
              ],
              "format": "uuid"
            }
          },
          {
            "name": "name",
            "in": "query",
            "required": false,
            "schema": {
              "type": [
                "string",
                "null"
              ]
            }
          }
        ],
        "responses": {
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Unknown internal server error."
          },
          "204": {
            "description": "Not found."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Forbidden."
          },
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Service"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Fetching success."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Unauthorized."
          }
        }
      }
    },
    "/adm/rs/subscriptions-manager/guest-roles": {
      "get": {
        "operationId": "list_guest_roles_url",
        "tags": [
          "Subscriptions_Manager__Guest_Role"
        ],
        "summary": "List Roles",
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "description": "The name of the guest role.",
            "required": false,
            "schema": {
              "type": [
                "string",
                "null"
              ]
            }
          },
          {
            "name": "slug",
            "in": "query",
            "description": "The slug of the guest role.",
            "required": false,
            "schema": {
              "type": [
                "string",
                "null"
              ]
            }
          },
          {
            "name": "system",
            "in": "query",
            "description": "If it is a system role.",
            "required": false,
            "schema": {
              "type": [
                "boolean",
                "null"
              ]
            }
          },
          {
            "name": "x-mycelium-tenant-id",
            "in": "header",
            "description": "The tenant unique id.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Unknown internal server error."
          },
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/GuestRole"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Success."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Unauthorized."
          },
          "204": {
            "description": "Not found."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Forbidden."
          }
        }
      }
    },
    "/adm/rs/subscriptions-manager/accounts": {
      "get": {
        "operationId": "list_accounts_by_type_url",
        "tags": [
          "Subscriptions_Manager__Account"
        ],
        "summary": "List account given an account-type",
        "description": "Get a filtered (or not) list of accounts.\n\nList accounts with pagination. The `records` field contains a vector of\n`Account` model.\n\n",
        "parameters": [
          {
            "name": "x-mycelium-tenant-id",
            "in": "header",
            "description": "The tenant unique id.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "term",
            "in": "query",
            "required": false,
            "schema": {
              "type": [
                "string",
                "null"
              ]
            }
          },
          {
            "name": "tagValue",
            "in": "query",
            "required": false,
            "schema": {
              "type": [
                "string",
                "null"
              ]
            }
          },
          {
            "name": "accountType",
            "in": "query",
            "required": false,
            "schema": {
              "oneOf": [
                {
                  "type": "null"
                },
                {
                  "$ref": "#/components/schemas/APIAccountType"
                }
              ]
            }
          },
          {
            "name": "isOwnerActive",
            "in": "query",
            "required": false,
            "schema": {
              "type": [
                "boolean",
                "null"
              ]
            }
          },
          {
            "name": "status",
            "in": "query",
            "required": false,
            "schema": {
              "oneOf": [
                {
                  "type": "null"
                },
                {
                  "$ref": "#/components/schemas/VerboseStatus"
                }
              ]
            }
          },
          {
            "name": "actor",
            "in": "query",
            "required": false,
            "schema": {
              "oneOf": [
                {
                  "type": "null"
                },
                {
                  "$ref": "#/components/schemas/SystemActor"
                }
              ]
            }
          },
          {
            "name": "skip",
            "in": "query",
            "required": false,
            "schema": {
              "type": [
                "integer",
                "null"
              ],
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "required": false,
            "schema": {
              "type": [
                "integer",
                "null"
              ],
              "format": "int32"
            }
          }
        ],
        "responses": {
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Forbidden."
          },
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Account"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Fetching success."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Unknown internal server error."
          },
          "204": {
            "description": "Not found."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Unauthorized."
          }
        }
      },
      "post": {
        "operationId": "create_subscription_account_url",
        "tags": [
          "Subscriptions_Manager__Account"
        ],
        "summary": "Create Subscription Account",
        "description": "Subscription accounts represents shared entities, like institutions,\ngroups, but not real persons.",
        "parameters": [
          {
            "name": "x-mycelium-tenant-id",
            "in": "header",
            "description": "The tenant unique id.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateSubscriptionAccountBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Account"
                }
              }
            },
            "description": "Account created."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Account already exists."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Unauthorized."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Forbidden."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Unknown internal server error."
          }
        }
      }
    },
    "/adm/su/staffs/accounts/{account_id}/upgrade": {
      "patch": {
        "operationId": "upgrade_account_privileges_url",
        "tags": [
          "Staffs__Accounts"
        ],
        "summary": "Upgrade account privileges",
        "description": "Increase permissions of the refereed account.",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "The account primary key.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpgradeAccountPrivilegesBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Unauthorized."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Unknown internal server error."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Account not upgraded."
          },
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Account"
                }
              }
            },
            "description": "Account upgraded."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Forbidden."
          }
        }
      }
    },
    "/adm/rs/beginners/meta": {
      "put": {
        "operationId": "update_account_meta_url",
        "tags": [
          "Beginners__Meta"
        ],
        "summary": "Update a account metadata",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateAccountMetaBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "202": {
            "description": "Meta updated."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Meta not updated."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Forbidden."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Unknown internal server error."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Unauthorized."
          }
        }
      },
      "delete": {
        "operationId": "delete_account_meta_url",
        "tags": [
          "Beginners__Meta"
        ],
        "summary": "Delete a account metadata",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteAccountMetaParams"
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Meta not deleted."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Unauthorized."
          },
          "204": {
            "description": "Meta deleted."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Forbidden."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Unknown internal server error."
          }
        }
      },
      "post": {
        "operationId": "create_account_meta_url",
        "tags": [
          "Beginners__Meta"
        ],
        "summary": "Register a account metadata",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateAccountMetaBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Unauthorized."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Unknown internal server error."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Meta already exists."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Forbidden."
          },
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HashMap"
                }
              }
            },
            "description": "Meta created."
          }
        }
      }
    },
    "/adm/rs/subscriptions-manager/guest-roles/{id}": {
      "get": {
        "operationId": "fetch_guest_role_details_url",
        "tags": [
          "Subscriptions_Manager__Guest_Role"
        ],
        "summary": "Fetch Guest Role Details",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The guest role primary key.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "x-mycelium-tenant-id",
            "in": "header",
            "description": "The tenant unique id.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Not found."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Forbidden."
          },
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GuestRole"
                }
              }
            },
            "description": "Success."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Unauthorized."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Unknown internal server error."
          }
        }
      }
    },
    "/adm/rs/beginners/accounts/{account_id}/update-account-name": {
      "patch": {
        "operationId": "update_own_account_name_url",
        "tags": [
          "Beginners__Account"
        ],
        "summary": "Update account name",
        "description": "Update the account name of the account owner.\n\n",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "The account primary key.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateOwnAccountNameAccountBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Unknown internal server error."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Account name not updated."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Forbidden."
          },
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Account"
                }
              }
            },
            "description": "Account name successfully updated."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Unauthorized."
          }
        }
      }
    },
    "/adm/rs/system-manager/webhooks/{webhook_id}": {
      "delete": {
        "operationId": "delete_webhook_url",
        "tags": [
          "System_Manager__Webhook"
        ],
        "summary": "Delete a webhook",
        "parameters": [
          {
            "name": "webhook_id",
            "in": "path",
            "description": "The webhook primary key.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Unauthorized."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Webhook not deleted."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Forbidden."
          },
          "204": {
            "description": "Webhook deleted."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Unknown internal server error."
          }
        }
      },
      "patch": {
        "operationId": "update_webhook_url",
        "tags": [
          "System_Manager__Webhook"
        ],
        "summary": "Update a webhook",
        "parameters": [
          {
            "name": "webhook_id",
            "in": "path",
            "description": "The webhook primary key.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateWebHookBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Unauthorized."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Unknown internal server error."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Forbidden."
          },
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebHook"
                }
              }
            },
            "description": "WebHook created."
          }
        }
      }
    },
    "/adm/rs/tenant-manager/accounts": {
      "post": {
        "operationId": "create_subscription_manager_account_url",
        "tags": [
          "Tenant_Manager__Account"
        ],
        "summary": "Create a subscription manager account",
        "description": "This action is restricted to tenant managers. This action will create a\ntenant-related subscription manager account.\n\n",
        "parameters": [
          {
            "name": "x-mycelium-tenant-id",
            "in": "header",
            "description": "The tenant unique id.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Unknown internal server error."
          },
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Account"
                }
              }
            },
            "description": "Account created."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Unauthorized."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Forbidden."
          }
        }
      }
    },
    "/adm/su/managers/guest-roles": {
      "post": {
        "operationId": "create_system_roles_url",
        "tags": [
          "Managers__Guest_Role"
        ],
        "summary": "Create system roles",
        "description": "System roles should be used to attribute permissions to actors who manage\nspecific parts of the system. This function creates the following roles:\n\n- Subscriptions Manager\n- Users Manager\n- Account Manager\n- Guest Manager\n- Gateway Manager\n- System Manager\n- Tenant Manager\n\n",
        "responses": {
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Unknown internal server error."
          },
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/GuestRole"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Guest roles created."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Unauthorized."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Forbidden."
          }
        }
      }
    },
    "/adm/rs/beginners/users/reset-password": {
      "post": {
        "operationId": "check_token_and_reset_password_url",
        "tags": [
          "Beginners__User"
        ],
        "summary": "Check token and reset password",
        "description": "This route should be used to check the token and reset the password.\n\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ResetPasswordBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "text/plain": {
                "schema": {
                  "type": "boolean"
                }
              }
            },
            "description": "Password change requested."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Unauthorized."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Unknown internal server error."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Forbidden."
          }
        },
        "security": [
          {}
        ]
      }
    },
    "/adm/rs/beginners/accounts/{account_id}": {
      "delete": {
        "operationId": "delete_my_account_url",
        "tags": [
          "Beginners__Account"
        ],
        "summary": "Delete my account",
        "description": "Delete the account associated with the current user.\n\n",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Account successfully deleted."
          }
        }
      }
    },
    "/adm/rs/subscriptions-manager/guests": {
      "get": {
        "operationId": "list_licensed_accounts_of_email_url",
        "tags": [
          "Subscriptions_Manager__Guest"
        ],
        "summary": "List subscription accounts which email was guest",
        "parameters": [
          {
            "name": "x-mycelium-tenant-id",
            "in": "header",
            "description": "The tenant unique id.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "email",
            "in": "query",
            "description": "The email which the guest user is connected to",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "roles",
            "in": "query",
            "description": "The roles which the guest user was invited to",
            "required": false,
            "schema": {
              "type": [
                "array",
                "null"
              ],
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "permissionedRoles",
            "in": "query",
            "description": "The permissioned roles which the guest user was invited to",
            "required": false,
            "schema": {
              "type": [
                "array",
                "null"
              ],
              "items": {
                "items": false,
                "prefixItems": [
                  {
                    "type": "string"
                  },
                  {
                    "enum": [
                      "read",
                      "write"
                    ],
                    "type": "string"
                  }
                ],
                "type": "array"
              }
            }
          },
          {
            "name": "wasVerified",
            "in": "query",
            "description": "The guest user was verified",
            "required": false,
            "schema": {
              "type": [
                "boolean",
                "null"
              ]
            }
          }
        ],
        "responses": {
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Forbidden."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Unauthorized."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Unknown internal server error."
          },
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/LicensedResources"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Fetching success."
          },
          "204": {
            "description": "Not found."
          }
        }
      }
    },
    "/adm/rs/beginners/users/totp/enable": {
      "post": {
        "operationId": "totp_start_activation_url",
        "tags": [
          "Beginners__User"
        ],
        "summary": "Enable TOTP",
        "description": "This route should be used to enable the TOTP app. Before enabling the TOTP\nthe user must be authenticated using the `/login/` route.\n\n",
        "parameters": [
          {
            "name": "qrCode",
            "in": "query",
            "required": false,
            "schema": {
              "type": [
                "boolean",
                "null"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Totp Activation Started."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Unauthorized."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Forbidden."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Unknown internal server error."
          }
        }
      }
    },
    "/adm/rs/beginners/users/login": {
      "post": {
        "operationId": "check_email_password_validity_url",
        "tags": [
          "Beginners__User"
        ],
        "summary": "Login with email and password",
        "description": "This route should be used to login with email and password. If the user has\nenabled the TOTP app, the user will be redirected to the TOTP activation\nroute.\n\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CheckUserCredentialsBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MyceliumLoginResponse"
                }
              }
            },
            "description": "Credentials are valid."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Unknown internal server error."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Forbidden."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Unauthorized."
          }
        },
        "security": [
          {}
        ]
      }
    },
    "/adm/su/managers/tenants/{id}/owner/{owner_id}": {
      "delete": {
        "operationId": "exclude_tenant_owner_url",
        "tags": [
          "Managers__Tenants"
        ],
        "summary": "Exclude a tenant owner",
        "description": "A single tenant can have multiple owners. This endpoint allows to exclude an\nowner from the tenant.\n\n",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The tenant primary key.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "owner_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Unauthorized."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Unknown internal server error."
          },
          "204": {
            "description": "Owner deleted."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Forbidden."
          }
        }
      },
      "patch": {
        "operationId": "include_tenant_owner_url",
        "tags": [
          "Managers__Tenants"
        ],
        "summary": "Include a tenant owner",
        "description": "A single tenant can have multiple owners. This endpoint allows to include a\nnew owner to the tenant.\n\n",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The tenant primary key.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "owner_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Forbidden."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Unauthorized."
          },
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TenantOwnerConnection"
                }
              }
            },
            "description": "Owner included."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Unknown internal server error."
          }
        }
      }
    },
    "/adm/rs/beginners/users/validate-activation-token": {
      "post": {
        "operationId": "check_user_token_url",
        "tags": [
          "Beginners__User"
        ],
        "summary": "Check token and activate user",
        "description": "This route should be used to check the token and activate the user.\n\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CheckTokenBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "text/plain": {
                "schema": {
                  "type": "boolean"
                }
              }
            },
            "description": "Activation token is valid."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Unauthorized."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Forbidden."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Unknown internal server error."
          }
        },
        "security": [
          {}
        ]
      }
    },
    "/adm/rs/system-manager/error-codes": {
      "post": {
        "operationId": "register_error_code_url",
        "tags": [
          "System_Manager__Error_Code"
        ],
        "summary": "Register a new error code.",
        "description": "This action is restricted to manager users.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateErrorCodeBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorCode"
                }
              }
            },
            "description": "Error code created."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Error code already exists."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Unknown internal server error."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Forbidden."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Unauthorized."
          }
        }
      },
      "get": {
        "operationId": "list_error_codes_url",
        "tags": [
          "System_Manager__Error_Code"
        ],
        "summary": "List available error codes.",
        "description": "List accounts with pagination. The `records` field contains a vector of\n`ErrorCode` model.\n\n",
        "parameters": [
          {
            "name": "prefix",
            "in": "query",
            "required": false,
            "schema": {
              "type": [
                "string",
                "null"
              ]
            }
          },
          {
            "name": "code",
            "in": "query",
            "required": false,
            "schema": {
              "type": [
                "integer",
                "null"
              ],
              "format": "int32"
            }
          },
          {
            "name": "isInternal",
            "in": "query",
            "required": false,
            "schema": {
              "type": [
                "boolean",
                "null"
              ]
            }
          },
          {
            "name": "skip",
            "in": "query",
            "required": false,
            "schema": {
              "type": [
                "integer",
                "null"
              ],
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "required": false,
            "schema": {
              "type": [
                "integer",
                "null"
              ],
              "format": "int32"
            }
          }
        ],
        "responses": {
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Unauthorized."
          },
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/ErrorCode"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Fetching success."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Unknown internal server error."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Forbidden."
          },
          "204": {
            "description": "Not found."
          }
        }
      }
    },
    "/adm/rs/tenant-manager/accounts/{account_id}": {
      "delete": {
        "operationId": "delete_subscription_account_url",
        "tags": [
          "Tenant_Manager__Account"
        ],
        "summary": "Delete a subscription account",
        "description": "This action is restricted to tenant managers.\n\n",
        "parameters": [
          {
            "name": "x-mycelium-tenant-id",
            "in": "header",
            "description": "The tenant unique id.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "account_id",
            "in": "path",
            "description": "The account primary key.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Account deleted."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Forbidden."
          },
          "204": {
            "description": "Account deleted."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Unauthorized."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Unknown internal server error."
          }
        }
      }
    },
    "/adm/rs/tenant-owner/tenants/{tenant_id}/archive": {
      "patch": {
        "operationId": "update_tenant_archiving_status_url",
        "tags": [
          "Tenant_Owner__Tenant"
        ],
        "summary": "Include an archive status to a tenant",
        "parameters": [
          {
            "name": "tenant_id",
            "in": "path",
            "description": "The tenant unique id.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Forbidden."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Unauthorized."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Unknown internal server error."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Tenant not updated."
          },
          "202": {
            "description": "Tenant updated."
          }
        }
      }
    },
    "/adm/rs/beginners/users": {
      "post": {
        "operationId": "create_default_user_url",
        "tags": [
          "Beginners__User"
        ],
        "summary": "Register user",
        "description": "This route should be used to register a new user. If the Bearer token is\nincluded in the request, the user will be registered with the provider\ninformed in the token. Otherwise, the password is required.\n\n",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "An optional Bearer token. When included, the user will be registered with the provider informed in the token.",
            "required": false,
            "schema": {
              "type": [
                "string",
                "null"
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateDefaultUserBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Unauthorized."
          },
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            },
            "description": "User successfully created."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Forbidden."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Unknown internal server error."
          }
        },
        "security": [
          {}
        ]
      }
    },
    "/adm/rs/users-manager/accounts/{account_id}/activate": {
      "patch": {
        "operationId": "activate_account_url",
        "tags": [
          "Users_Manager__Account"
        ],
        "summary": "Activate account",
        "description": "Any account could be activated and deactivated. This action turn an\naccount active.",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "The account primary key.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Account"
                }
              }
            },
            "description": "Account activated."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Account not activated."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Unauthorized."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Forbidden."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Unknown internal server error."
          }
        }
      }
    },
    "/adm/rs/subscriptions-manager/accounts/{account_id}": {
      "patch": {
        "operationId": "update_account_name_and_flags_url",
        "tags": [
          "Subscriptions_Manager__Account"
        ],
        "summary": "Update Subscription Account Name and Flags",
        "description": "Subscription accounts represents shared entities, like institutions,\ngroups, but not real persons.",
        "parameters": [
          {
            "name": "x-mycelium-tenant-id",
            "in": "header",
            "description": "The tenant unique id.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "account_id",
            "in": "path",
            "description": "The account primary key.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateSubscriptionAccountNameAndFlagsBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Unknown internal server error."
          },
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Account"
                }
              }
            },
            "description": "Account created."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Account already exists."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Unauthorized."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Forbidden."
          }
        }
      },
      "get": {
        "operationId": "get_account_details_url",
        "tags": [
          "Subscriptions_Manager__Account"
        ],
        "summary": "Get Subscription Account",
        "description": "Get a single subscription account.",
        "parameters": [
          {
            "name": "x-mycelium-tenant-id",
            "in": "header",
            "description": "The tenant unique id.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "account_id",
            "in": "path",
            "description": "The account primary key.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Unknown internal server error."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Forbidden."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Unauthorized."
          },
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Account"
                }
              }
            },
            "description": "Fetching success."
          },
          "204": {
            "description": "Not found."
          }
        }
      }
    },
    "/adm/rs/guests-manager/guest-roles/{guest_role_id}": {
      "patch": {
        "operationId": "update_guest_role_name_and_description_url",
        "tags": [
          "Guest_Manager__Guest_Role"
        ],
        "summary": "Partial Update Guest Role",
        "description": "Update name and description of a single Guest Role.",
        "parameters": [
          {
            "name": "guest_role_id",
            "in": "path",
            "description": "The guest-role primary key.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateGuestRoleNameAndDescriptionBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GuestRole"
                }
              }
            },
            "description": "Guest Role updated."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Guest Role not deleted."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Unauthorized."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Forbidden."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Unknown internal server error."
          }
        }
      },
      "delete": {
        "operationId": "delete_guest_role_url",
        "tags": [
          "Guest_Manager__Guest_Role"
        ],
        "summary": "Delete Guest Role",
        "description": "Delete a single guest role.",
        "parameters": [
          {
            "name": "guest_role_id",
            "in": "path",
            "description": "The guest-role primary key.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Guest Role deleted."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Guest Role not deleted."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Unauthorized."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Forbidden."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Unknown internal server error."
          }
        }
      }
    },
    "/adm/rs/beginners/users/start-password-reset": {
      "post": {
        "operationId": "start_password_redefinition_url",
        "tags": [
          "Beginners__User"
        ],
        "summary": "Start password redefinition",
        "description": "This route should be used to start the password redefinition process.\n\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StartPasswordResetBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Unknown internal server error."
          },
          "200": {
            "content": {
              "text/plain": {
                "schema": {
                  "type": "boolean"
                }
              }
            },
            "description": "Password change requested."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Forbidden."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Unauthorized."
          }
        },
        "security": [
          {}
        ]
      }
    },
    "/adm/rs/system-manager/webhooks": {
      "post": {
        "operationId": "crate_webhook_url",
        "tags": [
          "System_Manager__Webhook"
        ],
        "summary": "Create a webhook",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateWebHookBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebHook"
                }
              }
            },
            "description": "WebHook created."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Unknown internal server error."
          },
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebHook"
                }
              }
            },
            "description": "WebHook already exists."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Unauthorized."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Forbidden."
          }
        }
      },
      "get": {
        "operationId": "list_webhooks_url",
        "tags": [
          "System_Manager__Webhook"
        ],
        "summary": "List webhooks",
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "required": false,
            "schema": {
              "type": [
                "string",
                "null"
              ]
            }
          },
          {
            "name": "trigger",
            "in": "query",
            "required": false,
            "schema": {
              "oneOf": [
                {
                  "type": "null"
                },
                {
                  "$ref": "#/components/schemas/WebHookTrigger"
                }
              ]
            }
          }
        ],
        "responses": {
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Forbidden."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Unauthorized."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Unknown internal server error."
          },
          "204": {
            "description": "Not found."
          },
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebHook"
                }
              }
            },
            "description": "Fetching success."
          }
        }
      }
    },
    "/adm/rs/tenant-manager/tags/{tag_id}": {
      "delete": {
        "operationId": "delete_tenant_tag_url",
        "tags": [
          "Tenant_Manager__Tag"
        ],
        "summary": "Delete a tag",
        "parameters": [
          {
            "name": "x-mycelium-tenant-id",
            "in": "header",
            "description": "The tenant unique id.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "tag_id",
            "in": "path",
            "description": "The tag primary key.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Unknown internal server error."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Bad request."
          },
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Tag"
                }
              }
            },
            "description": "Tag successfully registered."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Unauthorized."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Forbidden."
          }
        }
      },
      "put": {
        "operationId": "update_tenant_tag_url",
        "tags": [
          "Tenant_Manager__Tag"
        ],
        "summary": "Update a tag",
        "parameters": [
          {
            "name": "x-mycelium-tenant-id",
            "in": "header",
            "description": "The tenant unique id.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "tag_id",
            "in": "path",
            "description": "The tag primary key.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateTagBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Bad request."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Unauthorized."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Unknown internal server error."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Forbidden."
          },
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Tag"
                }
              }
            },
            "description": "Tag successfully registered."
          }
        }
      }
    },
    "/adm/rs/tenant-manager/tags": {
      "post": {
        "operationId": "register_tenant_tag_url",
        "tags": [
          "Tenant_Manager__Tag"
        ],
        "summary": "Create a tag",
        "parameters": [
          {
            "name": "x-mycelium-tenant-id",
            "in": "header",
            "description": "The tenant unique id.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateTagBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Bad request."
          },
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Tag"
                }
              }
            },
            "description": "Tag successfully registered."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Unauthorized."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Forbidden."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Unknown internal server error."
          }
        }
      }
    },
    "/adm/rs/beginners/users/totp/check-token": {
      "post": {
        "operationId": "totp_check_token_url",
        "tags": [
          "Beginners__User"
        ],
        "summary": "Check TOTP token",
        "description": "This route should be used to check the TOTP token when tht totp app is\nenabled.\n\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TotpUpdatingValidationBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MyceliumLoginResponse"
                }
              }
            },
            "description": "Credentials are valid."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Unauthorized."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Forbidden."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpJsonResponse"
                }
              }
            },
            "description": "Unknown internal server error."
          }
        }
      }
    }
  },
  "components": {
    "responses": {
      "CheckEmailStatusResponse": {
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "email": {
                  "type": "string"
                },
                "hasAccount": {
                  "type": "boolean"
                },
                "provider": {
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "status": {
                  "type": "string"
                }
              },
              "required": [
                "email",
                "status",
                "hasAccount"
              ],
              "type": "object"
            }
          }
        },
        "description": ""
      },
      "CreateTokenResponse": {
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "connectionString": {
                  "type": "string"
                }
              },
              "required": [
                "connectionString"
              ],
              "type": "object"
            }
          }
        },
        "description": ""
      },
      "HttpJsonResponse": {
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "body": {
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "code": {
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "msg": {
                  "type": [
                    "string",
                    "null"
                  ]
                }
              },
              "type": "object"
            }
          }
        },
        "description": ""
      },
      "ListServicesResponse": {
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "contexts": {
                  "description": "The contexts\n\nThe contexts of the service. This key snould include the context where\nthe service should run, including authentication and authorization\ninformation.\n",
                  "items": {
                    "$ref": "#/components/schemas/Tool"
                  },
                  "type": "array"
                },
                "description": {
                  "description": "Description\n\nThe description of the service.\n",
                  "type": "string"
                },
                "lastUpdated": {
                  "description": "The last updated date\n\nThe last updated date of the service.\n",
                  "format": "date-time",
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "tools": {
                  "description": "A list of tools\n\nA list of tools that are discoverable by the service.\n",
                  "items": {
                    "$ref": "#/components/schemas/Tool"
                  },
                  "type": "array"
                }
              },
              "required": [
                "description",
                "contexts",
                "tools"
              ],
              "type": "object"
            }
          }
        },
        "description": ""
      },
      "MyceliumLoginResponse": {
        "content": {
          "application/json": {
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/User"
                },
                {
                  "properties": {
                    "duration": {
                      "type": "string"
                    },
                    "token": {
                      "type": "string"
                    },
                    "totpRequired": {
                      "type": "boolean"
                    }
                  },
                  "required": [
                    "token",
                    "duration",
                    "totpRequired"
                  ],
                  "type": "object"
                }
              ]
            }
          }
        },
        "description": ""
      },
      "TotpActivationFinishedResponse": {
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "finished": {
                  "type": "boolean"
                }
              },
              "required": [
                "finished"
              ],
              "type": "object"
            }
          }
        },
        "description": ""
      },
      "TotpActivationStartedResponse": {
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "totpUrl": {
                  "type": [
                    "string",
                    "null"
                  ]
                }
              },
              "type": "object"
            }
          }
        },
        "description": ""
      }
    },
    "schemas": {
      "APIAccountType": {
        "enum": [
          "staff",
          "manager",
          "user",
          "subscription",
          "actorAssociated",
          "tenantManager"
        ],
        "type": "string"
      },
      "Account": {
        "properties": {
          "accountType": {
            "$ref": "#/components/schemas/AccountType",
            "description": "The Account Type\n\nAccount type is the type of the account. The account type is used to\ncategorize the account."
          },
          "createdAt": {
            "description": "The Account Created Date",
            "format": "date-time",
            "type": "string"
          },
          "createdBy": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/WrittenBy",
                "description": "The Account Created By\n\nThe ID of the account that created the account. This is used for\nauditing purposes.\n"
              }
            ]
          },
          "guestUsers": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/Children_GuestUser_String",
                "description": "The Account Guest Users\n\nThis is the list of guest users of the account."
              }
            ]
          },
          "id": {
            "description": "The Account ID",
            "format": "uuid",
            "type": [
              "string",
              "null"
            ]
          },
          "isActive": {
            "description": "Account is active\n\nIf the account is active. This is used for logic trash and restore\naccount.\n",
            "type": "boolean"
          },
          "isArchived": {
            "description": "Account is archived\n\nIf the account is archived. This is used for account archiving.\n",
            "type": "boolean"
          },
          "isChecked": {
            "description": "Account is checked\n\nIf the account was verified by a human. This is used for account\nverification.\n",
            "type": "boolean"
          },
          "isDefault": {
            "type": "boolean"
          },
          "isDeleted": {
            "description": "Account is deleted\n\nIf the account is deleted. This is used for logic trash and restore\naccount.\n",
            "type": "boolean"
          },
          "meta": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "The Account Meta\n\nStore metadata about the account.\n",
            "propertyNames": {
              "oneOf": [
                {
                  "description": "Phone Number",
                  "enum": [
                    "phone_number"
                  ],
                  "type": "string"
                },
                {
                  "description": "The Telegram User",
                  "enum": [
                    "telegram_user"
                  ],
                  "type": "string"
                },
                {
                  "description": "The WhatsApp User",
                  "enum": [
                    "whats_app_user"
                  ],
                  "type": "string"
                },
                {
                  "description": "To specify any other meta key\n\nSpecify any other meta key that is not listed here.",
                  "properties": {
                    "custom": {
                      "description": "To specify any other meta key\n\nSpecify any other meta key that is not listed here.",
                      "type": "string"
                    }
                  },
                  "required": [
                    "custom"
                  ],
                  "type": "object"
                }
              ]
            },
            "type": [
              "object",
              "null"
            ]
          },
          "name": {
            "description": "The Account Name",
            "type": "string"
          },
          "owners": {
            "$ref": "#/components/schemas/Children_User_String",
            "description": "The Account Owners\n\nThis is the list of account owners. The account owners are the users who\nhave the account owner role."
          },
          "slug": {
            "description": "The Account Slug\n\nThis is generated from the account name. This is used for programmatic\naccess and verification of the account.\n",
            "type": "string"
          },
          "tags": {
            "description": "Account Tags\n\nInformation about the account. This is used for categorizing and filter\naccount.\n",
            "items": {
              "$ref": "#/components/schemas/Tag"
            },
            "type": [
              "array",
              "null"
            ]
          },
          "updatedAt": {
            "description": "The Account Updated Date",
            "format": "date-time",
            "type": [
              "string",
              "null"
            ]
          },
          "updatedBy": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/WrittenBy",
                "description": "The Account Updated By\n\nThe ID of the account that updated the account. This is used for\nauditing purposes.\n"
              }
            ]
          },
          "verboseStatus": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/VerboseStatus",
                "description": "Verbose status\n\nIs the human readable status of the account.\n"
              }
            ]
          }
        },
        "required": [
          "name",
          "slug",
          "isActive",
          "isChecked",
          "isArchived",
          "isDeleted",
          "isDefault",
          "owners",
          "accountType",
          "createdAt"
        ],
        "type": "object"
      },
      "AccountType": {
        "oneOf": [
          {
            "description": "Staff account type\n\nStaff account type is a special account type that is used to represent\nstaff members in the system.",
            "enum": [
              "staff"
            ],
            "type": "string"
          },
          {
            "description": "Manager account type\n\nManager account type is a special account type that is used to represent\nmanagers in the system.",
            "enum": [
              "manager"
            ],
            "type": "string"
          },
          {
            "description": "User account type\n\nUser account type is the default account type for users in the system.",
            "enum": [
              "user"
            ],
            "type": "string"
          },
          {
            "description": "Subscription account type\n\nA subscription account is a special account type that is used to\nrepresent legal entities that have a subscription to the service.",
            "properties": {
              "subscription": {
                "description": "Subscription account type\n\nA subscription account is a special account type that is used to\nrepresent legal entities that have a subscription to the service.",
                "properties": {
                  "tenantId": {
                    "format": "uuid",
                    "type": "string"
                  }
                },
                "required": [
                  "tenantId"
                ],
                "type": "object"
              }
            },
            "required": [
              "subscription"
            ],
            "type": "object"
          },
          {
            "description": "Role associated account type\n\nRole associated account type is an special type of account, created to\nconnect users to a specific standard role in the application.",
            "properties": {
              "roleAssociated": {
                "description": "Role associated account type\n\nRole associated account type is an special type of account, created to\nconnect users to a specific standard role in the application.",
                "properties": {
                  "readRoleId": {
                    "description": "The read role ID\n\nThe read role ID is the ID of the role that will be used to read the\ndata from the account.\n",
                    "format": "uuid",
                    "type": "string"
                  },
                  "roleName": {
                    "description": "The role name\n\nThe role name should be the same for the read and write roles.\n",
                    "type": "string"
                  },
                  "tenantId": {
                    "description": "The tenant ID",
                    "format": "uuid",
                    "type": "string"
                  },
                  "writeRoleId": {
                    "description": "The write role ID\n\nThe write role ID is the ID of the role that will be used to write\nthe data to the account.\n",
                    "format": "uuid",
                    "type": "string"
                  }
                },
                "required": [
                  "tenantId",
                  "roleName",
                  "readRoleId",
                  "writeRoleId"
                ],
                "type": "object"
              }
            },
            "required": [
              "roleAssociated"
            ],
            "type": "object"
          },
          {
            "description": "Actor associated account type",
            "properties": {
              "actorAssociated": {
                "description": "Actor associated account type",
                "properties": {
                  "actor": {
                    "$ref": "#/components/schemas/SystemActor"
                  }
                },
                "required": [
                  "actor"
                ],
                "type": "object"
              }
            },
            "required": [
              "actorAssociated"
            ],
            "type": "object"
          },
          {
            "description": "Tenant manager account type",
            "properties": {
              "tenantManager": {
                "description": "Tenant manager account type",
                "properties": {
                  "tenantId": {
                    "format": "uuid",
                    "type": "string"
                  }
                },
                "required": [
                  "tenantId"
                ],
                "type": "object"
              }
            },
            "required": [
              "tenantManager"
            ],
            "type": "object"
          }
        ]
      },
      "ApiSystemActor": {
        "enum": [
          "gatewayManager",
          "guestsManager",
          "systemManager"
        ],
        "type": "string"
      },
      "CheckTokenBody": {
        "properties": {
          "email": {
            "type": "string"
          },
          "token": {
            "type": "string"
          }
        },
        "required": [
          "token",
          "email"
        ],
        "type": "object"
      },
      "CheckUserCredentialsBody": {
        "properties": {
          "email": {
            "type": "string"
          },
          "password": {
            "type": "string"
          }
        },
        "required": [
          "email",
          "password"
        ],
        "type": "object"
      },
      "Children_Account_String": {
        "description": "A children record\n\nThis enumerator allow represents the children elements using their primary\nkeys (Ids option) or the true records (Record option).",
        "oneOf": [
          {
            "properties": {
              "records": {
                "items": {
                  "properties": {
                    "accountType": {
                      "$ref": "#/components/schemas/AccountType",
                      "description": "The Account Type\n\nAccount type is the type of the account. The account type is used to\ncategorize the account."
                    },
                    "createdAt": {
                      "description": "The Account Created Date",
                      "format": "date-time",
                      "type": "string"
                    },
                    "createdBy": {
                      "oneOf": [
                        {
                          "type": "null"
                        },
                        {
                          "$ref": "#/components/schemas/WrittenBy",
                          "description": "The Account Created By\n\nThe ID of the account that created the account. This is used for\nauditing purposes.\n"
                        }
                      ]
                    },
                    "guestUsers": {
                      "oneOf": [
                        {
                          "type": "null"
                        },
                        {
                          "$ref": "#/components/schemas/Children_GuestUser_String",
                          "description": "The Account Guest Users\n\nThis is the list of guest users of the account."
                        }
                      ]
                    },
                    "id": {
                      "description": "The Account ID",
                      "format": "uuid",
                      "type": [
                        "string",
                        "null"
                      ]
                    },
                    "isActive": {
                      "description": "Account is active\n\nIf the account is active. This is used for logic trash and restore\naccount.\n",
                      "type": "boolean"
                    },
                    "isArchived": {
                      "description": "Account is archived\n\nIf the account is archived. This is used for account archiving.\n",
                      "type": "boolean"
                    },
                    "isChecked": {
                      "description": "Account is checked\n\nIf the account was verified by a human. This is used for account\nverification.\n",
                      "type": "boolean"
                    },
                    "isDefault": {
                      "type": "boolean"
                    },
                    "isDeleted": {
                      "description": "Account is deleted\n\nIf the account is deleted. This is used for logic trash and restore\naccount.\n",
                      "type": "boolean"
                    },
                    "meta": {
                      "additionalProperties": {
                        "type": "string"
                      },
                      "description": "The Account Meta\n\nStore metadata about the account.\n",
                      "propertyNames": {
                        "oneOf": [
                          {
                            "description": "Phone Number",
                            "enum": [
                              "phone_number"
                            ],
                            "type": "string"
                          },
                          {
                            "description": "The Telegram User",
                            "enum": [
                              "telegram_user"
                            ],
                            "type": "string"
                          },
                          {
                            "description": "The WhatsApp User",
                            "enum": [
                              "whats_app_user"
                            ],
                            "type": "string"
                          },
                          {
                            "description": "To specify any other meta key\n\nSpecify any other meta key that is not listed here.",
                            "properties": {
                              "custom": {
                                "description": "To specify any other meta key\n\nSpecify any other meta key that is not listed here.",
                                "type": "string"
                              }
                            },
                            "required": [
                              "custom"
                            ],
                            "type": "object"
                          }
                        ]
                      },
                      "type": [
                        "object",
                        "null"
                      ]
                    },
                    "name": {
                      "description": "The Account Name",
                      "type": "string"
                    },
                    "owners": {
                      "$ref": "#/components/schemas/Children_User_String",
                      "description": "The Account Owners\n\nThis is the list of account owners. The account owners are the users who\nhave the account owner role."
                    },
                    "slug": {
                      "description": "The Account Slug\n\nThis is generated from the account name. This is used for programmatic\naccess and verification of the account.\n",
                      "type": "string"
                    },
                    "tags": {
                      "description": "Account Tags\n\nInformation about the account. This is used for categorizing and filter\naccount.\n",
                      "items": {
                        "$ref": "#/components/schemas/Tag"
                      },
                      "type": [
                        "array",
                        "null"
                      ]
                    },
                    "updatedAt": {
                      "description": "The Account Updated Date",
                      "format": "date-time",
                      "type": [
                        "string",
                        "null"
                      ]
                    },
                    "updatedBy": {
                      "oneOf": [
                        {
                          "type": "null"
                        },
                        {
                          "$ref": "#/components/schemas/WrittenBy",
                          "description": "The Account Updated By\n\nThe ID of the account that updated the account. This is used for\nauditing purposes.\n"
                        }
                      ]
                    },
                    "verboseStatus": {
                      "oneOf": [
                        {
                          "type": "null"
                        },
                        {
                          "$ref": "#/components/schemas/VerboseStatus",
                          "description": "Verbose status\n\nIs the human readable status of the account.\n"
                        }
                      ]
                    }
                  },
                  "required": [
                    "name",
                    "slug",
                    "isActive",
                    "isChecked",
                    "isArchived",
                    "isDeleted",
                    "isDefault",
                    "owners",
                    "accountType",
                    "createdAt"
                  ],
                  "type": "object"
                },
                "type": "array"
              }
            },
            "required": [
              "records"
            ],
            "type": "object"
          },
          {
            "properties": {
              "ids": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            "required": [
              "ids"
            ],
            "type": "object"
          }
        ]
      },
      "Children_GuestRole_String": {
        "description": "A children record\n\nThis enumerator allow represents the children elements using their primary\nkeys (Ids option) or the true records (Record option).",
        "oneOf": [
          {
            "properties": {
              "records": {
                "items": {
                  "properties": {
                    "children": {
                      "oneOf": [
                        {
                          "type": "null"
                        },
                        {
                          "$ref": "#/components/schemas/Children_GuestRole_String",
                          "description": "Children roles represents guest roles that are children of the current\nrole, and should be used to determine the allowed roles for the role\nowner guest other users."
                        }
                      ]
                    },
                    "created": {
                      "description": "The date and time the role was created",
                      "format": "date-time",
                      "type": "string"
                    },
                    "description": {
                      "type": [
                        "string",
                        "null"
                      ]
                    },
                    "id": {
                      "format": "uuid",
                      "type": [
                        "string",
                        "null"
                      ]
                    },
                    "name": {
                      "type": "string"
                    },
                    "permission": {
                      "$ref": "#/components/schemas/Permission"
                    },
                    "slug": {
                      "type": "string"
                    },
                    "system": {
                      "description": "If it is a system role\n\nSystem roles represents standard core actors of the Mycelium API\nGateway, defined in `SystemActor`\n",
                      "type": "boolean"
                    },
                    "updated": {
                      "description": "The date and time the role was last updated",
                      "format": "date-time",
                      "type": [
                        "string",
                        "null"
                      ]
                    }
                  },
                  "required": [
                    "name",
                    "slug",
                    "permission",
                    "created",
                    "system"
                  ],
                  "type": "object"
                },
                "type": "array"
              }
            },
            "required": [
              "records"
            ],
            "type": "object"
          },
          {
            "properties": {
              "ids": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            "required": [
              "ids"
            ],
            "type": "object"
          }
        ]
      },
      "Children_GuestUser_String": {
        "description": "A children record\n\nThis enumerator allow represents the children elements using their primary\nkeys (Ids option) or the true records (Record option).",
        "oneOf": [
          {
            "properties": {
              "records": {
                "items": {
                  "properties": {
                    "accounts": {
                      "oneOf": [
                        {
                          "type": "null"
                        },
                        {
                          "$ref": "#/components/schemas/Children_Account_String",
                          "description": "The account which the guest user is connected to"
                        }
                      ]
                    },
                    "created": {
                      "description": "The guesting date",
                      "format": "date-time",
                      "type": "string"
                    },
                    "email": {
                      "$ref": "#/components/schemas/Email",
                      "description": "The guest user email\n\nThe email is used to identify the guest user connection with the target\naccount.\n"
                    },
                    "guestRole": {
                      "$ref": "#/components/schemas/Parent_GuestRole_String",
                      "description": "The guest user role"
                    },
                    "id": {
                      "description": "The guest user id",
                      "format": "uuid",
                      "type": [
                        "string",
                        "null"
                      ]
                    },
                    "updated": {
                      "description": "The last updated date",
                      "format": "date-time",
                      "type": [
                        "string",
                        "null"
                      ]
                    },
                    "wasVerified": {
                      "description": "The guest user is verified\n\nWHile the user is not verified, the user will not be able to access\nthe account.\n",
                      "type": "boolean"
                    }
                  },
                  "required": [
                    "email",
                    "guestRole",
                    "created",
                    "wasVerified"
                  ],
                  "type": "object"
                },
                "type": "array"
              }
            },
            "required": [
              "records"
            ],
            "type": "object"
          },
          {
            "properties": {
              "ids": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            "required": [
              "ids"
            ],
            "type": "object"
          }
        ]
      },
      "Children_Owner_String": {
        "description": "A children record\n\nThis enumerator allow represents the children elements using their primary\nkeys (Ids option) or the true records (Record option).",
        "oneOf": [
          {
            "properties": {
              "records": {
                "items": {
                  "properties": {
                    "email": {
                      "description": "The owner email\n\nThe email of the user that administrate the profile. Email denotes the\ncentral part of the profile management. Email should be used to collect\nlicensed IDs and perform guest operations. Thus, it should be unique in\nthe Mycelium platform.",
                      "type": "string"
                    },
                    "firstName": {
                      "description": "The owner first name",
                      "type": [
                        "string",
                        "null"
                      ]
                    },
                    "id": {
                      "format": "uuid",
                      "type": "string"
                    },
                    "isPrincipal": {
                      "description": "If the owner is the principal account owner",
                      "type": "boolean"
                    },
                    "lastName": {
                      "description": "The owner last name",
                      "type": [
                        "string",
                        "null"
                      ]
                    },
                    "username": {
                      "description": "The owner username",
                      "type": [
                        "string",
                        "null"
                      ]
                    }
                  },
                  "required": [
                    "id",
                    "email",
                    "isPrincipal"
                  ],
                  "type": "object"
                },
                "type": "array"
              }
            },
            "required": [
              "records"
            ],
            "type": "object"
          },
          {
            "properties": {
              "ids": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            "required": [
              "ids"
            ],
            "type": "object"
          }
        ]
      },
      "Children_User_String": {
        "description": "A children record\n\nThis enumerator allow represents the children elements using their primary\nkeys (Ids option) or the true records (Record option).",
        "oneOf": [
          {
            "properties": {
              "records": {
                "items": {
                  "properties": {
                    "account": {
                      "oneOf": [
                        {
                          "type": "null"
                        },
                        {
                          "$ref": "#/components/schemas/Parent_Account_String"
                        }
                      ]
                    },
                    "created": {
                      "format": "date-time",
                      "type": "string"
                    },
                    "email": {
                      "$ref": "#/components/schemas/Email"
                    },
                    "firstName": {
                      "type": [
                        "string",
                        "null"
                      ]
                    },
                    "id": {
                      "format": "uuid",
                      "type": [
                        "string",
                        "null"
                      ]
                    },
                    "isActive": {
                      "type": "boolean"
                    },
                    "isPrincipal": {
                      "description": "If the user is the principal user of the account.\n\nThe principal user contains information of the first email that created\nthe account. This information is used to send emails to the principal\nuser.\n\nPrincipal users should not be deleted or deactivated if the account has\nother users connected.\n",
                      "type": "boolean"
                    },
                    "lastName": {
                      "type": [
                        "string",
                        "null"
                      ]
                    },
                    "mfa": {
                      "$ref": "#/components/schemas/MultiFactorAuthentication",
                      "description": "The user TOTP\n\nWhen enabled the user has verified the TOTP and the auth url is set.\n"
                    },
                    "provider": {
                      "oneOf": [
                        {
                          "type": "null"
                        },
                        {
                          "$ref": "#/components/schemas/Provider",
                          "description": "The user provider.\n\nProvider is a optional field but it should be None only during the\ncollection of the user data from database. Such None initialization\nprevents that password hashes and salts should be exposed to the\noutside.\n\n! Thus, be careful on change this field.\n"
                        }
                      ]
                    },
                    "updated": {
                      "format": "date-time",
                      "type": [
                        "string",
                        "null"
                      ]
                    },
                    "username": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "username",
                    "email",
                    "isActive",
                    "created",
                    "isPrincipal",
                    "mfa"
                  ],
                  "type": "object"
                },
                "type": "array"
              }
            },
            "required": [
              "records"
            ],
            "type": "object"
          },
          {
            "properties": {
              "ids": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            "required": [
              "ids"
            ],
            "type": "object"
          }
        ]
      },
      "CreateAccountMetaBody": {
        "properties": {
          "key": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        },
        "required": [
          "key",
          "value"
        ],
        "type": "object"
      },
      "CreateAccountTagBody": {
        "properties": {
          "accountId": {
            "format": "uuid",
            "type": "string"
          },
          "meta": {
            "additionalProperties": {
              "type": "string"
            },
            "propertyNames": {
              "type": "string"
            },
            "type": "object"
          },
          "value": {
            "type": "string"
          }
        },
        "required": [
          "accountId",
          "value",
          "meta"
        ],
        "type": "object"
      },
      "CreateDefaultAccountBody": {
        "properties": {
          "name": {
            "type": "string"
          }
        },
        "required": [
          "name"
        ],
        "type": "object"
      },
      "CreateDefaultUserBody": {
        "properties": {
          "email": {
            "type": "string"
          },
          "firstName": {
            "type": [
              "string",
              "null"
            ]
          },
          "lastName": {
            "type": [
              "string",
              "null"
            ]
          },
          "password": {
            "type": [
              "string",
              "null"
            ]
          }
        },
        "required": [
          "email"
        ],
        "type": "object"
      },
      "CreateErrorCodeBody": {
        "properties": {
          "details": {
            "type": [
              "string",
              "null"
            ]
          },
          "isInternal": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          },
          "prefix": {
            "type": "string"
          }
        },
        "required": [
          "prefix",
          "message",
          "isInternal"
        ],
        "type": "object"
      },
      "CreateGuestRoleBody": {
        "properties": {
          "description": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "permission": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/Permission"
              }
            ]
          },
          "system": {
            "type": "boolean"
          }
        },
        "required": [
          "name",
          "description",
          "system"
        ],
        "type": "object"
      },
      "CreateSubscriptionAccountBody": {
        "properties": {
          "name": {
            "type": "string"
          }
        },
        "required": [
          "name"
        ],
        "type": "object"
      },
      "CreateSystemSubscriptionAccountBody": {
        "properties": {
          "actor": {
            "$ref": "#/components/schemas/ApiSystemActor",
            "description": "The role ID"
          },
          "name": {
            "description": "The account name",
            "type": "string"
          }
        },
        "required": [
          "name",
          "actor"
        ],
        "type": "object"
      },
      "CreateTagBody": {
        "properties": {
          "meta": {
            "additionalProperties": {
              "type": "string"
            },
            "propertyNames": {
              "type": "string"
            },
            "type": "object"
          },
          "value": {
            "type": "string"
          }
        },
        "required": [
          "value",
          "meta"
        ],
        "type": "object"
      },
      "CreateTenantBody": {
        "properties": {
          "description": {
            "description": "The description of the tenant",
            "type": [
              "string",
              "null"
            ]
          },
          "name": {
            "description": "The name of the tenant",
            "type": "string"
          },
          "ownerId": {
            "description": "The owner of the tenant",
            "format": "uuid",
            "type": "string"
          }
        },
        "required": [
          "name",
          "ownerId"
        ],
        "type": "object"
      },
      "CreateTenantMetaBody": {
        "properties": {
          "key": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        },
        "required": [
          "key",
          "value"
        ],
        "type": "object"
      },
      "CreateTokenBody": {
        "properties": {
          "expiration": {
            "description": "The expiration time of the token\n\nThe expiration time of the token in seconds.\n",
            "format": "int64",
            "type": "integer"
          },
          "permissionedRoles": {
            "description": "The permissioned roles\n\nIf specified, the actions allowed by the token will be scoped to the\nroles and permissions. Otherwise, the complete set of roles and\npermissions present in the user profile will be used.\n",
            "items": {
              "items": false,
              "prefixItems": [
                {
                  "type": "string"
                },
                {
                  "enum": [
                    "read",
                    "write"
                  ],
                  "type": "string"
                }
              ],
              "type": "array"
            },
            "type": [
              "array",
              "null"
            ]
          },
          "role": {
            "description": "A single role\n\nIf specified, the actions allowed by the token will be scoped to the\nrole. If not specified, the actions allowed by the token will be\nscoped to the user profile.\n",
            "type": [
              "string",
              "null"
            ]
          },
          "tenantId": {
            "description": "A single tenant ID\n\nIf specified, the actions allowed by the token will be scoped to the\ntenant. If not specified, the actions allowed by the token will be\nscoped to the user profile.\n",
            "format": "uuid",
            "type": [
              "string",
              "null"
            ]
          }
        },
        "required": [
          "expiration"
        ],
        "type": "object"
      },
      "CreateTokenResponse": {
        "properties": {
          "connectionString": {
            "type": "string"
          }
        },
        "required": [
          "connectionString"
        ],
        "type": "object"
      },
      "CreateWebHookBody": {
        "properties": {
          "description": {
            "type": [
              "string",
              "null"
            ]
          },
          "name": {
            "type": "string"
          },
          "secret": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/HttpSecret"
              }
            ]
          },
          "trigger": {
            "$ref": "#/components/schemas/WebHookTrigger"
          },
          "url": {
            "type": "string"
          }
        },
        "required": [
          "name",
          "url",
          "trigger"
        ],
        "type": "object"
      },
      "DeleteAccountMetaParams": {
        "properties": {
          "key": {
            "type": "string"
          }
        },
        "required": [
          "key"
        ],
        "type": "object"
      },
      "DeleteAccountTagParams": {
        "properties": {
          "accountId": {
            "format": "uuid",
            "type": "string"
          }
        },
        "required": [
          "accountId"
        ],
        "type": "object"
      },
      "DeleteTenantMetaBody": {
        "properties": {
          "key": {
            "type": "string"
          }
        },
        "required": [
          "key"
        ],
        "type": "object"
      },
      "DowngradeAccountPrivilegesBody": {
        "properties": {
          "to": {
            "$ref": "#/components/schemas/DowngradeTargetAccountType"
          }
        },
        "required": [
          "to"
        ],
        "type": "object"
      },
      "DowngradeTargetAccountType": {
        "enum": [
          "manager",
          "user"
        ],
        "type": "string"
      },
      "Email": {
        "properties": {
          "domain": {
            "type": "string"
          },
          "username": {
            "type": "string"
          }
        },
        "required": [
          "username",
          "domain"
        ],
        "type": "object"
      },
      "ErrorCode": {
        "description": "ErrorCode is a struct that represents an error code.\n\nIt is used to represent errors that occur in the system. Error should be\ninternal or external. Internal errors are errors that are not expected to\noccur in the system. External errors are errors that are not expected to\noccur in the system.",
        "properties": {
          "code": {
            "description": "A compiled string of the prefix and code.",
            "type": [
              "string",
              "null"
            ]
          },
          "details": {
            "description": "The details of the error.",
            "type": [
              "string",
              "null"
            ]
          },
          "errorNumber": {
            "description": "The code of the error.",
            "format": "int32",
            "type": "integer"
          },
          "isInternal": {
            "description": "Whether the error is internal or external.",
            "type": "boolean"
          },
          "isNative": {
            "description": "Whether the error is native of mycelium or not.",
            "type": "boolean"
          },
          "message": {
            "description": "The message of the error.",
            "type": "string"
          },
          "prefix": {
            "description": "The prefix of the error.",
            "type": "string"
          }
        },
        "required": [
          "prefix",
          "errorNumber",
          "message",
          "isInternal",
          "isNative"
        ],
        "type": "object"
      },
      "GuestRole": {
        "properties": {
          "children": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/Children_GuestRole_String",
                "description": "Children roles represents guest roles that are children of the current\nrole, and should be used to determine the allowed roles for the role\nowner guest other users."
              }
            ]
          },
          "created": {
            "description": "The date and time the role was created",
            "format": "date-time",
            "type": "string"
          },
          "description": {
            "type": [
              "string",
              "null"
            ]
          },
          "id": {
            "format": "uuid",
            "type": [
              "string",
              "null"
            ]
          },
          "name": {
            "type": "string"
          },
          "permission": {
            "$ref": "#/components/schemas/Permission"
          },
          "slug": {
            "type": "string"
          },
          "system": {
            "description": "If it is a system role\n\nSystem roles represents standard core actors of the Mycelium API\nGateway, defined in `SystemActor`\n",
            "type": "boolean"
          },
          "updated": {
            "description": "The date and time the role was last updated",
            "format": "date-time",
            "type": [
              "string",
              "null"
            ]
          }
        },
        "required": [
          "name",
          "slug",
          "permission",
          "created",
          "system"
        ],
        "type": "object"
      },
      "GuestTenantOwnerBody": {
        "properties": {
          "email": {
            "type": "string"
          }
        },
        "required": [
          "email"
        ],
        "type": "object"
      },
      "GuestUser": {
        "properties": {
          "accounts": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/Children_Account_String",
                "description": "The account which the guest user is connected to"
              }
            ]
          },
          "created": {
            "description": "The guesting date",
            "format": "date-time",
            "type": "string"
          },
          "email": {
            "$ref": "#/components/schemas/Email",
            "description": "The guest user email\n\nThe email is used to identify the guest user connection with the target\naccount.\n"
          },
          "guestRole": {
            "$ref": "#/components/schemas/Parent_GuestRole_String",
            "description": "The guest user role"
          },
          "id": {
            "description": "The guest user id",
            "format": "uuid",
            "type": [
              "string",
              "null"
            ]
          },
          "updated": {
            "description": "The last updated date",
            "format": "date-time",
            "type": [
              "string",
              "null"
            ]
          },
          "wasVerified": {
            "description": "The guest user is verified\n\nWHile the user is not verified, the user will not be able to access\nthe account.\n",
            "type": "boolean"
          }
        },
        "required": [
          "email",
          "guestRole",
          "created",
          "wasVerified"
        ],
        "type": "object"
      },
      "GuestUserBody": {
        "properties": {
          "email": {
            "type": "string"
          }
        },
        "required": [
          "email"
        ],
        "type": "object"
      },
      "GuestUserToChildrenBody": {
        "properties": {
          "email": {
            "description": "The email of the guest user",
            "type": "string"
          },
          "parentRoleId": {
            "description": "The parent role id\n\nThe parent related to the guest role to be created. Example, if the\nguest role is a child of the account manager role, the parent role id\nshould be this role id.\n\nThe child role id should be passed as the `role_id` path argument.",
            "format": "uuid",
            "type": "string"
          }
        },
        "required": [
          "email",
          "parentRoleId"
        ],
        "type": "object"
      },
      "GuestUserToSubscriptionManagerAccountBody": {
        "properties": {
          "email": {
            "type": "string"
          },
          "permission": {
            "$ref": "#/components/schemas/Permission"
          }
        },
        "required": [
          "email",
          "permission"
        ],
        "type": "object"
      },
      "HashMap": {
        "additionalProperties": {
          "type": "string"
        },
        "propertyNames": {
          "oneOf": [
            {
              "description": "Phone Number",
              "enum": [
                "phone_number"
              ],
              "type": "string"
            },
            {
              "description": "The Telegram User",
              "enum": [
                "telegram_user"
              ],
              "type": "string"
            },
            {
              "description": "The WhatsApp User",
              "enum": [
                "whats_app_user"
              ],
              "type": "string"
            },
            {
              "description": "To specify any other meta key\n\nSpecify any other meta key that is not listed here.",
              "properties": {
                "custom": {
                  "description": "To specify any other meta key\n\nSpecify any other meta key that is not listed here.",
                  "type": "string"
                }
              },
              "required": [
                "custom"
              ],
              "type": "object"
            }
          ]
        },
        "type": "object"
      },
      "HealthStatus": {
        "description": "The health status of the service\n\nThe status should be Unknown, Healthy or Unhealthy. At the startup of the\nservice, the status should be Unknown. When the health check is successful,\nthe status should be Healthy. When the health check is not successful, the\nstatus should be Unhealthy.\n",
        "oneOf": [
          {
            "description": "The health status is unknown\n",
            "enum": [
              "unknown"
            ],
            "type": "string"
          },
          {
            "description": "The health status is healthy\n",
            "properties": {
              "healthy": {
                "description": "The health status is healthy\n",
                "properties": {
                  "checkedAt": {
                    "description": "The timestamp for the last health check\n",
                    "format": "date-time",
                    "type": "string"
                  }
                },
                "required": [
                  "checkedAt"
                ],
                "type": "object"
              }
            },
            "required": [
              "healthy"
            ],
            "type": "object"
          },
          {
            "description": "The health status is fully unhealthy\n",
            "properties": {
              "unhealthy": {
                "description": "The health status is fully unhealthy\n",
                "properties": {
                  "attempts": {
                    "description": "The number of attempts with unhealthy status\n",
                    "format": "int32",
                    "minimum": 0,
                    "type": "integer"
                  },
                  "checkedAt": {
                    "description": "The timestamp for the last health check\n",
                    "format": "date-time",
                    "type": "string"
                  },
                  "unhealthyInstances": {
                    "description": "Unhealthy instances\n",
                    "items": {
                      "$ref": "#/components/schemas/UnhealthyInstance"
                    },
                    "type": "array"
                  }
                },
                "required": [
                  "checkedAt",
                  "attempts",
                  "unhealthyInstances"
                ],
                "type": "object"
              }
            },
            "required": [
              "unhealthy"
            ],
            "type": "object"
          },
          {
            "properties": {
              "unavailable": {
                "properties": {
                  "attempts": {
                    "description": "The number of attempts with unavailable status\n",
                    "format": "int32",
                    "minimum": 0,
                    "type": "integer"
                  },
                  "checkedAt": {
                    "description": "The timestamp for the last health check\n",
                    "format": "date-time",
                    "type": "string"
                  },
                  "errorMessage": {
                    "description": "The error message\n",
                    "type": "string"
                  }
                },
                "required": [
                  "checkedAt",
                  "attempts",
                  "errorMessage"
                ],
                "type": "object"
              }
            },
            "required": [
              "unavailable"
            ],
            "type": "object"
          }
        ]
      },
      "HttpJsonResponse": {
        "properties": {
          "body": {
            "type": [
              "string",
              "null"
            ]
          },
          "code": {
            "type": [
              "string",
              "null"
            ]
          },
          "msg": {
            "type": [
              "string",
              "null"
            ]
          }
        },
        "type": "object"
      },
      "HttpMethod": {
        "enum": [
          "GET",
          "HEAD",
          "PATCH",
          "POST",
          "PUT",
          "DELETE",
          "CONNECT",
          "OPTIONS",
          "TRACE",
          "ALL",
          "NONE"
        ],
        "type": "string"
      },
      "HttpSecret": {
        "oneOf": [
          {
            "description": "Authentication header\n\nThe secret is passed as an authentication header.\n",
            "properties": {
              "authorizationHeader": {
                "description": "Authentication header\n\nThe secret is passed as an authentication header.\n",
                "properties": {
                  "headerName": {
                    "description": "The header name\n\nThe name of the header. For example, if the name is `Authorization`,\nthe header will be `Authorization Bear: <token value>`. The default\nvalue is `Authorization`.\n",
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "prefix": {
                    "description": "The header prefix\n\nIf present the prefix is added to the header. For example, if the\nprefix is `Bearer`, the header will be `Authorization Bearer: <token\nvalue>`.\n",
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "token": {
                    "description": "The header token\n\nThe token is the value of the header. For example, if the token is\n`1234`, the header will be `Authorization Bearer: 123\n",
                    "type": "string"
                  }
                },
                "required": [
                  "token"
                ],
                "type": "object"
              }
            },
            "required": [
              "authorizationHeader"
            ],
            "type": "object"
          },
          {
            "properties": {
              "queryParameter": {
                "properties": {
                  "name": {
                    "description": "The query parameter name\n\nThe name of the query parameter. For example, if the name is `token`,\nthe query parameter will be `?token=<token value>`.\n",
                    "type": "string"
                  },
                  "token": {
                    "description": "The query parameter value\n\nThe value of the query parameter. For example, if the value is `1234`,\nthe query parameter will be `?token=1234`.\n",
                    "type": "string"
                  }
                },
                "required": [
                  "name",
                  "token"
                ],
                "type": "object"
              }
            },
            "required": [
              "queryParameter"
            ],
            "type": "object"
          }
        ]
      },
      "IDSource": {
        "enum": [
          "user",
          "account"
        ],
        "type": "string"
      },
      "LicensedResource": {
        "properties": {
          "accId": {
            "description": "The guest account unique id\n\nThis is the unique identifier of the account that is own of the\nresource to be managed.",
            "format": "uuid",
            "type": "string"
          },
          "accName": {
            "description": "The guest account name\n\nThis is the name of the account that is own of the resource to be\nmanaged.",
            "type": "string"
          },
          "perm": {
            "$ref": "#/components/schemas/Permission",
            "description": "The guest role permissions\n\nThis is the list of permissions that the guest role has."
          },
          "role": {
            "description": "The guest account role verbose name\n\nThis is the verbose name of the role that is own of the resource to be\nmanaged.",
            "type": "string"
          },
          "sysAcc": {
            "description": "If the guest account is a system account\n\nSystem accounts has permissions to act as special users into the\nMycelium system.",
            "type": "boolean"
          },
          "tenantId": {
            "description": "The guest account tenant unique id\n\nThis is the unique identifier of the tenant that is own of the resource\nto be managed.",
            "format": "uuid",
            "type": "string"
          },
          "verified": {
            "description": "If the guest account was verified\n\nIf the user accepted the invitation to join the account, the account\nshould be verified.\n",
            "type": "boolean"
          }
        },
        "required": [
          "accId",
          "sysAcc",
          "tenantId",
          "accName",
          "role",
          "perm",
          "verified"
        ],
        "type": "object"
      },
      "LicensedResources": {
        "oneOf": [
          {
            "properties": {
              "records": {
                "items": {
                  "$ref": "#/components/schemas/LicensedResource"
                },
                "type": "array"
              }
            },
            "required": [
              "records"
            ],
            "type": "object"
          },
          {
            "properties": {
              "urls": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            "required": [
              "urls"
            ],
            "type": "object"
          }
        ]
      },
      "ListErrorCodesParams": {
        "properties": {
          "code": {
            "format": "int32",
            "type": [
              "integer",
              "null"
            ]
          },
          "isInternal": {
            "type": [
              "boolean",
              "null"
            ]
          },
          "prefix": {
            "type": [
              "string",
              "null"
            ]
          }
        },
        "type": "object"
      },
      "ListGuestRolesParams": {
        "properties": {
          "name": {
            "description": "The name of the guest role.",
            "type": [
              "string",
              "null"
            ]
          },
          "slug": {
            "description": "The slug of the guest role.",
            "type": [
              "string",
              "null"
            ]
          },
          "system": {
            "description": "If it is a system role.",
            "type": [
              "boolean",
              "null"
            ]
          }
        },
        "type": "object"
      },
      "ListLicensedAccountsOfEmailParams": {
        "properties": {
          "email": {
            "description": "The email which the guest user is connected to",
            "type": "string"
          },
          "permissionedRoles": {
            "description": "The permissioned roles which the guest user was invited to",
            "items": {
              "items": false,
              "prefixItems": [
                {
                  "type": "string"
                },
                {
                  "enum": [
                    "read",
                    "write"
                  ],
                  "type": "string"
                }
              ],
              "type": "array"
            },
            "type": [
              "array",
              "null"
            ]
          },
          "roles": {
            "description": "The roles which the guest user was invited to",
            "items": {
              "type": "string"
            },
            "type": [
              "array",
              "null"
            ]
          },
          "wasVerified": {
            "description": "The guest user was verified",
            "type": [
              "boolean",
              "null"
            ]
          }
        },
        "required": [
          "email"
        ],
        "type": "object"
      },
      "ListRoutesByServiceParams": {
        "properties": {
          "id": {
            "format": "uuid",
            "type": [
              "string",
              "null"
            ]
          },
          "name": {
            "type": [
              "string",
              "null"
            ]
          }
        },
        "type": "object"
      },
      "ListServicesParams": {
        "properties": {
          "id": {
            "format": "uuid",
            "type": [
              "string",
              "null"
            ]
          },
          "name": {
            "type": [
              "string",
              "null"
            ]
          }
        },
        "type": "object"
      },
      "ListServicesResponse": {
        "properties": {
          "contexts": {
            "description": "The contexts\n\nThe contexts of the service. This key snould include the context where\nthe service should run, including authentication and authorization\ninformation.\n",
            "items": {
              "$ref": "#/components/schemas/Tool"
            },
            "type": "array"
          },
          "description": {
            "description": "Description\n\nThe description of the service.\n",
            "type": "string"
          },
          "lastUpdated": {
            "description": "The last updated date\n\nThe last updated date of the service.\n",
            "format": "date-time",
            "type": [
              "string",
              "null"
            ]
          },
          "tools": {
            "description": "A list of tools\n\nA list of tools that are discoverable by the service.\n",
            "items": {
              "$ref": "#/components/schemas/Tool"
            },
            "type": "array"
          }
        },
        "required": [
          "description",
          "contexts",
          "tools"
        ],
        "type": "object"
      },
      "ListSubscriptionAccountParams": {
        "properties": {
          "accountType": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/APIAccountType"
              }
            ]
          },
          "actor": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/SystemActor"
              }
            ]
          },
          "isOwnerActive": {
            "type": [
              "boolean",
              "null"
            ]
          },
          "status": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/VerboseStatus"
              }
            ]
          },
          "tagValue": {
            "type": [
              "string",
              "null"
            ]
          },
          "term": {
            "type": [
              "string",
              "null"
            ]
          }
        },
        "type": "object"
      },
      "ListTenantParams": {
        "properties": {
          "metadata": {
            "description": "Filter tenants by metadata key",
            "type": [
              "string",
              "null"
            ]
          },
          "name": {
            "description": "Filter tenants by name",
            "type": [
              "string",
              "null"
            ]
          },
          "owner": {
            "description": "Filter tenants by owner",
            "format": "uuid",
            "type": [
              "string",
              "null"
            ]
          },
          "tag": {
            "description": "Filter tenants by tag\n\nExample: `key=value`",
            "type": [
              "string",
              "null"
            ]
          }
        },
        "type": "object"
      },
      "ListWebHooksParams": {
        "properties": {
          "name": {
            "type": [
              "string",
              "null"
            ]
          },
          "trigger": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/WebHookTrigger"
              }
            ]
          }
        },
        "type": "object"
      },
      "MultiFactorAuthentication": {
        "properties": {
          "totp": {
            "$ref": "#/components/schemas/Totp",
            "description": "The TOTP\n\nThe TOTP is disabled by default.\n"
          }
        },
        "required": [
          "totp"
        ],
        "type": "object"
      },
      "MyceliumLoginResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/User"
          },
          {
            "properties": {
              "duration": {
                "type": "string"
              },
              "token": {
                "type": "string"
              },
              "totpRequired": {
                "type": "boolean"
              }
            },
            "required": [
              "token",
              "duration",
              "totpRequired"
            ],
            "type": "object"
          }
        ]
      },
      "Owner": {
        "properties": {
          "email": {
            "description": "The owner email\n\nThe email of the user that administrate the profile. Email denotes the\ncentral part of the profile management. Email should be used to collect\nlicensed IDs and perform guest operations. Thus, it should be unique in\nthe Mycelium platform.",
            "type": "string"
          },
          "firstName": {
            "description": "The owner first name",
            "type": [
              "string",
              "null"
            ]
          },
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "isPrincipal": {
            "description": "If the owner is the principal account owner",
            "type": "boolean"
          },
          "lastName": {
            "description": "The owner last name",
            "type": [
              "string",
              "null"
            ]
          },
          "username": {
            "description": "The owner username",
            "type": [
              "string",
              "null"
            ]
          }
        },
        "required": [
          "id",
          "email",
          "isPrincipal"
        ],
        "type": "object"
      },
      "PaginatedRecord_GuestUser": {
        "description": "A default pagination response\n\nA paginated record include the total number of records found into a query\nplus page size which records will be retrieved, the number of records to be\nignored (such value should be discovered after the first query), and the\nrecords itself.",
        "properties": {
          "count": {
            "format": "int64",
            "type": "integer"
          },
          "records": {
            "items": {
              "properties": {
                "accounts": {
                  "oneOf": [
                    {
                      "type": "null"
                    },
                    {
                      "$ref": "#/components/schemas/Children_Account_String",
                      "description": "The account which the guest user is connected to"
                    }
                  ]
                },
                "created": {
                  "description": "The guesting date",
                  "format": "date-time",
                  "type": "string"
                },
                "email": {
                  "$ref": "#/components/schemas/Email",
                  "description": "The guest user email\n\nThe email is used to identify the guest user connection with the target\naccount.\n"
                },
                "guestRole": {
                  "$ref": "#/components/schemas/Parent_GuestRole_String",
                  "description": "The guest user role"
                },
                "id": {
                  "description": "The guest user id",
                  "format": "uuid",
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "updated": {
                  "description": "The last updated date",
                  "format": "date-time",
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "wasVerified": {
                  "description": "The guest user is verified\n\nWHile the user is not verified, the user will not be able to access\nthe account.\n",
                  "type": "boolean"
                }
              },
              "required": [
                "email",
                "guestRole",
                "created",
                "wasVerified"
              ],
              "type": "object"
            },
            "type": "array"
          },
          "size": {
            "format": "int64",
            "type": [
              "integer",
              "null"
            ]
          },
          "skip": {
            "format": "int64",
            "type": [
              "integer",
              "null"
            ]
          }
        },
        "required": [
          "count",
          "records"
        ],
        "type": "object"
      },
      "Parent_Account_String": {
        "description": "A parent record\n\nThis enumerator allow represents the parent elements using their primary\nkey (Id option) or the true record (Record option).",
        "oneOf": [
          {
            "properties": {
              "record": {
                "properties": {
                  "accountType": {
                    "$ref": "#/components/schemas/AccountType",
                    "description": "The Account Type\n\nAccount type is the type of the account. The account type is used to\ncategorize the account."
                  },
                  "createdAt": {
                    "description": "The Account Created Date",
                    "format": "date-time",
                    "type": "string"
                  },
                  "createdBy": {
                    "oneOf": [
                      {
                        "type": "null"
                      },
                      {
                        "$ref": "#/components/schemas/WrittenBy",
                        "description": "The Account Created By\n\nThe ID of the account that created the account. This is used for\nauditing purposes.\n"
                      }
                    ]
                  },
                  "guestUsers": {
                    "oneOf": [
                      {
                        "type": "null"
                      },
                      {
                        "$ref": "#/components/schemas/Children_GuestUser_String",
                        "description": "The Account Guest Users\n\nThis is the list of guest users of the account."
                      }
                    ]
                  },
                  "id": {
                    "description": "The Account ID",
                    "format": "uuid",
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "isActive": {
                    "description": "Account is active\n\nIf the account is active. This is used for logic trash and restore\naccount.\n",
                    "type": "boolean"
                  },
                  "isArchived": {
                    "description": "Account is archived\n\nIf the account is archived. This is used for account archiving.\n",
                    "type": "boolean"
                  },
                  "isChecked": {
                    "description": "Account is checked\n\nIf the account was verified by a human. This is used for account\nverification.\n",
                    "type": "boolean"
                  },
                  "isDefault": {
                    "type": "boolean"
                  },
                  "isDeleted": {
                    "description": "Account is deleted\n\nIf the account is deleted. This is used for logic trash and restore\naccount.\n",
                    "type": "boolean"
                  },
                  "meta": {
                    "additionalProperties": {
                      "type": "string"
                    },
                    "description": "The Account Meta\n\nStore metadata about the account.\n",
                    "propertyNames": {
                      "oneOf": [
                        {
                          "description": "Phone Number",
                          "enum": [
                            "phone_number"
                          ],
                          "type": "string"
                        },
                        {
                          "description": "The Telegram User",
                          "enum": [
                            "telegram_user"
                          ],
                          "type": "string"
                        },
                        {
                          "description": "The WhatsApp User",
                          "enum": [
                            "whats_app_user"
                          ],
                          "type": "string"
                        },
                        {
                          "description": "To specify any other meta key\n\nSpecify any other meta key that is not listed here.",
                          "properties": {
                            "custom": {
                              "description": "To specify any other meta key\n\nSpecify any other meta key that is not listed here.",
                              "type": "string"
                            }
                          },
                          "required": [
                            "custom"
                          ],
                          "type": "object"
                        }
                      ]
                    },
                    "type": [
                      "object",
                      "null"
                    ]
                  },
                  "name": {
                    "description": "The Account Name",
                    "type": "string"
                  },
                  "owners": {
                    "$ref": "#/components/schemas/Children_User_String",
                    "description": "The Account Owners\n\nThis is the list of account owners. The account owners are the users who\nhave the account owner role."
                  },
                  "slug": {
                    "description": "The Account Slug\n\nThis is generated from the account name. This is used for programmatic\naccess and verification of the account.\n",
                    "type": "string"
                  },
                  "tags": {
                    "description": "Account Tags\n\nInformation about the account. This is used for categorizing and filter\naccount.\n",
                    "items": {
                      "$ref": "#/components/schemas/Tag"
                    },
                    "type": [
                      "array",
                      "null"
                    ]
                  },
                  "updatedAt": {
                    "description": "The Account Updated Date",
                    "format": "date-time",
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "updatedBy": {
                    "oneOf": [
                      {
                        "type": "null"
                      },
                      {
                        "$ref": "#/components/schemas/WrittenBy",
                        "description": "The Account Updated By\n\nThe ID of the account that updated the account. This is used for\nauditing purposes.\n"
                      }
                    ]
                  },
                  "verboseStatus": {
                    "oneOf": [
                      {
                        "type": "null"
                      },
                      {
                        "$ref": "#/components/schemas/VerboseStatus",
                        "description": "Verbose status\n\nIs the human readable status of the account.\n"
                      }
                    ]
                  }
                },
                "required": [
                  "name",
                  "slug",
                  "isActive",
                  "isChecked",
                  "isArchived",
                  "isDeleted",
                  "isDefault",
                  "owners",
                  "accountType",
                  "createdAt"
                ],
                "type": "object"
              }
            },
            "required": [
              "record"
            ],
            "type": "object"
          },
          {
            "properties": {
              "id": {
                "type": "string"
              }
            },
            "required": [
              "id"
            ],
            "type": "object"
          }
        ]
      },
      "Parent_GuestRole_String": {
        "description": "A parent record\n\nThis enumerator allow represents the parent elements using their primary\nkey (Id option) or the true record (Record option).",
        "oneOf": [
          {
            "properties": {
              "record": {
                "properties": {
                  "children": {
                    "oneOf": [
                      {
                        "type": "null"
                      },
                      {
                        "$ref": "#/components/schemas/Children_GuestRole_String",
                        "description": "Children roles represents guest roles that are children of the current\nrole, and should be used to determine the allowed roles for the role\nowner guest other users."
                      }
                    ]
                  },
                  "created": {
                    "description": "The date and time the role was created",
                    "format": "date-time",
                    "type": "string"
                  },
                  "description": {
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "id": {
                    "format": "uuid",
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "name": {
                    "type": "string"
                  },
                  "permission": {
                    "$ref": "#/components/schemas/Permission"
                  },
                  "slug": {
                    "type": "string"
                  },
                  "system": {
                    "description": "If it is a system role\n\nSystem roles represents standard core actors of the Mycelium API\nGateway, defined in `SystemActor`\n",
                    "type": "boolean"
                  },
                  "updated": {
                    "description": "The date and time the role was last updated",
                    "format": "date-time",
                    "type": [
                      "string",
                      "null"
                    ]
                  }
                },
                "required": [
                  "name",
                  "slug",
                  "permission",
                  "created",
                  "system"
                ],
                "type": "object"
              }
            },
            "required": [
              "record"
            ],
            "type": "object"
          },
          {
            "properties": {
              "id": {
                "type": "string"
              }
            },
            "required": [
              "id"
            ],
            "type": "object"
          }
        ]
      },
      "Parent_Service_String": {
        "description": "A parent record\n\nThis enumerator allow represents the parent elements using their primary\nkey (Id option) or the true record (Record option).",
        "oneOf": [
          {
            "properties": {
              "record": {
                "description": "The Upstream Service\n\nThe service is the upstream service that the route will proxy to.\n",
                "properties": {
                  "allowedSources": {
                    "description": "The allowed sources\n\nA list of sources with permissions to access the downstream service.\nValues can be a domain name, ip address, a cidr block or a wildcard\ndomain name.\n",
                    "items": {
                      "type": "string"
                    },
                    "type": [
                      "array",
                      "null"
                    ]
                  },
                  "capabilities": {
                    "description": "The service capabilities\n\nOptional together with discoverable field. The capabilities of the\nservice.\n",
                    "items": {
                      "type": "string"
                    },
                    "type": [
                      "array",
                      "null"
                    ]
                  },
                  "description": {
                    "description": "The service description\n\nOptional together with discoverable field. The description of the\nservice. The description should be used during the service discovery by\nLLM agents.\n",
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "discoverable": {
                    "description": "The service discoverable\n\nWhen true, the service will be discovered by LLM agents.\n",
                    "type": [
                      "boolean",
                      "null"
                    ]
                  },
                  "healthCheckPath": {
                    "description": "The service health check configuration\n\nThe health check configuration for the service.\n",
                    "type": "string"
                  },
                  "healthStatus": {
                    "$ref": "#/components/schemas/HealthStatus",
                    "description": "The health status of the service\n"
                  },
                  "host": {
                    "$ref": "#/components/schemas/ServiceHost",
                    "description": "The service host\n\nThe host of the service. The host should include the port number. It\ncan be a single host or a vector of hosts.\n"
                  },
                  "id": {
                    "description": "The service id\n\nThe id of the service. If the id is not provided, the service will be\ngenerated using the name of the service.\n",
                    "format": "uuid",
                    "type": "string"
                  },
                  "isContextApi": {
                    "description": "If is a context api\n\nIf is a context api, the service will be discovered by LLM agents.\n",
                    "type": [
                      "boolean",
                      "null"
                    ]
                  },
                  "name": {
                    "description": "The service unique name\n\nThe name of the service. The name should be unique and is used to\nidentify the service and call it from the gateway url path.\n",
                    "type": "string"
                  },
                  "openapiPath": {
                    "description": "The service openapi path\n\nOptional together with discoverable field. The path to the openapi.json\nfile. The file should be used for external clients to discover the\nservice. Is is used for the service discovery by LLM agents.\n",
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "protocol": {
                    "$ref": "#/components/schemas/Protocol",
                    "description": "The service protocol\n\nThe protocol of the service.\n"
                  },
                  "proxyAddress": {
                    "description": "The proxy address\n\nThe proxy address of the service. This is used to forward requests to\nthe service through a proxy. If the service is not behind a proxy, this\nfield should be empty.\n\nExample:\n\n```yaml\nproxyAddress: http://proxy.example.com:8080\n```\n\nThen, the downstream url should be:\n\n```\nhttp://proxy.example.com:8080/http://service.example.com:8080/api/v1/service/1234567890\n```\n",
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "routes": {
                    "description": "The service routes\n\nThe routes of the service.\n",
                    "items": {
                      "$ref": "#/components/schemas/Route"
                    },
                    "type": "array"
                  },
                  "secrets": {
                    "description": "The service secrets\n\nThe secrets of the service. Secrets are used to authenticate the api\ngateway at the downstream service. Individual routes can request a\nspecific secret of this secrets vector.\n",
                    "items": {
                      "$ref": "#/components/schemas/ServiceSecret"
                    },
                    "type": [
                      "array",
                      "null"
                    ]
                  },
                  "serviceType": {
                    "oneOf": [
                      {
                        "type": "null"
                      },
                      {
                        "$ref": "#/components/schemas/ServiceType",
                        "description": "The service type\n\nOptional together with discoverable field. The type of the service.\n"
                      }
                    ]
                  }
                },
                "required": [
                  "id",
                  "name",
                  "host",
                  "routes",
                  "healthStatus",
                  "healthCheckPath"
                ],
                "type": "object"
              }
            },
            "required": [
              "record"
            ],
            "type": "object"
          },
          {
            "properties": {
              "id": {
                "type": "string"
              }
            },
            "required": [
              "id"
            ],
            "type": "object"
          }
        ]
      },
      "PasswordHash": {
        "type": "object"
      },
      "Permission": {
        "enum": [
          "read",
          "write"
        ],
        "type": "string"
      },
      "Profile": {
        "description": "This object should be used over the application layer operations.",
        "properties": {
          "accId": {
            "description": "The account unique id\n\nSuch ID is related to the account primary-key instead of the owner\nprimary key. In the case of the subscription accounts (accounts flagged\nwith `is_subscription`) such ID should be propagated along the\napplication flow.",
            "format": "uuid",
            "type": "string"
          },
          "accountIsActive": {
            "description": "If the account itself is inactive\n\nWhen inactive accounts should not perform internal operations.",
            "type": "boolean"
          },
          "accountWasApproved": {
            "description": "If the account was approved after registration\n\nNew accounts should be approved by manager or staff users after their\nregistration into the Mycelium platform. Case the approval was\nperformed, this flag should be true.",
            "type": "boolean"
          },
          "accountWasArchived": {
            "description": "If the account was archived after registration\n\nNew accounts should be archived. After archived accounts should not be\nincluded at default filtering actions.",
            "type": "boolean"
          },
          "accountWasDeleted": {
            "description": "If the account was deleted after registration\n\nNew accounts should be deleted. After deleted accounts should not be\nincluded at default filtering actions.",
            "type": "boolean"
          },
          "filteringState": {
            "description": "This argument stores the licensed resources state\n\nThe licensed_resources_state should store the current filtering state.\nThe filtering state should be populated when a filtering cascade is\nperformed. As example:\n\nIf a profile with two licensed resources is filtered by the tenant_id\nthe state should store the tenant id used to filter licensed resources.\n\nState formatting:\n\n```json\n[\n   \"1:tenantId:123e4567-e89b-12d3-a456-426614174000\",\n]\n```\n\nAnd then, if the used apply a secondary filter, by permission, the state\nshould be updated to:\n\n```json\n[\n  \"1:tenantId:123e4567-e89b-12d3-a456-426614174000\",\n  \"2:permission:1\",\n]\n```\n\nIf a consecutive filter with more one tenant is applied, the state\nshould be updated to:\n\n```json\n[\n \"1:tenantId:123e4567-e89b-12d3-a456-426614174000\",\n \"2:permission:1\",\n \"3:tenantId:123e4567-e89b-12d3-a456-426614174001\",\n]\n```\n",
            "items": {
              "type": "string"
            },
            "type": [
              "array",
              "null"
            ]
          },
          "isManager": {
            "description": "If profile belongs to a `manager` account\n\nManager accounts should be used by users with elevated privileges inside\nthe Mycelium platform. Such user should perform actions like create\nroles, guest-roles, guest default-user accounts to work into\nsubscription accounts.",
            "type": "boolean"
          },
          "isStaff": {
            "description": "If profile belongs to a `staff` account\n\nStaff user has elevated roles into the application. Like managers, staff\nusers has elevated privileges. Only staff user has permission to\ndelegate other staffs.",
            "type": "boolean"
          },
          "isSubscription": {
            "description": "If profile belongs to a `subscription` account\n\nSubscription accounts should be used to manage legal entities. Only\nsubscription accounts should receive guest accounts.",
            "type": "boolean"
          },
          "licensedResources": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/LicensedResources",
                "description": "Accounts guested to the current profile\n\nGuest accounts delivers information about the guest account role and\ntheir respective permissions inside the host account. A single account\nshould be several licenses into the same account."
              }
            ]
          },
          "ownerIsActive": {
            "description": "If the account owner is active\n\nProfiles exists to abstract account privileges. If the profile is\nrelated to an inactive owner the profile could not perform any action.\nOnly staff or manager user should perform the activation of such users.",
            "type": "boolean"
          },
          "owners": {
            "items": {
              "$ref": "#/components/schemas/Owner"
            },
            "type": "array"
          },
          "tenantsOwnership": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/TenantsOwnership",
                "description": "Tenants which the profile has ownership\n\nThis field should be used to store the tenants that the profile has\nownership. The ownership should be used to filter the licensed resources\nduring system validations.\n"
              }
            ]
          },
          "verboseStatus": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/VerboseStatus",
                "description": "Indicate the profile status for humans\n\nThe profile status is composed of all account flags statuses\ncomposition. But it is not readable for humans. These struct attribute\nallows human users to understand the account status without read the\nflags, avoiding misinterpretation of this."
              }
            ]
          }
        },
        "required": [
          "owners",
          "accId",
          "isSubscription",
          "isManager",
          "isStaff",
          "ownerIsActive",
          "accountIsActive",
          "accountWasApproved",
          "accountWasArchived",
          "accountWasDeleted"
        ],
        "type": "object"
      },
      "Protocol": {
        "enum": [
          "http",
          "https",
          "grpc"
        ],
        "type": "string"
      },
      "Provider": {
        "oneOf": [
          {
            "properties": {
              "external": {
                "type": "string"
              }
            },
            "required": [
              "external"
            ],
            "type": "object"
          },
          {
            "properties": {
              "internal": {
                "$ref": "#/components/schemas/PasswordHash"
              }
            },
            "required": [
              "internal"
            ],
            "type": "object"
          }
        ]
      },
      "ResetPasswordBody": {
        "properties": {
          "email": {
            "type": "string"
          },
          "newPassword": {
            "type": "string"
          },
          "token": {
            "type": "string"
          }
        },
        "required": [
          "token",
          "email",
          "newPassword"
        ],
        "type": "object"
      },
      "RevokeUserGuestToSubscriptionManagerAccountParams": {
        "properties": {
          "email": {
            "type": "string"
          }
        },
        "required": [
          "email"
        ],
        "type": "object"
      },
      "Route": {
        "properties": {
          "acceptInsecureRouting": {
            "description": "The route without tls\n\nThis field should be evaluated if the route should request a secret to\nbe send to the downstream service, if the route is not secure.\n",
            "type": [
              "boolean",
              "null"
            ]
          },
          "id": {
            "description": "The route id",
            "format": "uuid",
            "type": [
              "string",
              "null"
            ]
          },
          "methods": {
            "description": "The route description",
            "items": {
              "$ref": "#/components/schemas/HttpMethod"
            },
            "type": "array"
          },
          "path": {
            "description": "The route url",
            "type": "string"
          },
          "secretName": {
            "description": "The route secret name if it exists",
            "type": [
              "string",
              "null"
            ]
          },
          "securityGroup": {
            "$ref": "#/components/schemas/SecurityGroup",
            "description": "The route name"
          },
          "service": {
            "$ref": "#/components/schemas/Parent_Service_String",
            "description": "The route service"
          }
        },
        "required": [
          "service",
          "securityGroup",
          "methods",
          "path"
        ],
        "type": "object"
      },
      "SecretResolver_HttpSecret": {
        "description": "A secret resolver\n\nThe secret resolver is a way to resolve a secret value from different\nsources.\n",
        "oneOf": [
          {
            "description": "Retrieve the value from the environment variable\n\nThe value should be the name of the environment variable.\n\n# Example\n\n```bash\nexport MY_ENV_VAR=\"my_value\"\n```\n\n```yaml\ndatabaseUrl:\n    env: \"MY_ENV_VAR\"\n```\n\nThe value of `databaseUrl` will be `my_value`\n",
            "properties": {
              "env": {
                "description": "Retrieve the value from the environment variable\n\nThe value should be the name of the environment variable.\n\n# Example\n\n```bash\nexport MY_ENV_VAR=\"my_value\"\n```\n\n```yaml\ndatabaseUrl:\n    env: \"MY_ENV_VAR\"\n```\n\nThe value of `databaseUrl` will be `my_value`\n",
                "type": "string"
              }
            },
            "required": [
              "env"
            ],
            "type": "object"
          },
          {
            "description": "Retrieve the value from the vault\n\nThe value should be the name of the vault secret.\n\n# Example\n\n```yaml\ndatabaseUrl:\n    vault:\n        path: \"my_vault_secret\"\n        key: \"my_key\"\n```\n\nThe value of `databaseUrl` will be the value of the secret located at\n`path/my_vault_secret` in the vault.\n",
            "properties": {
              "vault": {
                "description": "Retrieve the value from the vault\n\nThe value should be the name of the vault secret.\n\n# Example\n\n```yaml\ndatabaseUrl:\n    vault:\n        path: \"my_vault_secret\"\n        key: \"my_key\"\n```\n\nThe value of `databaseUrl` will be the value of the secret located at\n`path/my_vault_secret` in the vault.\n",
                "properties": {
                  "key": {
                    "type": "string"
                  },
                  "path": {
                    "type": "string"
                  }
                },
                "required": [
                  "path",
                  "key"
                ],
                "type": "object"
              }
            },
            "required": [
              "vault"
            ],
            "type": "object"
          },
          {
            "description": "Retrieve the value directly from a configuration file\n\nThe value should be the value itself.\n\n# Example\n\n```yaml\ndatabaseUrl: \"my_value\"\n```\n",
            "properties": {
              "value": {
                "oneOf": [
                  {
                    "description": "Authentication header\n\nThe secret is passed as an authentication header.\n",
                    "properties": {
                      "authorizationHeader": {
                        "description": "Authentication header\n\nThe secret is passed as an authentication header.\n",
                        "properties": {
                          "headerName": {
                            "description": "The header name\n\nThe name of the header. For example, if the name is `Authorization`,\nthe header will be `Authorization Bear: <token value>`. The default\nvalue is `Authorization`.\n",
                            "type": [
                              "string",
                              "null"
                            ]
                          },
                          "prefix": {
                            "description": "The header prefix\n\nIf present the prefix is added to the header. For example, if the\nprefix is `Bearer`, the header will be `Authorization Bearer: <token\nvalue>`.\n",
                            "type": [
                              "string",
                              "null"
                            ]
                          },
                          "token": {
                            "description": "The header token\n\nThe token is the value of the header. For example, if the token is\n`1234`, the header will be `Authorization Bearer: 123\n",
                            "type": "string"
                          }
                        },
                        "required": [
                          "token"
                        ],
                        "type": "object"
                      }
                    },
                    "required": [
                      "authorizationHeader"
                    ],
                    "type": "object"
                  },
                  {
                    "properties": {
                      "queryParameter": {
                        "properties": {
                          "name": {
                            "description": "The query parameter name\n\nThe name of the query parameter. For example, if the name is `token`,\nthe query parameter will be `?token=<token value>`.\n",
                            "type": "string"
                          },
                          "token": {
                            "description": "The query parameter value\n\nThe value of the query parameter. For example, if the value is `1234`,\nthe query parameter will be `?token=1234`.\n",
                            "type": "string"
                          }
                        },
                        "required": [
                          "name",
                          "token"
                        ],
                        "type": "object"
                      }
                    },
                    "required": [
                      "queryParameter"
                    ],
                    "type": "object"
                  }
                ]
              }
            },
            "required": [
              "value"
            ],
            "type": "object"
          }
        ]
      },
      "SecurityGroup": {
        "oneOf": [
          {
            "description": "\nAllow public access to the route\n",
            "enum": [
              "public"
            ],
            "type": "string"
          },
          {
            "description": "\nUsers should be only authenticated with a valid API token\n",
            "enum": [
              "authenticated"
            ],
            "type": "string"
          },
          {
            "description": "\nProtect the route with the full user profile\n",
            "enum": [
              "protected"
            ],
            "type": "string"
          },
          {
            "description": "\nProtect the route with the user profile filtered by roles\n",
            "properties": {
              "protectedByRoles": {
                "description": "\nProtect the route with the user profile filtered by roles\n",
                "properties": {
                  "roles": {
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  }
                },
                "required": [
                  "roles"
                ],
                "type": "object"
              }
            },
            "required": [
              "protectedByRoles"
            ],
            "type": "object"
          },
          {
            "description": "\nProtect the route with the user profile filtered by roles and\npermissions\n",
            "properties": {
              "protectedByPermissionedRoles": {
                "description": "\nProtect the route with the user profile filtered by roles and\npermissions\n",
                "properties": {
                  "permissionedRoles": {
                    "items": {
                      "items": false,
                      "prefixItems": [
                        {
                          "type": "string"
                        },
                        {
                          "enum": [
                            "read",
                            "write"
                          ],
                          "type": "string"
                        }
                      ],
                      "type": "array"
                    },
                    "type": "array"
                  }
                },
                "required": [
                  "permissionedRoles"
                ],
                "type": "object"
              }
            },
            "required": [
              "protectedByPermissionedRoles"
            ],
            "type": "object"
          },
          {
            "description": "\nProtect the route with service token associated to a specific role list\n",
            "properties": {
              "protectedByServiceTokenWithRole": {
                "description": "\nProtect the route with service token associated to a specific role list\n",
                "properties": {
                  "roles": {
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  }
                },
                "required": [
                  "roles"
                ],
                "type": "object"
              }
            },
            "required": [
              "protectedByServiceTokenWithRole"
            ],
            "type": "object"
          },
          {
            "description": "\nProtect the route with service token associated to a specific role and\npermissions\n",
            "properties": {
              "protectedByServiceTokenWithPermissionedRoles": {
                "description": "\nProtect the route with service token associated to a specific role and\npermissions\n",
                "properties": {
                  "permissionedRoles": {
                    "items": {
                      "items": false,
                      "prefixItems": [
                        {
                          "type": "string"
                        },
                        {
                          "enum": [
                            "read",
                            "write"
                          ],
                          "type": "string"
                        }
                      ],
                      "type": "array"
                    },
                    "type": "array"
                  }
                },
                "required": [
                  "permissionedRoles"
                ],
                "type": "object"
              }
            },
            "required": [
              "protectedByServiceTokenWithPermissionedRoles"
            ],
            "type": "object"
          }
        ]
      },
      "Service": {
        "description": "The Upstream Service\n\nThe service is the upstream service that the route will proxy to.\n",
        "properties": {
          "allowedSources": {
            "description": "The allowed sources\n\nA list of sources with permissions to access the downstream service.\nValues can be a domain name, ip address, a cidr block or a wildcard\ndomain name.\n",
            "items": {
              "type": "string"
            },
            "type": [
              "array",
              "null"
            ]
          },
          "capabilities": {
            "description": "The service capabilities\n\nOptional together with discoverable field. The capabilities of the\nservice.\n",
            "items": {
              "type": "string"
            },
            "type": [
              "array",
              "null"
            ]
          },
          "description": {
            "description": "The service description\n\nOptional together with discoverable field. The description of the\nservice. The description should be used during the service discovery by\nLLM agents.\n",
            "type": [
              "string",
              "null"
            ]
          },
          "discoverable": {
            "description": "The service discoverable\n\nWhen true, the service will be discovered by LLM agents.\n",
            "type": [
              "boolean",
              "null"
            ]
          },
          "healthCheckPath": {
            "description": "The service health check configuration\n\nThe health check configuration for the service.\n",
            "type": "string"
          },
          "healthStatus": {
            "$ref": "#/components/schemas/HealthStatus",
            "description": "The health status of the service\n"
          },
          "host": {
            "$ref": "#/components/schemas/ServiceHost",
            "description": "The service host\n\nThe host of the service. The host should include the port number. It\ncan be a single host or a vector of hosts.\n"
          },
          "id": {
            "description": "The service id\n\nThe id of the service. If the id is not provided, the service will be\ngenerated using the name of the service.\n",
            "format": "uuid",
            "type": "string"
          },
          "isContextApi": {
            "description": "If is a context api\n\nIf is a context api, the service will be discovered by LLM agents.\n",
            "type": [
              "boolean",
              "null"
            ]
          },
          "name": {
            "description": "The service unique name\n\nThe name of the service. The name should be unique and is used to\nidentify the service and call it from the gateway url path.\n",
            "type": "string"
          },
          "openapiPath": {
            "description": "The service openapi path\n\nOptional together with discoverable field. The path to the openapi.json\nfile. The file should be used for external clients to discover the\nservice. Is is used for the service discovery by LLM agents.\n",
            "type": [
              "string",
              "null"
            ]
          },
          "protocol": {
            "$ref": "#/components/schemas/Protocol",
            "description": "The service protocol\n\nThe protocol of the service.\n"
          },
          "proxyAddress": {
            "description": "The proxy address\n\nThe proxy address of the service. This is used to forward requests to\nthe service through a proxy. If the service is not behind a proxy, this\nfield should be empty.\n\nExample:\n\n```yaml\nproxyAddress: http://proxy.example.com:8080\n```\n\nThen, the downstream url should be:\n\n```\nhttp://proxy.example.com:8080/http://service.example.com:8080/api/v1/service/1234567890\n```\n",
            "type": [
              "string",
              "null"
            ]
          },
          "routes": {
            "description": "The service routes\n\nThe routes of the service.\n",
            "items": {
              "$ref": "#/components/schemas/Route"
            },
            "type": "array"
          },
          "secrets": {
            "description": "The service secrets\n\nThe secrets of the service. Secrets are used to authenticate the api\ngateway at the downstream service. Individual routes can request a\nspecific secret of this secrets vector.\n",
            "items": {
              "$ref": "#/components/schemas/ServiceSecret"
            },
            "type": [
              "array",
              "null"
            ]
          },
          "serviceType": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/ServiceType",
                "description": "The service type\n\nOptional together with discoverable field. The type of the service.\n"
              }
            ]
          }
        },
        "required": [
          "id",
          "name",
          "host",
          "routes",
          "healthStatus",
          "healthCheckPath"
        ],
        "type": "object"
      },
      "ServiceHost": {
        "oneOf": [
          {
            "description": "The host of the service\n\nThe host should include the port number.\n\nExample:\n\n```yaml\nhost: localhost:8080\n```\n",
            "type": "string"
          },
          {
            "description": "The hosts of the service\n\nThe hosts should include the port number.\n\nExample:\n\n```yaml\nhosts:\n  - localhost:8080\n  - localhost:8081\n```\n",
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        ]
      },
      "ServiceSecret": {
        "allOf": [
          {
            "$ref": "#/components/schemas/SecretResolver_HttpSecret"
          },
          {
            "properties": {
              "name": {
                "type": "string"
              }
            },
            "required": [
              "name"
            ],
            "type": "object"
          }
        ]
      },
      "ServiceType": {
        "enum": [
          "rest-api",
          "unknown"
        ],
        "type": "string"
      },
      "StartPasswordResetBody": {
        "properties": {
          "email": {
            "type": "string"
          }
        },
        "required": [
          "email"
        ],
        "type": "object"
      },
      "SystemActor": {
        "description": "The System Actors\n\nStandard actors used to validate operations during the authorization process\nin system use-cases.\n",
        "oneOf": [
          {
            "properties": {
              "customRole": {
                "type": "string"
              }
            },
            "required": [
              "customRole"
            ],
            "type": "object"
          },
          {
            "description": "Beginner\n\nThis actor is used when no role is assigned to the user.",
            "enum": [
              "beginner"
            ],
            "type": "string"
          },
          {
            "description": "Subscriptions manager\n\nThis actor is responsible for managing subscriptions accounts.",
            "enum": [
              "subscriptionsManager"
            ],
            "type": "string"
          },
          {
            "description": "Users account manager\n\nThis actor is responsible for managing users accounts.",
            "enum": [
              "usersManager"
            ],
            "type": "string"
          },
          {
            "description": "Account manager\n\nThis actor is responsible for managing a single subscription account.",
            "enum": [
              "accountManager"
            ],
            "type": "string"
          },
          {
            "description": "Guest manager\n\nThis actor is responsible for managing roles, guest-roles, and\nguest-users.",
            "enum": [
              "guestsManager"
            ],
            "type": "string"
          },
          {
            "description": "Gateway manager\n\nThis actor is responsible for managing gateway endpoints and related\nconfigurations.",
            "enum": [
              "gatewayManager"
            ],
            "type": "string"
          },
          {
            "description": "System manager\n\nThis actor is responsible for managing system, including error messages,\nwebhooks, and others.",
            "enum": [
              "systemManager"
            ],
            "type": "string"
          },
          {
            "description": "Tenant owner\n\nThis actor is responsible for managing tenant metadata, tags, and owner.\n\nWARNING: This is not a role in the system. Don't use to filter licensed\nresource scopes during the profile checking.\n\n‚ùå Wrong example:\n\n```rust\nlet related_accounts = profile\n    .on_tenant(tenant_id)\n    .with_system_accounts_access()\n    .with_write_access()\n    .with_roles(vec![\n        SystemActor::TenantOwner,\n        SystemActor::TenantManager,\n        SystemActor::SubscriptionsManager,\n    ])\n    .get_related_accounts_or_error()?;\n```\n\nThis way should check if the profile has access to the tenant as a guest\nrole. However, tenant owner should be guest as a ownership not as a\nlicensed resource.\n\n‚úÖ Right example:\n\n```rust\nlet related_accounts = profile\n    .on_tenant(tenant_id)\n    .with_system_accounts_access()\n    .with_write_access()\n    .with_roles(vec![\n        SystemActor::TenantManager,\n        SystemActor::SubscriptionsManager,\n    ])\n    .get_related_accounts_or_tenant_or_error(tenant_id)?;\n```\n\nThis way should check if the profile has ownership over the tenant.\n",
            "enum": [
              "tenantOwner"
            ],
            "type": "string"
          },
          {
            "description": "Tenant manager\n\nThis actor is responsible for managing tenants.",
            "enum": [
              "tenantManager"
            ],
            "type": "string"
          },
          {
            "description": "Service\n\nThis is a service entity.",
            "enum": [
              "service"
            ],
            "type": "string"
          }
        ]
      },
      "Tag": {
        "properties": {
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "meta": {
            "additionalProperties": {
              "type": "string"
            },
            "propertyNames": {
              "type": "string"
            },
            "type": [
              "object",
              "null"
            ]
          },
          "value": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "value"
        ],
        "type": "object"
      },
      "Tenant": {
        "properties": {
          "created": {
            "description": "The date and time the tenant was created",
            "format": "date-time",
            "type": "string"
          },
          "description": {
            "description": "The description of the tenant",
            "type": [
              "string",
              "null"
            ]
          },
          "id": {
            "description": "The unique identifier of the tenant",
            "format": "uuid",
            "type": [
              "string",
              "null"
            ]
          },
          "manager": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/Parent_Account_String",
                "description": "The tenant manager\n\nThe account of the tenant manager."
              }
            ]
          },
          "meta": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "Meta information\n\nThis is the meta information of the tenant. The meta information is a\nkey-value pair of string. The key is the name of the meta information,\nand the value is the value of the meta information.",
            "propertyNames": {
              "oneOf": [
                {
                  "description": "Federal Revenue Register\n\nThe Federal Revenue Register is the register of the federal revenue\nof the tenant.",
                  "enum": [
                    "federal_revenue_register"
                  ],
                  "type": "string"
                },
                {
                  "description": "The type for the Federal Revenue Register\n\nIn Brazil, the FRR is CNPJ. In the US, the FRR is EIN.",
                  "enum": [
                    "federal_revenue_register_type"
                  ],
                  "type": "string"
                },
                {
                  "description": "The Country\n\nThe country of the tenant.",
                  "enum": [
                    "country"
                  ],
                  "type": "string"
                },
                {
                  "description": "The State\n\nThe state of the tenant.",
                  "enum": [
                    "state"
                  ],
                  "type": "string"
                },
                {
                  "description": "The Province\n\nThe province of the tenant.",
                  "enum": [
                    "province"
                  ],
                  "type": "string"
                },
                {
                  "description": "The City\n\nThe city of the tenant.",
                  "enum": [
                    "city"
                  ],
                  "type": "string"
                },
                {
                  "description": "The Address 1\n\nThe first address of the tenant.",
                  "enum": [
                    "address1"
                  ],
                  "type": "string"
                },
                {
                  "description": "The Address 2\n\nThe second address of the tenant.",
                  "enum": [
                    "address2"
                  ],
                  "type": "string"
                },
                {
                  "description": "The Zip Code\n\nThe zip code of the tenant.",
                  "enum": [
                    "zip_code"
                  ],
                  "type": "string"
                },
                {
                  "description": "To specify any other meta key\n\nSpecify any other meta key that is not listed here.",
                  "properties": {
                    "custom": {
                      "description": "To specify any other meta key\n\nSpecify any other meta key that is not listed here.",
                      "type": "string"
                    }
                  },
                  "required": [
                    "custom"
                  ],
                  "type": "object"
                }
              ]
            },
            "type": [
              "object",
              "null"
            ]
          },
          "name": {
            "description": "The name of the tenant",
            "type": "string"
          },
          "owners": {
            "$ref": "#/components/schemas/Children_Owner_String",
            "description": "The owner of the tenant\n\nThis is the email of the tenant owner, which is also the pub owner. The\ntenant owner should be set on tenant creation."
          },
          "status": {
            "description": "The status of the tenant\n\nThis is the status of the tenant. The status is a key-value pair of\nstring. The key is the name of the status (defined in `StatusKey`), and\nthe value is the value of the status.",
            "items": {
              "$ref": "#/components/schemas/TenantStatus"
            },
            "type": [
              "array",
              "null"
            ]
          },
          "tags": {
            "description": "The tags of the tenant\n\nThis is the list of tags of the tenant. The tags are used to categorize\nthe tenant. The tags are used to categorize the tenant.",
            "items": {
              "$ref": "#/components/schemas/Tag"
            },
            "type": [
              "array",
              "null"
            ]
          },
          "updated": {
            "description": "The date and time the tenant was last updated",
            "format": "date-time",
            "type": [
              "string",
              "null"
            ]
          }
        },
        "required": [
          "name",
          "owners",
          "created"
        ],
        "type": "object"
      },
      "TenantMetaKey": {
        "oneOf": [
          {
            "description": "Federal Revenue Register\n\nThe Federal Revenue Register is the register of the federal revenue\nof the tenant.",
            "enum": [
              "federal_revenue_register"
            ],
            "type": "string"
          },
          {
            "description": "The type for the Federal Revenue Register\n\nIn Brazil, the FRR is CNPJ. In the US, the FRR is EIN.",
            "enum": [
              "federal_revenue_register_type"
            ],
            "type": "string"
          },
          {
            "description": "The Country\n\nThe country of the tenant.",
            "enum": [
              "country"
            ],
            "type": "string"
          },
          {
            "description": "The State\n\nThe state of the tenant.",
            "enum": [
              "state"
            ],
            "type": "string"
          },
          {
            "description": "The Province\n\nThe province of the tenant.",
            "enum": [
              "province"
            ],
            "type": "string"
          },
          {
            "description": "The City\n\nThe city of the tenant.",
            "enum": [
              "city"
            ],
            "type": "string"
          },
          {
            "description": "The Address 1\n\nThe first address of the tenant.",
            "enum": [
              "address1"
            ],
            "type": "string"
          },
          {
            "description": "The Address 2\n\nThe second address of the tenant.",
            "enum": [
              "address2"
            ],
            "type": "string"
          },
          {
            "description": "The Zip Code\n\nThe zip code of the tenant.",
            "enum": [
              "zip_code"
            ],
            "type": "string"
          },
          {
            "description": "To specify any other meta key\n\nSpecify any other meta key that is not listed here.",
            "properties": {
              "custom": {
                "description": "To specify any other meta key\n\nSpecify any other meta key that is not listed here.",
                "type": "string"
              }
            },
            "required": [
              "custom"
            ],
            "type": "object"
          }
        ]
      },
      "TenantOwnerConnection": {
        "properties": {
          "created": {
            "format": "date-time",
            "type": "string"
          },
          "guestBy": {
            "type": "string"
          },
          "ownerId": {
            "format": "uuid",
            "type": "string"
          },
          "tenantId": {
            "format": "uuid",
            "type": "string"
          },
          "updated": {
            "format": "date-time",
            "type": [
              "string",
              "null"
            ]
          }
        },
        "required": [
          "tenantId",
          "ownerId",
          "guestBy",
          "created"
        ],
        "type": "object"
      },
      "TenantOwnership": {
        "properties": {
          "since": {
            "description": "The date and time the tenant was granted to the profile",
            "format": "date-time",
            "type": "string"
          },
          "tenant": {
            "description": "The tenant ID that the profile has administration privileges",
            "format": "uuid",
            "type": "string"
          }
        },
        "required": [
          "tenant",
          "since"
        ],
        "type": "object"
      },
      "TenantStatus": {
        "oneOf": [
          {
            "properties": {
              "verified": {
                "properties": {
                  "at": {
                    "format": "date-time",
                    "type": "string"
                  },
                  "by": {
                    "type": "string"
                  }
                },
                "required": [
                  "at",
                  "by"
                ],
                "type": "object"
              }
            },
            "required": [
              "verified"
            ],
            "type": "object"
          },
          {
            "properties": {
              "trashed": {
                "properties": {
                  "at": {
                    "format": "date-time",
                    "type": "string"
                  },
                  "by": {
                    "type": "string"
                  }
                },
                "required": [
                  "at",
                  "by"
                ],
                "type": "object"
              }
            },
            "required": [
              "trashed"
            ],
            "type": "object"
          },
          {
            "properties": {
              "archived": {
                "properties": {
                  "at": {
                    "format": "date-time",
                    "type": "string"
                  },
                  "by": {
                    "type": "string"
                  }
                },
                "required": [
                  "at",
                  "by"
                ],
                "type": "object"
              }
            },
            "required": [
              "archived"
            ],
            "type": "object"
          }
        ]
      },
      "TenantsOwnership": {
        "oneOf": [
          {
            "properties": {
              "records": {
                "items": {
                  "$ref": "#/components/schemas/TenantOwnership"
                },
                "type": "array"
              }
            },
            "required": [
              "records"
            ],
            "type": "object"
          },
          {
            "properties": {
              "urls": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            "required": [
              "urls"
            ],
            "type": "object"
          }
        ]
      },
      "Tool": {
        "properties": {
          "capabilities": {
            "description": "The service capabilities\n\nThe capabilities of the service.\n",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "description": {
            "description": "The service description\n\nOptional together with discoverable field. The description of the\nservice. The description should be used during the service discovery by\nLLM agents.\n",
            "type": "string"
          },
          "healthStatus": {
            "$ref": "#/components/schemas/HealthStatus",
            "description": "The service health status\n\nThe health status of the service.\n"
          },
          "isContextApi": {
            "description": "If is a context api\n\nIf is a context api, the service will be discovered by LLM agents.\n",
            "type": "boolean"
          },
          "name": {
            "description": "The service unique name\n\nThe name of the service. The name should be unique and is used to\nidentify the service and call it from the gateway url path.\n",
            "type": "string"
          },
          "openapiPath": {
            "description": "The service openapi path\n\nOptional together with discoverable field. The path to the openapi.json\nfile. The file should be used for external clients to discover the\nservice. Is is used for the service discovery by LLM agents.\n",
            "type": "string"
          },
          "toolType": {
            "$ref": "#/components/schemas/ServiceType",
            "description": "The service type\n\nThe type of the service.\n"
          }
        },
        "required": [
          "name",
          "description",
          "toolType",
          "isContextApi",
          "capabilities",
          "openapiPath",
          "healthStatus"
        ],
        "type": "object"
      },
      "Totp": {
        "oneOf": [
          {
            "enum": [
              "unknown"
            ],
            "type": "string"
          },
          {
            "enum": [
              "disabled"
            ],
            "type": "string"
          },
          {
            "description": "The TOTP when enabled\n\nThe TOTP is enabled when the user has verified the TOTP and the auth\nurl is set. The secret is not serialized to avoid that the secret is\nexposed to the outside.\n",
            "properties": {
              "enabled": {
                "description": "The TOTP when enabled\n\nThe TOTP is enabled when the user has verified the TOTP and the auth\nurl is set. The secret is not serialized to avoid that the secret is\nexposed to the outside.\n",
                "properties": {
                  "issuer": {
                    "type": "string"
                  },
                  "secret": {
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "verified": {
                    "type": "boolean"
                  }
                },
                "required": [
                  "verified",
                  "issuer"
                ],
                "type": "object"
              }
            },
            "required": [
              "enabled"
            ],
            "type": "object"
          }
        ]
      },
      "TotpActivationStartedResponse": {
        "properties": {
          "totpUrl": {
            "type": [
              "string",
              "null"
            ]
          }
        },
        "type": "object"
      },
      "TotpUpdatingValidationBody": {
        "properties": {
          "token": {
            "type": "string"
          }
        },
        "required": [
          "token"
        ],
        "type": "object"
      },
      "UnhealthyInstance": {
        "description": "The unhealthy instance\n\nThe unhealthy instance is a single instance of the service that is\nunhealthy.\n",
        "properties": {
          "checkedAt": {
            "description": "The timestamp for the last health check\n",
            "format": "date-time",
            "type": "string"
          },
          "errorMessage": {
            "description": "The error message\n",
            "type": [
              "string",
              "null"
            ]
          },
          "host": {
            "description": "The instance ID\n",
            "type": "string"
          },
          "responseBody": {
            "description": "The instance response body\n",
            "type": [
              "string",
              "null"
            ]
          },
          "statusCode": {
            "description": "The instance status code\n",
            "format": "int32",
            "minimum": 0,
            "type": "integer"
          }
        },
        "required": [
          "host",
          "statusCode",
          "checkedAt"
        ],
        "type": "object"
      },
      "UpdateAccountTagBody": {
        "properties": {
          "accountId": {
            "format": "uuid",
            "type": "string"
          },
          "meta": {
            "additionalProperties": {
              "type": "string"
            },
            "propertyNames": {
              "type": "string"
            },
            "type": "object"
          },
          "value": {
            "type": "string"
          }
        },
        "required": [
          "accountId",
          "value",
          "meta"
        ],
        "type": "object"
      },
      "UpdateErrorCodeMessageAndDetailsBody": {
        "properties": {
          "details": {
            "type": [
              "string",
              "null"
            ]
          },
          "message": {
            "type": "string"
          }
        },
        "required": [
          "message"
        ],
        "type": "object"
      },
      "UpdateGuestRoleNameAndDescriptionBody": {
        "properties": {
          "description": {
            "type": [
              "string",
              "null"
            ]
          },
          "name": {
            "type": [
              "string",
              "null"
            ]
          }
        },
        "type": "object"
      },
      "UpdateGuestRolePermissionsBody": {
        "properties": {
          "permission": {
            "$ref": "#/components/schemas/Permission"
          }
        },
        "required": [
          "permission"
        ],
        "type": "object"
      },
      "UpdateOwnAccountNameAccountBody": {
        "properties": {
          "name": {
            "type": "string"
          }
        },
        "required": [
          "name"
        ],
        "type": "object"
      },
      "UpdateSubscriptionAccountNameAndFlagsBody": {
        "properties": {
          "isActive": {
            "type": [
              "boolean",
              "null"
            ]
          },
          "isArchived": {
            "type": [
              "boolean",
              "null"
            ]
          },
          "isChecked": {
            "type": [
              "boolean",
              "null"
            ]
          },
          "isDefault": {
            "type": [
              "boolean",
              "null"
            ]
          },
          "name": {
            "type": [
              "string",
              "null"
            ]
          }
        },
        "type": "object"
      },
      "UpdateTenantNameAndDescriptionBody": {
        "properties": {
          "description": {
            "type": [
              "string",
              "null"
            ]
          },
          "name": {
            "type": [
              "string",
              "null"
            ]
          }
        },
        "type": "object"
      },
      "UpdateWebHookBody": {
        "properties": {
          "description": {
            "type": [
              "string",
              "null"
            ]
          },
          "isActive": {
            "type": [
              "boolean",
              "null"
            ]
          },
          "name": {
            "type": [
              "string",
              "null"
            ]
          },
          "secret": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/HttpSecret"
              }
            ]
          }
        },
        "type": "object"
      },
      "UpgradeAccountPrivilegesBody": {
        "properties": {
          "to": {
            "$ref": "#/components/schemas/UpgradeTargetAccountType"
          }
        },
        "required": [
          "to"
        ],
        "type": "object"
      },
      "UpgradeTargetAccountType": {
        "enum": [
          "staff",
          "manager"
        ],
        "type": "string"
      },
      "User": {
        "properties": {
          "account": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/Parent_Account_String"
              }
            ]
          },
          "created": {
            "format": "date-time",
            "type": "string"
          },
          "email": {
            "$ref": "#/components/schemas/Email"
          },
          "firstName": {
            "type": [
              "string",
              "null"
            ]
          },
          "id": {
            "format": "uuid",
            "type": [
              "string",
              "null"
            ]
          },
          "isActive": {
            "type": "boolean"
          },
          "isPrincipal": {
            "description": "If the user is the principal user of the account.\n\nThe principal user contains information of the first email that created\nthe account. This information is used to send emails to the principal\nuser.\n\nPrincipal users should not be deleted or deactivated if the account has\nother users connected.\n",
            "type": "boolean"
          },
          "lastName": {
            "type": [
              "string",
              "null"
            ]
          },
          "mfa": {
            "$ref": "#/components/schemas/MultiFactorAuthentication",
            "description": "The user TOTP\n\nWhen enabled the user has verified the TOTP and the auth url is set.\n"
          },
          "provider": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/Provider",
                "description": "The user provider.\n\nProvider is a optional field but it should be None only during the\ncollection of the user data from database. Such None initialization\nprevents that password hashes and salts should be exposed to the\noutside.\n\n! Thus, be careful on change this field.\n"
              }
            ]
          },
          "updated": {
            "format": "date-time",
            "type": [
              "string",
              "null"
            ]
          },
          "username": {
            "type": "string"
          }
        },
        "required": [
          "username",
          "email",
          "isActive",
          "created",
          "isPrincipal",
          "mfa"
        ],
        "type": "object"
      },
      "VerboseStatus": {
        "enum": [
          "unverified",
          "verified",
          "inactive",
          "archived",
          "deleted",
          "unknown"
        ],
        "type": "string"
      },
      "WebHook": {
        "properties": {
          "created": {
            "description": "The webhook created date",
            "format": "date-time",
            "type": "string"
          },
          "createdBy": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/WrittenBy",
                "description": "The webhook created by\n\nThe ID of the account that created the webhook. This is used for\nauditing purposes.\n"
              }
            ]
          },
          "description": {
            "description": "The webhook description",
            "type": [
              "string",
              "null"
            ]
          },
          "id": {
            "description": "The webhook id",
            "format": "uuid",
            "type": [
              "string",
              "null"
            ]
          },
          "isActive": {
            "description": "The webhook is active",
            "type": "boolean"
          },
          "name": {
            "description": "The webhook name",
            "type": "string"
          },
          "secret": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/HttpSecret",
                "description": "The webhook secret\n\nIts important to note that the secret should be encrypted in the\ndatabase and redacted on the response.\n"
              }
            ]
          },
          "trigger": {
            "$ref": "#/components/schemas/WebHookTrigger",
            "description": "The webhook trigger"
          },
          "updated": {
            "description": "The webhook updated date",
            "format": "date-time",
            "type": [
              "string",
              "null"
            ]
          },
          "updatedBy": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/WrittenBy",
                "description": "The webhook updated by\n\nThe ID of the account that updated the webhook. This is used for\nauditing purposes.\n"
              }
            ]
          },
          "url": {
            "description": "The webhook url",
            "type": "string"
          }
        },
        "required": [
          "name",
          "url",
          "trigger",
          "isActive",
          "created"
        ],
        "type": "object"
      },
      "WebHookTrigger": {
        "enum": [
          "subscriptionAccount.created",
          "subscriptionAccount.updated",
          "subscriptionAccount.deleted",
          "userAccount.created",
          "userAccount.updated",
          "userAccount.deleted"
        ],
        "type": "string"
      },
      "WrittenBy": {
        "properties": {
          "from": {
            "$ref": "#/components/schemas/IDSource",
            "description": "The ID source"
          },
          "id": {
            "description": "The ID of the user who created the account",
            "format": "uuid",
            "type": "string"
          }
        },
        "required": [
          "id",
          "from"
        ],
        "type": "object"
      }
    },
    "securitySchemes": {
      "Bearer": {
        "bearerFormat": "Bearer",
        "scheme": "bearer",
        "type": "http"
      },
      "ConnectionString": {
        "description": "A valid Mycelium Connection String",
        "in": "header",
        "name": "x-mycelium-connection-string",
        "type": "apiKey"
      }
    }
  }
}