services:
  - name: service-01
    host: myc-test-service-devcontainer:8083
    protocol: http
    discoverable: false
    healthCheckPath: /health

    secrets:
      - name: service-01-query-token
        queryParameter:
          name: "token"
          token: "token-by-query-parameter"

      - name: service-01-authorization-header
        authorizationHeader:
          name: Authorization
          prefix: Bearer
          token: "token-by-authorization-header"

    routes:
      #
      # Test for public route
      #
      - group: public
        path: /public*
        methods:
          - GET

      #
      # Test for protected route
      #
      - group: protected
        path: /protected
        methods:
          - GET

      #
      # Test for role protected route
      #
      # Test for the newbies role protected route. The downstream service should
      # receive only requests from users with the role newbies.
      #
      - group: !protectedByRoles
          roles:
            - newbies
        path: /protected/roles/newbies
        methods:
          - GET

      #
      # Test for permissioned role protected route
      #
      # Test for the newbies role protected route with the read permission.
      # The downstream service should receive only requests from users with the
      # role newbies and the read permission.
      #
      - group: !protectedByPermissionedRoles
          permissionedRoles:
            - [newbies, read]
        path: /protected/roles/newbies/with-permission
        methods:
          - GET

      #
      # Test for role protected route with service token
      #
      # Test for the newbies role protected route with the service token. The
      # downstream service should receive only requests from users with the role
      # newbies injected using service token.
      #
      - group: !protectedByServiceTokenWithRole
          roles:
            - newbie
        path: /protected/roles/newbies/with-scope
        methods:
          - GET

      #
      # Test for expects headers route
      #
      # Test for the expects headers route. The downstream service should
      # receive only requests with any headers. This is util to test if the
      # request headers are injected correctly.
      #
      - group: !protectedByServiceTokenWithPermissionedRoles
          permissionedRoles:
            - [newbie, read]
        path: /protected/expects-headers
        methods:
          - GET

      #
      # Test for webhook route for account created
      #
      - group: public
        path: /webhook/account-created
        methods:
          - POST

      #
      # Test for webhook route for account updated
      #
      - group: public
        path: /webhook/account-updated
        methods:
          - PUT

      #
      # Test for webhook route for account deleted
      #
      - group: public
        path: /webhook/account-deleted
        methods:
          - DELETE

      #
      # Test for secret injection as query parameter
      #
      - group: public
        path: /secrets/query-parameter-token
        secretName: service-01-query-token
        acceptInsecureRouting: true
        methods:
          - GET

      #
      # Test for secret injection as authorization header
      #
      - group: public
        path: /secrets/authorization-header
        secretName: service-01-authorization-header
        acceptInsecureRouting: true
        methods:
          - GET

  - name: service-02-proxy
    host: myc-test-service-devcontainer:8083
    protocol: http
    proxyAddress: http://localhost:8888
    discoverable: true
    id: dd5f8fb9-5a2e-4ff2-ad5e-63c76b9a30c0
    healthCheckPath: /health
    serviceType: rest-api
    isContextApi: false
    openapiPath: /doc/openapi.json

    description: |
      This is a sample application used to test the api gateway security
      capabilities. Use this service to test proxied routes.

    capabilities:
      - rbac-tests
      - profile-tests
      - security-tests

    routes:
      #
      # Example of public route
      #
      - group: public
        path: /public*
        methods:
          - GET

      #
      # Example of protected route
      #
      - group: protected
        path: /protected*
        methods:
          - GET
