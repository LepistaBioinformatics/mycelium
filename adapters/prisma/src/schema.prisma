// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "cargo prisma"
  output   = "./prisma.rs"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// -----------------------------------------------------------------------------
// TENANT RELATED MODELS
// -----------------------------------------------------------------------------

model Tenant {
  id          String  @id @default(uuid())
  name        String  @db.VarChar(255)
  description String? @db.Text

  owners   OwnerOnTenant[]
  manager  ManagerAccountOnTenant?
  accounts Account[]
  tags     TenantTag[]

  meta   Json?
  status Json[]

  created DateTime  @default(now()) @db.Timestamptz(6)
  updated DateTime? @updatedAt @db.Timestamptz(6)

  // Db compatibility and extra maps
  @@unique([name])
  @@map("tenant")
}

model OwnerOnTenant {
  id String @id @default(uuid())

  tenant    Tenant @relation(fields: [tenant_id], references: [id], onDelete: Cascade)
  tenant_id String

  owner    User   @relation(fields: [owner_id], references: [id], onDelete: Cascade)
  owner_id String

  guest_by String
  created  DateTime  @default(now()) @db.Timestamptz(6)
  updated  DateTime? @updatedAt @db.Timestamptz(6)

  @@unique([tenant_id, owner_id])
  @@map("owner_on_tenant")
}

model ManagerAccountOnTenant {
  id String @id @default(uuid())

  tenant    Tenant @relation(fields: [tenant_id], references: [id], onDelete: Cascade)
  tenant_id String

  account    Account @relation(fields: [account_id], references: [id], onDelete: Cascade)
  account_id String

  created DateTime  @default(now()) @db.Timestamptz(6)
  updated DateTime? @updatedAt @db.Timestamptz(6)

  @@unique([tenant_id])
  @@unique([account_id])
  @@unique([tenant_id, account_id])
  @@map("manager_account_on_tenant")
}

model TenantTag {
  // Primary key
  id String @id @default(uuid())

  // The tag
  value String @db.VarChar(64)
  meta  Json?

  // Related models
  tenant    Tenant @relation(fields: [tenant_id], references: [id], onDelete: Cascade)
  tenant_id String

  // Db compatibility and extra maps
  @@unique([value, tenant_id])
  @@map("tenant_tag")
}

// -----------------------------------------------------------------------------
// USER RELATED MODELS
// -----------------------------------------------------------------------------

model User {
  // Primary key
  id String @id @default(uuid())

  // Model fields
  username     String    @db.VarChar(140)
  email        String    @db.VarChar(140)
  first_name   String    @db.VarChar(140)
  last_name    String    @db.VarChar(140)
  is_active    Boolean   @default(true)
  is_principal Boolean   @default(false)
  created      DateTime  @default(now()) @db.Timestamptz(6)
  updated      DateTime? @updatedAt @db.Timestamptz(6)
  mfa          Json?

  // Backward relationship fields
  account         Account?          @relation(fields: [account_id], references: [id])
  account_id      String?
  provider        IdentityProvider?
  owner_of_tenant OwnerOnTenant[]

  // Db compatibility and extra maps
  @@unique([email, account_id])
  @@map("user")
}

model IdentityProvider {
  // Model fields
  name          String? @db.VarChar(255)
  password_hash String? @db.VarChar(255)

  // Backward relationship fields
  user    User   @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id String

  // Db compatibility and extra maps
  @@id([user_id])
  @@unique([user_id, password_hash])
  @@unique([user_id, name])
  @@map("identity_provider")
}

model Token {
  id         Int      @id @default(autoincrement())
  meta       Json
  expiration DateTime @default(now()) @db.Timestamptz(6)

  @@map("token")
}

model Role {
  // Primary key
  id String @id @default(uuid())

  // Model fields
  name        String @db.VarChar(140)
  description String @db.VarChar(255)

  // Backward relationship fields
  user_roles GuestRole[]

  // Db compatibility and extra maps
  @@map("role")
}

model GuestRole {
  // Primary key
  id String @id @default(uuid())

  // Model fields
  name        String  @db.VarChar(140)
  description String? @db.VarChar(255)
  role        Role    @relation(fields: [role_id], references: [id])
  role_id     String
  permission  Int     @default(0)

  // Backward relationship fields
  guest_users GuestUser[]
  children    GuestRoleChildren[] @relation(name: "ParentGuestRole")
  parent      GuestRoleChildren[] @relation(name: "ChildGuestRole")

  // Db compatibility and extra maps
  @@unique([name])
  @@map("guest_role")
}

model GuestRoleChildren {
  // Model fields
  parent    GuestRole @relation(name: "ParentGuestRole", fields: [parent_id], references: [id])
  parent_id String

  child_role    GuestRole @relation(name: "ChildGuestRole", fields: [child_role_id], references: [id])
  child_role_id String

  // Db compatibility and extra maps
  @@id([parent_id, child_role_id])
  @@map("guest_role_children")
}

model GuestUser {
  // Primary key
  id String @id @default(uuid())

  // Model fields
  email         String
  guest_role    GuestRole @relation(fields: [guest_role_id], references: [id])
  guest_role_id String
  created       DateTime  @default(now()) @db.Timestamptz(6)
  updated       DateTime? @updatedAt @db.Timestamptz(6)

  // Backward relationship fields
  accounts GuestUserOnAccount[]

  // Db compatibility and extra maps
  @@unique([email, guest_role_id])
  @@map("guest_user")
}

// -----------------------------------------------------------------------------
// ACCOUNT RELATED MODELS
// -----------------------------------------------------------------------------

model Account {
  // Primary key
  id String @id @default(uuid())

  // Model fields
  name         String    @db.VarChar(256)
  slug         String    @db.VarChar(256)
  account_type Json      @default("{}") @db.Json
  created      DateTime  @default(now()) @db.Timestamptz(6)
  updated      DateTime? @updatedAt @db.Timestamptz(6)
  is_active    Boolean   @default(true)
  is_checked   Boolean   @default(false)
  is_archived  Boolean   @default(false)
  is_default   Boolean   @default(false)

  // Backward relationship fields
  owners      User[]
  guest_users GuestUserOnAccount[]
  tags        AccountTags[]

  // Related models
  tenant     Tenant?                 @relation(fields: [tenant_id], references: [id])
  tenant_id  String?
  manager_of ManagerAccountOnTenant?

  // Db compatibility and extra maps
  @@unique([name, tenant_id])
  @@map("account")
}

//view LicensedResources {
//  acc_id     String  @db.VarChar(36)
//  acc_name   String  @db.VarChar(256)
//  is_acc_std Boolean
//  gr_id      String  @db.VarChar(36)
//  gr_name    String  @db.VarChar(140)
//  gr_perms   Int[]
//  rl_name    String  @db.VarChar(140)
//  gu_email   String
//
//  @@unique([acc_id, gr_id, gu_email])
//  @@map("licensed_resources")
//}

model AccountTags {
  // Primary key
  id String @id @default(uuid())

  // The tag
  value String @db.VarChar(64)
  meta  Json?

  // Related models
  account    Account @relation(fields: [account_id], references: [id], onDelete: Cascade)
  account_id String

  // Db compatibility and extra maps
  @@unique([value, account_id])
  @@map("account_tag")
}

model GuestUserOnAccount {
  // Model fields
  guest_user    GuestUser @relation(fields: [guest_user_id], references: [id], onDelete: Cascade)
  guest_user_id String
  account       Account   @relation(fields: [account_id], references: [id])
  account_id    String
  created       DateTime  @default(now()) @db.Timestamptz(6)

  // Db compatibility and extra maps
  @@id([guest_user_id, account_id])
  @@map("guest_user_on_account")
}

// -----------------------------------------------------------------------------
// ERROR C0DE RELATED MODELS
// -----------------------------------------------------------------------------

model ErrorCode {
  // Primary keys
  code   Int    @default(autoincrement())
  prefix String

  // Model fields
  message     String  @db.VarChar(255)
  details     String? @db.VarChar(255)
  is_internal Boolean @default(false)
  is_native   Boolean @default(false)

  // Db compatibility and extra maps
  @@id([prefix, code])
  @@map("error_code")
}

// -----------------------------------------------------------------------------
// WEBHOOK MODELS
// -----------------------------------------------------------------------------

model Webhook {
  // Primary key
  id String @id @default(uuid())

  // Model fields
  name        String    @db.VarChar(140)
  description String?   @db.VarChar(255)
  url         String
  trigger     String    @db.VarChar(255)
  is_active   Boolean   @default(true)
  created     DateTime  @default(now()) @db.Timestamptz(6)
  updated     DateTime? @updatedAt @db.Timestamptz(6)
  secret      Json?

  // Db compatibility and extra maps
  @@unique([name, url, trigger])
  @@map("webhook")
}
