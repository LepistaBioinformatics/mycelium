{
    "openapi": "3.1.0",
    "info": {
        "title": "Mycelium API",
        "description": "# Mycelium API Gateway\n\n**Mycelium** is a powerful **API Gateway** designed to provide secure and\nflexible management of API services. It combines advanced authentication\nmechanisms with robust resource and access control, making it the ideal solution\nfor organizations managing multiple clients and services.\n\n---\n\n## üöÄ Key Features\n\n### üåê **API Gateway with Multi-Tenant Support**\n\n- Mycelium functions as a central **API Gateway**, streamlining the management\n  of API requests and responses.\n- It supports **tenants**, which are namespaces that separate resources for\n  different user groups. This feature is crucial for businesses offering APIs to\n  multiple clients, ensuring resource isolation and secure operations.\n\n### üîê **Comprehensive Authentication Options**\n\nMycelium provides a variety of authentication methods to suit different\nscenarios:\n\n- **Native Authentication**: Standard username and password login for end users\n  with TOTP support.\n- **OAuth2 Integration**: Authentication using Azure and Google accounts for\n  seamless third-party integration.\n- **Connection String Authentication**: Token-based authentication for\n  service-to-service communication, with tokens generated securely by Mycelium.\n\n### üõ°Ô∏è **Role Management System**\n\n- Mycelium includes a full-featured **role management system**, allowing users\n  to create and manage hierarchical roles.\n- This system enables flexible role definitions, ensuring that access levels\n  align with specific organizational requirements.\n\n### üéõÔ∏è **Permission Management System**\n\n- Mycelium provides granular **permission management**, letting users define\n  specific access rights for various resources.\n- This ensures fine-grained control over who can view, modify, or manage APIs\n  and related resources.\n\n### ü™™ **Detailed Access Control**\n\n- Downstream APIs can receive user profile information from Mycelium, allowing\n  them to customize responses based on the user's role and permissions.\n\n### **Endpoints protection by role**\n\n- Downstream APIs can be protected by role and specific permissions, ensuring\n  that only users with the appropriate access level can interact with them.\n- The filtration process is performed at the gateway level, preventing\n  unauthorized access to downstream services.\n\n---\n\nBy combining the capabilities of an API Gateway with advanced authentication,\nmulti-tenant support, and detailed access control systems, Mycelium empowers\norganizations to securely manage their APIs and scale efficiently across diverse\nclient needs.\n\n## üõ°Ô∏è Mycelium roles\n\nMycelium works with a set of predefined roles that can be assigned to users.\nPredefined roles ensures a consistent and secure access control across the\norganization. Standard roles include full application access roles (super user\n[SU] and not super user roles), as well as roles with limited access to specific\ntenants or resources.\n\n### **Super User (SU) Roles**\n\nSuper users has the ability to scale up and down user and permissions and\nperform application level operations. Super users inherits abilities from all\nother roles.\n\n- **Staff's**: Has the exclusive ability to upgrade and downgrade new users to\n  the manager's and staff's roles.\n\n- **Manager's**: Has the exclusive ability to manage tenants and their\n  resources.\n\n### **Application Level Roles (not SU)**\n\n- TODO\n\n### **Tenant Level Roles**\n\n- TODO\n\n### **Account Level Roles**\n\n- TODO\n\n### **Beginners**\n\n- TODO\n\n### **Service**\n\n- TODO\n\n---\n",
        "contact": {
            "name": "Samuel Galv√£o Elias",
            "email": "sgelias@outlook.com"
        },
        "license": {
            "name": "Apache-2.0",
            "identifier": "Apache-2.0"
        },
        "version": "6.2.0"
    },
    "paths": {
        "/adm/auth/azure/callback": {
            "get": {
                "tags": [
                    "Auth__Azure"
                ],
                "summary": "Callback URL for Azure OAuth",
                "description": "This endpoint is called by Azure after the user authorizes the application.\n\n",
                "operationId": "azure_callback_url",
                "responses": {
                    "200": {
                        "description": "Returns the Azure OAuth authorize URL.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CallbackResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Code not found.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpJsonResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "CSRF Token expired.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpJsonResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Error on token exchange.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpJsonResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {}
                ]
            }
        },
        "/adm/auth/azure/login": {
            "get": {
                "tags": [
                    "Auth__Azure"
                ],
                "summary": "Generate the Azure OAuth authorize URL",
                "description": "Users should access this URL to start the OAuth2 flow.\n\n",
                "operationId": "login_url",
                "responses": {
                    "200": {
                        "description": "Returns the Azure OAuth authorize URL.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AzureLoginResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Azure OAuth is disabled.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpJsonResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {}
                ]
            }
        },
        "/adm/auth/google/callback": {
            "get": {
                "tags": [
                    "Auth__Google"
                ],
                "operationId": "google_callback_url",
                "responses": {
                    "200": {
                        "description": "Redirect user to auth url"
                    }
                },
                "security": [
                    {}
                ]
            }
        },
        "/adm/rs/accounts-manager/guests/accounts/{account_id}/roles/{role_id}": {
            "post": {
                "tags": [
                    "Account_Manager__Guest"
                ],
                "summary": "Guest a user to work on account.",
                "description": "This action gives the ability of the target account (specified through\nthe `account` argument) to perform actions specified in the `role`\npath argument.",
                "operationId": "guest_to_children_account_url",
                "parameters": [
                    {
                        "name": "x-mycelium-tenant-id",
                        "in": "header",
                        "description": "The tenant unique id.",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    },
                    {
                        "name": "account_id",
                        "in": "path",
                        "description": "The account primary key.",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    },
                    {
                        "name": "role_id",
                        "in": "path",
                        "description": "The guest-role unique id.",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/GuestUserBody"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Guest already exist.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GuestUser"
                                }
                            }
                        }
                    },
                    "201": {
                        "description": "Guesting done.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GuestUser"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpJsonResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpJsonResponse"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpJsonResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Unknown internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpJsonResponse"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/adm/rs/beginners/accounts/": {
            "post": {
                "tags": [
                    "Beginners__Account"
                ],
                "summary": "Create a user related account",
                "description": "A user related account is an account that is created for a physical person.\n\n",
                "operationId": "create_default_account_url",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateDefaultAccountBody"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Account already exists.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Account"
                                }
                            }
                        }
                    },
                    "201": {
                        "description": "Account successfully created.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Account"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpJsonResponse"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpJsonResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Unknown internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpJsonResponse"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/adm/rs/beginners/accounts/{account_id}/update-account-name": {
            "patch": {
                "tags": [
                    "Beginners__Account"
                ],
                "summary": "Update account name",
                "description": "Update the account name of the account owner.\n\n",
                "operationId": "update_own_account_name_url",
                "parameters": [
                    {
                        "name": "account_id",
                        "in": "path",
                        "description": "The account primary key.",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdateOwnAccountNameAccountBody"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "202": {
                        "description": "Account name successfully updated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Account"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Account name not updated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpJsonResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpJsonResponse"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpJsonResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Unknown internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpJsonResponse"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/adm/rs/beginners/profile/": {
            "get": {
                "tags": [
                    "Beginners__Profile"
                ],
                "summary": "Fetch a user's profile.",
                "operationId": "fetch_profile_url",
                "parameters": [
                    {
                        "name": "withUrl",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": [
                                "boolean",
                                "null"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Profile fetching done.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Profile"
                                }
                            }
                        }
                    },
                    "204": {
                        "description": "Not found."
                    },
                    "400": {
                        "description": "Bad request.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpJsonResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpJsonResponse"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpJsonResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Unknown internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpJsonResponse"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/adm/rs/beginners/users/": {
            "post": {
                "tags": [
                    "Beginners__User"
                ],
                "summary": "Register user",
                "description": "This route should be used to register a new user. If the Bearer token is\nincluded in the request, the user will be registered with the provider\ninformed in the token. Otherwise, the password is required.\n\n",
                "operationId": "create_default_user_url",
                "parameters": [
                    {
                        "name": "Authorization",
                        "in": "header",
                        "description": "An optional Bearer token. When included, the user will be registered with the provider informed in the token.",
                        "required": false,
                        "schema": {
                            "type": [
                                "string",
                                "null"
                            ]
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateDefaultUserBody"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "User successfully created.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/User"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpJsonResponse"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpJsonResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Unknown internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpJsonResponse"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/adm/rs/beginners/users/login": {
            "post": {
                "tags": [
                    "Beginners__User"
                ],
                "summary": "Login with email and password",
                "description": "This route should be used to login with email and password. If the user has\nenabled the TOTP app, the user will be redirected to the TOTP activation\nroute.\n\n",
                "operationId": "check_email_password_validity_url",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CheckUserCredentialsBody"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Credentials are valid.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/MyceliumLoginResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpJsonResponse"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpJsonResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Unknown internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpJsonResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {}
                ]
            }
        },
        "/adm/rs/beginners/users/reset-password": {
            "post": {
                "tags": [
                    "Beginners__User"
                ],
                "summary": "Check token and reset password",
                "description": "This route should be used to check the token and reset the password.\n\n",
                "operationId": "check_token_and_reset_password_url",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CheckTokenBody"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Password change requested.",
                        "content": {
                            "text/plain": {
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpJsonResponse"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpJsonResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Unknown internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpJsonResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {}
                ]
            }
        },
        "/adm/rs/beginners/users/start-password-reset": {
            "post": {
                "tags": [
                    "Beginners__User"
                ],
                "summary": "Start password redefinition",
                "description": "This route should be used to start the password redefinition process.\n\n",
                "operationId": "start_password_redefinition_url",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CheckTokenBody"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Password change requested.",
                        "content": {
                            "text/plain": {
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpJsonResponse"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpJsonResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Unknown internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpJsonResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {}
                ]
            }
        },
        "/adm/rs/beginners/users/status": {
            "post": {
                "tags": [
                    "Beginners__User"
                ],
                "summary": "Check email status",
                "description": "Check if the email is already registered.\n\n",
                "operationId": "check_email_registration_status_url",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CheckEmailStatusBody"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Status fetching done.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EmailRegistrationStatus"
                                }
                            }
                        }
                    },
                    "204": {
                        "description": "Not found."
                    },
                    "400": {
                        "description": "Bad request.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpJsonResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpJsonResponse"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpJsonResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Unknown internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpJsonResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {}
                ]
            }
        },
        "/adm/rs/beginners/users/totp/check-token": {
            "post": {
                "tags": [
                    "Beginners__User"
                ],
                "summary": "Check TOTP token",
                "description": "This route should be used to check the TOTP token when tht totp app is\nenabled.\n\n",
                "operationId": "totp_check_token_url",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/TotpUpdatingValidationBody"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Credentials are valid.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/MyceliumLoginResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpJsonResponse"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpJsonResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Unknown internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpJsonResponse"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/adm/rs/beginners/users/totp/disable": {
            "post": {
                "tags": [
                    "Beginners__User"
                ],
                "summary": "Disable TOTP",
                "description": "This route should be used to disable the TOTP app.\n\n",
                "operationId": "totp_disable_url",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/TotpUpdatingValidationBody"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Credentials are valid.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/MyceliumLoginResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpJsonResponse"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpJsonResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Unknown internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpJsonResponse"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/adm/rs/beginners/users/totp/enable": {
            "post": {
                "tags": [
                    "Beginners__User"
                ],
                "summary": "Enable TOTP",
                "description": "This route should be used to enable the TOTP app. Before enabling the TOTP\nthe user must be authenticated using the `/login/` route.\n\n",
                "operationId": "totp_start_activation_url",
                "responses": {
                    "200": {
                        "description": "Totp Activation Started.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TotpActivationStartedResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpJsonResponse"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpJsonResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Unknown internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpJsonResponse"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/adm/rs/beginners/users/totp/validate-app": {
            "post": {
                "tags": [
                    "Beginners__User"
                ],
                "summary": "Validate TOTP app",
                "description": "This route should be used to validate the TOTP app after enabling it.\n\n",
                "operationId": "totp_finish_activation_url",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/TotpUpdatingValidationBody"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Credentials are valid.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/MyceliumLoginResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpJsonResponse"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpJsonResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Unknown internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpJsonResponse"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/adm/rs/beginners/users/validate-activation-token": {
            "post": {
                "tags": [
                    "Beginners__User"
                ],
                "summary": "Check token and activate user",
                "description": "This route should be used to check the token and activate the user.\n\n",
                "operationId": "check_user_token_url",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CheckTokenBody"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Activation token is valid.",
                        "content": {
                            "text/plain": {
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpJsonResponse"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpJsonResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Unknown internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpJsonResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {}
                ]
            }
        },
        "/adm/rs/guests-manager/guest-roles/": {
            "get": {
                "tags": [
                    "Guest_Manager__Guest_Role"
                ],
                "summary": "List Roles",
                "operationId": "list_guest_roles_url",
                "parameters": [
                    {
                        "name": "name",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": [
                                "string",
                                "null"
                            ]
                        }
                    },
                    {
                        "name": "guestRoleId",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": [
                                "string",
                                "null"
                            ],
                            "format": "uuid"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/GuestRole"
                                    }
                                }
                            }
                        }
                    },
                    "204": {
                        "description": "Not found."
                    },
                    "401": {
                        "description": "Unauthorized.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpJsonResponse"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpJsonResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Unknown internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpJsonResponse"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Guest_Manager__Guest_Role"
                ],
                "summary": "Create Guest Role",
                "description": "Guest Roles provide permissions to simple Roles.",
                "operationId": "crate_guest_role_url",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateGuestRoleBody"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Guest Role already exists.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GuestRole"
                                }
                            }
                        }
                    },
                    "201": {
                        "description": "Guest Role created.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GuestRole"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpJsonResponse"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpJsonResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Unknown internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpJsonResponse"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/adm/rs/guests-manager/guest-roles/{guest_role_id}": {
            "delete": {
                "tags": [
                    "Guest_Manager__Guest_Role"
                ],
                "summary": "Delete Guest Role",
                "description": "Delete a single guest role.",
                "operationId": "delete_guest_role_url",
                "parameters": [
                    {
                        "name": "guest_role_id",
                        "in": "path",
                        "description": "The guest-role primary key.",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Guest Role deleted."
                    },
                    "400": {
                        "description": "Guest Role not deleted.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpJsonResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpJsonResponse"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpJsonResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Unknown internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpJsonResponse"
                                }
                            }
                        }
                    }
                }
            },
            "patch": {
                "tags": [
                    "Guest_Manager__Guest_Role"
                ],
                "summary": "Partial Update Guest Role",
                "description": "Update name and description of a single Guest Role.",
                "operationId": "update_guest_role_name_and_description_url",
                "parameters": [
                    {
                        "name": "guest_role_id",
                        "in": "path",
                        "description": "The guest-role primary key.",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdateGuestRoleNameAndDescriptionBody"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "202": {
                        "description": "Guest Role updated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GuestRole"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Guest Role not deleted.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpJsonResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpJsonResponse"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpJsonResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Unknown internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpJsonResponse"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/adm/rs/guests-manager/guest-roles/{guest_role_id}/children/{child_id}": {
            "post": {
                "tags": [
                    "Guest_Manager__Guest_Role"
                ],
                "summary": "Set Child Role",
                "description": "Insert a child role to a parent role.",
                "operationId": "insert_role_child_url",
                "parameters": [
                    {
                        "name": "guest_role_id",
                        "in": "path",
                        "description": "The guest-role primary key.",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    },
                    {
                        "name": "child_id",
                        "in": "path",
                        "description": "The child guest-role primary key.",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdateGuestRolePermissionsBody"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "202": {
                        "description": "Guest Role updated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GuestRole"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Guest Role not deleted.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpJsonResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpJsonResponse"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpJsonResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Unknown internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpJsonResponse"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Guest_Manager__Guest_Role"
                ],
                "summary": "Delete Child Role",
                "description": "Delete a child role to a parent role.",
                "operationId": "remove_role_child_url",
                "parameters": [
                    {
                        "name": "guest_role_id",
                        "in": "path",
                        "description": "The guest-role primary key.",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    },
                    {
                        "name": "child_id",
                        "in": "path",
                        "description": "The child guest-role primary key.",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdateGuestRolePermissionsBody"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "202": {
                        "description": "Guest Role updated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GuestRole"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Guest Role not deleted.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpJsonResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpJsonResponse"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpJsonResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Unknown internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpJsonResponse"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/adm/rs/guests-manager/guest-roles/{guest_role_id}/permissions": {
            "patch": {
                "tags": [
                    "Guest_Manager__Guest_Role"
                ],
                "summary": "Change permissions of Guest Role",
                "description": "Upgrade or Downgrade permissions of Guest Role.",
                "operationId": "update_guest_role_permissions_url",
                "parameters": [
                    {
                        "name": "guest_role_id",
                        "in": "path",
                        "description": "The guest-role primary key.",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdateGuestRolePermissionsBody"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "202": {
                        "description": "Guest Role updated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GuestRole"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Guest Role not deleted.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpJsonResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpJsonResponse"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpJsonResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Unknown internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpJsonResponse"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/adm/rs/guests-manager/roles/": {
            "get": {
                "tags": [
                    "Guest_Manager__Role"
                ],
                "summary": "List Roles",
                "operationId": "list_roles_url",
                "parameters": [
                    {
                        "name": "name",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": [
                                "string",
                                "null"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/Role"
                                    }
                                }
                            }
                        }
                    },
                    "204": {
                        "description": "Not found."
                    },
                    "401": {
                        "description": "Unauthorized.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpJsonResponse"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpJsonResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Unknown internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpJsonResponse"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Guest_Manager__Role"
                ],
                "summary": "Create Role",
                "description": "Roles are used to build Guest Role elements.",
                "operationId": "crate_role_url",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateRoleBody"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Role already exists.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Role"
                                }
                            }
                        }
                    },
                    "201": {
                        "description": "Role created.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Role"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpJsonResponse"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpJsonResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Unknown internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpJsonResponse"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/adm/rs/guests-manager/roles/{role_id}": {
            "delete": {
                "tags": [
                    "Guest_Manager__Role"
                ],
                "summary": "Delete Role",
                "description": "Delete a single role.",
                "operationId": "delete_role_url",
                "parameters": [
                    {
                        "name": "role_id",
                        "in": "path",
                        "description": "The role primary key.",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Role deleted."
                    },
                    "400": {
                        "description": "Role not deleted.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpJsonResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpJsonResponse"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpJsonResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Unknown internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpJsonResponse"
                                }
                            }
                        }
                    }
                }
            },
            "patch": {
                "tags": [
                    "Guest_Manager__Role"
                ],
                "summary": "Partial Update Role",
                "description": "Update name and description of a single Role.",
                "operationId": "update_role_name_and_description_url",
                "parameters": [
                    {
                        "name": "role_id",
                        "in": "path",
                        "description": "The role primary key.",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateRoleBody"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "202": {
                        "description": "Guest Role updated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Role"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Guest Role not deleted.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpJsonResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpJsonResponse"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpJsonResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Unknown internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpJsonResponse"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/adm/rs/guests-manager/tokens/accounts/{account_id}": {
            "post": {
                "tags": [
                    "Guest_Manager__Token"
                ],
                "summary": "Create Account Associated Token",
                "description": "This action creates a token that is associated with the account specified\nin the `account_id` argument. The token is scoped to the roles specified\nin the `permissioned_roles` argument.\n\n",
                "operationId": "create_default_account_associated_connection_string_url",
                "parameters": [
                    {
                        "name": "account_id",
                        "in": "path",
                        "description": "The account unique id.",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateTokenBody"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "Token created.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CreateTokenResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpJsonResponse"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpJsonResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Unknown internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpJsonResponse"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/adm/rs/guests-manager/tokens/roles/{role_id}": {
            "post": {
                "tags": [
                    "Guest_Manager__Token"
                ],
                "summary": "Create Role Associated Token",
                "description": "This action creates a token that is associated with the role specified\nin the `role_id` argument. The token is scoped to the roles specified\nin the `permissioned_roles` argument.\n\n",
                "operationId": "create_role_associated_connection_string_url",
                "parameters": [
                    {
                        "name": "role_id",
                        "in": "path",
                        "description": "The role unique id.",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateTokenBody"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "Token created.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CreateTokenResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpJsonResponse"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpJsonResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Unknown internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpJsonResponse"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/adm/rs/subscriptions-manager/accounts/": {
            "get": {
                "tags": [
                    "Subscriptions_Manager__Account"
                ],
                "summary": "List account given an account-type",
                "description": "Get a filtered (or not) list of accounts.\n\nList accounts with pagination. The `records` field contains a vector of\n`Account` model.\n\n",
                "operationId": "list_accounts_by_type_url",
                "parameters": [
                    {
                        "name": "x-mycelium-tenant-id",
                        "in": "header",
                        "description": "The tenant unique id.",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    },
                    {
                        "name": "term",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": [
                                "string",
                                "null"
                            ]
                        }
                    },
                    {
                        "name": "tagValue",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": [
                                "string",
                                "null"
                            ]
                        }
                    },
                    {
                        "name": "accountType",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "oneOf": [
                                {
                                    "type": "null"
                                },
                                {
                                    "$ref": "#/components/schemas/APIAccountType"
                                }
                            ]
                        }
                    },
                    {
                        "name": "isOwnerActive",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": [
                                "boolean",
                                "null"
                            ]
                        }
                    },
                    {
                        "name": "status",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "oneOf": [
                                {
                                    "type": "null"
                                },
                                {
                                    "$ref": "#/components/schemas/VerboseStatus"
                                }
                            ]
                        }
                    },
                    {
                        "name": "roleName",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": [
                                "string",
                                "null"
                            ]
                        }
                    },
                    {
                        "name": "roleId",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": [
                                "string",
                                "null"
                            ],
                            "format": "uuid"
                        }
                    },
                    {
                        "name": "skip",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": [
                                "integer",
                                "null"
                            ],
                            "format": "int32"
                        }
                    },
                    {
                        "name": "pageSize",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": [
                                "integer",
                                "null"
                            ],
                            "format": "int32"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Fetching success.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/Account"
                                    }
                                }
                            }
                        }
                    },
                    "204": {
                        "description": "Not found."
                    },
                    "401": {
                        "description": "Unauthorized.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpJsonResponse"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpJsonResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Unknown internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpJsonResponse"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Subscriptions_Manager__Account"
                ],
                "summary": "Create Subscription Account",
                "description": "Subscription accounts represents shared entities, like institutions,\ngroups, but not real persons.",
                "operationId": "create_subscription_account_url",
                "parameters": [
                    {
                        "name": "x-mycelium-tenant-id",
                        "in": "header",
                        "description": "The tenant unique id.",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateSubscriptionAccountBody"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "Account created.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Account"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Account already exists.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpJsonResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpJsonResponse"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpJsonResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Unknown internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpJsonResponse"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/adm/rs/subscriptions-manager/accounts/{account_id}": {
            "get": {
                "tags": [
                    "Subscriptions_Manager__Account"
                ],
                "summary": "Get Subscription Account",
                "description": "Get a single subscription account.",
                "operationId": "get_account_details_url",
                "parameters": [
                    {
                        "name": "x-mycelium-tenant-id",
                        "in": "header",
                        "description": "The tenant unique id.",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    },
                    {
                        "name": "account_id",
                        "in": "path",
                        "description": "The account primary key.",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Fetching success.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Account"
                                }
                            }
                        }
                    },
                    "204": {
                        "description": "Not found."
                    },
                    "401": {
                        "description": "Unauthorized.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpJsonResponse"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpJsonResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Unknown internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpJsonResponse"
                                }
                            }
                        }
                    }
                }
            },
            "patch": {
                "tags": [
                    "Subscriptions_Manager__Account"
                ],
                "summary": "Create Subscription Account",
                "description": "Subscription accounts represents shared entities, like institutions,\ngroups, but not real persons.",
                "operationId": "update_account_name_and_flags_url",
                "parameters": [
                    {
                        "name": "x-mycelium-tenant-id",
                        "in": "header",
                        "description": "The tenant unique id.",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    },
                    {
                        "name": "account_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdateSubscriptionAccountNameAndFlagsBody"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "Account created.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Account"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Account already exists.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpJsonResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpJsonResponse"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpJsonResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Unknown internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpJsonResponse"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/adm/rs/subscriptions-manager/accounts/{account_id}/propagate": {
            "post": {
                "tags": [
                    "Subscriptions_Manager__Account"
                ],
                "summary": "Propagate Subscription Account",
                "description": "Propagate a single subscription account.",
                "operationId": "propagate_existing_subscription_account_url",
                "parameters": [
                    {
                        "name": "x-mycelium-tenant-id",
                        "in": "header",
                        "description": "The tenant unique id.",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    },
                    {
                        "name": "account_id",
                        "in": "path",
                        "description": "The account primary key.",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Propagating success.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Account"
                                }
                            }
                        }
                    },
                    "204": {
                        "description": "Not found."
                    },
                    "401": {
                        "description": "Unauthorized.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpJsonResponse"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpJsonResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Unknown internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpJsonResponse"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/adm/rs/subscriptions-manager/guests/": {
            "get": {
                "tags": [
                    "Subscriptions_Manager__Guest"
                ],
                "summary": "List subscription accounts which email was guest",
                "operationId": "list_licensed_accounts_of_email_url",
                "parameters": [
                    {
                        "name": "x-mycelium-tenant-id",
                        "in": "header",
                        "description": "The tenant unique id.",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    },
                    {
                        "name": "email",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "roles",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": [
                                "array",
                                "null"
                            ],
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "name": "permissionedRoles",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": [
                                "array",
                                "null"
                            ],
                            "items": {
                                "type": "array",
                                "items": false,
                                "prefixItems": [
                                    {
                                        "type": "string"
                                    },
                                    {
                                        "type": "string",
                                        "enum": [
                                            "read",
                                            "write",
                                            "readWrite"
                                        ]
                                    }
                                ]
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Fetching success.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/LicensedResources"
                                    }
                                }
                            }
                        }
                    },
                    "204": {
                        "description": "Not found."
                    },
                    "401": {
                        "description": "Unauthorized.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpJsonResponse"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpJsonResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Unknown internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpJsonResponse"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/adm/rs/subscriptions-manager/guests/accounts/{account_id}": {
            "get": {
                "tags": [
                    "Subscriptions_Manager__Guest"
                ],
                "summary": "List guest accounts related to a subscription account",
                "description": "This action fetches all non-subscription accounts related to the\ninformed subscription account.",
                "operationId": "list_guest_on_subscription_account_url",
                "parameters": [
                    {
                        "name": "x-mycelium-tenant-id",
                        "in": "header",
                        "description": "The tenant unique id.",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    },
                    {
                        "name": "account_id",
                        "in": "path",
                        "description": "The account primary key.",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Fetching success.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GuestUser"
                                }
                            }
                        }
                    },
                    "204": {
                        "description": "Not found."
                    },
                    "401": {
                        "description": "Unauthorized.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpJsonResponse"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpJsonResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Unknown internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpJsonResponse"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/adm/rs/subscriptions-manager/guests/accounts/{account_id}/roles/{role_id}": {
            "post": {
                "tags": [
                    "Subscriptions_Manager__Guest"
                ],
                "summary": "Guest a user to work on account.",
                "description": "This action gives the ability of the target account (specified through\nthe `account` argument) to perform actions specified in the `role`\npath argument.",
                "operationId": "guest_user_url",
                "parameters": [
                    {
                        "name": "x-mycelium-tenant-id",
                        "in": "header",
                        "description": "The tenant unique id.",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    },
                    {
                        "name": "account_id",
                        "in": "path",
                        "description": "The account primary key.",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    },
                    {
                        "name": "role_id",
                        "in": "path",
                        "description": "The guest-role unique id.",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/GuestUserBody"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Guest already exist.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GuestUser"
                                }
                            }
                        }
                    },
                    "201": {
                        "description": "Guesting done.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GuestUser"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpJsonResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpJsonResponse"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpJsonResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Unknown internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpJsonResponse"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Subscriptions_Manager__Guest"
                ],
                "summary": "Uninvite user to perform a role to account",
                "operationId": "uninvite_guest_url",
                "parameters": [
                    {
                        "name": "x-mycelium-tenant-id",
                        "in": "header",
                        "description": "The tenant unique id.",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    },
                    {
                        "name": "account_id",
                        "in": "path",
                        "description": "The account primary key.",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    },
                    {
                        "name": "role_id",
                        "in": "path",
                        "description": "The guest-role unique id.",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    },
                    {
                        "name": "email",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Guest User uninvited."
                    },
                    "400": {
                        "description": "Guest User not uninvited.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpJsonResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpJsonResponse"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpJsonResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Unknown internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpJsonResponse"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/adm/rs/subscriptions-manager/tags/": {
            "post": {
                "tags": [
                    "Subscriptions_Manager__Tag"
                ],
                "summary": "Register a tag",
                "operationId": "register_tag_url",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateTagBody"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "Tag successfully registered.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Tag"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpJsonResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpJsonResponse"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpJsonResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Unknown internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpJsonResponse"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/adm/rs/subscriptions-manager/tags/{tag_id}": {
            "put": {
                "tags": [
                    "Subscriptions_Manager__Tag"
                ],
                "summary": "Update a tag",
                "operationId": "update_tag_url",
                "parameters": [
                    {
                        "name": "tag_id",
                        "in": "path",
                        "description": "The tag primary key.",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdateTagBody"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "Tag successfully registered.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Tag"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpJsonResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpJsonResponse"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpJsonResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Unknown internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpJsonResponse"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Subscriptions_Manager__Tag"
                ],
                "summary": "Delete a tag",
                "operationId": "delete_tag_url",
                "parameters": [
                    {
                        "name": "tag_id",
                        "in": "path",
                        "description": "The tag primary key.",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Tag successfully registered.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Tag"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpJsonResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpJsonResponse"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpJsonResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Unknown internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpJsonResponse"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/adm/rs/system-manager/error-codes/": {
            "get": {
                "tags": [
                    "System_Manager__Error_Code"
                ],
                "summary": "List available error codes.",
                "description": "List accounts with pagination. The `records` field contains a vector of\n`ErrorCode` model.\n\n",
                "operationId": "list_error_codes_url",
                "parameters": [
                    {
                        "name": "prefix",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": [
                                "string",
                                "null"
                            ]
                        }
                    },
                    {
                        "name": "code",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": [
                                "integer",
                                "null"
                            ],
                            "format": "int32"
                        }
                    },
                    {
                        "name": "isInternal",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": [
                                "boolean",
                                "null"
                            ]
                        }
                    },
                    {
                        "name": "skip",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": [
                                "integer",
                                "null"
                            ],
                            "format": "int32"
                        }
                    },
                    {
                        "name": "pageSize",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": [
                                "integer",
                                "null"
                            ],
                            "format": "int32"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Fetching success.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/ErrorCode"
                                    }
                                }
                            }
                        }
                    },
                    "204": {
                        "description": "Not found."
                    },
                    "401": {
                        "description": "Unauthorized.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpJsonResponse"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpJsonResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Unknown internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpJsonResponse"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "System_Manager__Error_Code"
                ],
                "summary": "Register a new error code.",
                "description": "This action is restricted to manager users.",
                "operationId": "register_error_code_url",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateErrorCodeBody"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "Error code created.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorCode"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Error code already exists.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpJsonResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpJsonResponse"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpJsonResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Unknown internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpJsonResponse"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/adm/rs/system-manager/error-codes/prefixes/{prefix}/codes/{code}": {
            "get": {
                "tags": [
                    "System_Manager__Error_Code"
                ],
                "summary": "Get an error code.",
                "description": "Get error code by prefix and code.\n\n",
                "operationId": "get_error_code_url",
                "parameters": [
                    {
                        "name": "prefix",
                        "in": "path",
                        "description": "The error prefix.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "code",
                        "in": "path",
                        "description": "The error code.",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Fetching success.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorCode"
                                }
                            }
                        }
                    },
                    "204": {
                        "description": "Not found."
                    },
                    "401": {
                        "description": "Unauthorized.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpJsonResponse"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpJsonResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Unknown internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpJsonResponse"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "System_Manager__Error_Code"
                ],
                "summary": "Delete an error code.",
                "description": "Delete error code by prefix and code.\n\n",
                "operationId": "delete_error_code_url",
                "parameters": [
                    {
                        "name": "prefix",
                        "in": "path",
                        "description": "The error prefix.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "code",
                        "in": "path",
                        "description": "The error code.",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Error code deleted."
                    },
                    "400": {
                        "description": "Error code not deleted.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpJsonResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpJsonResponse"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpJsonResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Unknown internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpJsonResponse"
                                }
                            }
                        }
                    }
                }
            },
            "patch": {
                "tags": [
                    "System_Manager__Error_Code"
                ],
                "summary": "Update an error code.",
                "description": "Update error code message and details.\n\n",
                "operationId": "update_error_code_message_and_details_url",
                "parameters": [
                    {
                        "name": "prefix",
                        "in": "path",
                        "description": "The error prefix.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "code",
                        "in": "path",
                        "description": "The error code.",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdateErrorCodeMessageAndDetailsBody"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "202": {
                        "description": "Error code updated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorCode"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Error code not updated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpJsonResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpJsonResponse"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpJsonResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Unknown internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpJsonResponse"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/adm/rs/system-manager/webhooks/": {
            "get": {
                "tags": [
                    "System_Manager__Webhook"
                ],
                "summary": "List webhooks",
                "operationId": "list_webhooks_url",
                "parameters": [
                    {
                        "name": "name",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": [
                                "string",
                                "null"
                            ]
                        }
                    },
                    {
                        "name": "trigger",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "oneOf": [
                                {
                                    "type": "null"
                                },
                                {
                                    "$ref": "#/components/schemas/WebHookTrigger"
                                }
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Fetching success.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/WebHook"
                                }
                            }
                        }
                    },
                    "204": {
                        "description": "Not found."
                    },
                    "401": {
                        "description": "Unauthorized.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpJsonResponse"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpJsonResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Unknown internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpJsonResponse"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "System_Manager__Webhook"
                ],
                "summary": "Create a webhook",
                "operationId": "crate_webhook_url",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateWebHookBody"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "WebHook already exists.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/WebHook"
                                }
                            }
                        }
                    },
                    "201": {
                        "description": "WebHook created.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/WebHook"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpJsonResponse"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpJsonResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Unknown internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpJsonResponse"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/adm/rs/system-manager/webhooks/{webhook_id}": {
            "put": {
                "tags": [
                    "System_Manager__Webhook"
                ],
                "summary": "Update a webhook",
                "operationId": "update_webhook_url",
                "parameters": [
                    {
                        "name": "webhook_id",
                        "in": "path",
                        "description": "The webhook primary key.",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdateWebHookBody"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "202": {
                        "description": "WebHook created.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/WebHook"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpJsonResponse"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpJsonResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Unknown internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpJsonResponse"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "System_Manager__Webhook"
                ],
                "summary": "Delete a webhook",
                "operationId": "delete_webhook_url",
                "parameters": [
                    {
                        "name": "webhook_id",
                        "in": "path",
                        "description": "The webhook primary key.",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Webhook deleted."
                    },
                    "400": {
                        "description": "Webhook not deleted.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpJsonResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpJsonResponse"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpJsonResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Unknown internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpJsonResponse"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/adm/rs/tenant-manager/accounts/{account_id}": {
            "delete": {
                "tags": [
                    "Tenant_Manager__Account"
                ],
                "summary": "Delete a subscription account.",
                "operationId": "delete_subscription_account_url",
                "parameters": [
                    {
                        "name": "x-mycelium-tenant-id",
                        "in": "header",
                        "description": "The tenant unique id.",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    },
                    {
                        "name": "account_id",
                        "in": "path",
                        "description": "The account primary key.",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Account deleted."
                    },
                    "400": {
                        "description": "Account deleted.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpJsonResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpJsonResponse"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpJsonResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Unknown internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpJsonResponse"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/adm/rs/tenant-manager/tags/": {
            "post": {
                "tags": [
                    "Tenant_Manager__Tag"
                ],
                "summary": "Create a user related account",
                "operationId": "register_tenant_tag_url",
                "parameters": [
                    {
                        "name": "x-mycelium-tenant-id",
                        "in": "header",
                        "description": "The tenant unique id.",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateTagBody"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "Tag successfully registered.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Tag"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpJsonResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpJsonResponse"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpJsonResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Unknown internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpJsonResponse"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/adm/rs/tenant-manager/tags/{tag_id}": {
            "put": {
                "tags": [
                    "Tenant_Manager__Tag"
                ],
                "summary": "Update a tag",
                "operationId": "update_tenant_tag_url",
                "parameters": [
                    {
                        "name": "x-mycelium-tenant-id",
                        "in": "header",
                        "description": "The tenant unique id.",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    },
                    {
                        "name": "tag_id",
                        "in": "path",
                        "description": "The tag primary key.",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateTagBody"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "Tag successfully registered.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Tag"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpJsonResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpJsonResponse"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpJsonResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Unknown internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpJsonResponse"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Tenant_Manager__Tag"
                ],
                "summary": "Delete a tag",
                "operationId": "delete_tenant_tag_url",
                "parameters": [
                    {
                        "name": "x-mycelium-tenant-id",
                        "in": "header",
                        "description": "The tenant unique id.",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    },
                    {
                        "name": "tag_id",
                        "in": "path",
                        "description": "The tag primary key.",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Tag successfully registered.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Tag"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpJsonResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpJsonResponse"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpJsonResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Unknown internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpJsonResponse"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/adm/rs/tenant-manager/tokens/tenants/{tenant_id}": {
            "post": {
                "tags": [
                    "Tenant_Manager__Token"
                ],
                "summary": "Create Tenant Associated Token",
                "operationId": "create_tenant_associated_connection_string_url",
                "parameters": [
                    {
                        "name": "tenant_id",
                        "in": "path",
                        "description": "The tenant unique id.",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateTokenBody"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "Token created.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CreateTokenResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpJsonResponse"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpJsonResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Unknown internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpJsonResponse"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/adm/rs/tenant-owner/accounts/": {
            "post": {
                "tags": [
                    "Tenant_Owner__Account"
                ],
                "summary": "Create a management account.",
                "operationId": "create_management_account_url",
                "parameters": [
                    {
                        "name": "x-mycelium-tenant-id",
                        "in": "header",
                        "description": "The tenant unique id.",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Account created.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Account"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Account already exists.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpJsonResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpJsonResponse"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpJsonResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Unknown internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpJsonResponse"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/adm/rs/tenant-owner/meta/": {
            "put": {
                "tags": [
                    "Tenant_Owner__Meta"
                ],
                "summary": "Update a tenant metadata",
                "operationId": "update_tenant_meta_url",
                "parameters": [
                    {
                        "name": "x-mycelium-tenant-id",
                        "in": "header",
                        "description": "The tenant unique id.",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateTenantMetaBody"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "202": {
                        "description": "Meta updated."
                    },
                    "400": {
                        "description": "Meta not updated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpJsonResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpJsonResponse"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpJsonResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Unknown internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpJsonResponse"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Tenant_Owner__Meta"
                ],
                "operationId": "create_tenant_meta_url",
                "parameters": [
                    {
                        "name": "x-mycelium-tenant-id",
                        "in": "header",
                        "description": "The tenant unique id.",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateTenantMetaBody"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "Meta created.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HashMap"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Meta already exists.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpJsonResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpJsonResponse"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpJsonResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Unknown internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpJsonResponse"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Tenant_Owner__Meta"
                ],
                "summary": "Delete a tenant metadata",
                "operationId": "delete_tenant_meta_url",
                "parameters": [
                    {
                        "name": "x-mycelium-tenant-id",
                        "in": "header",
                        "description": "The tenant unique id.",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/DeleteTenantMetaBody"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "204": {
                        "description": "Meta deleted."
                    },
                    "400": {
                        "description": "Meta not deleted.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpJsonResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpJsonResponse"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpJsonResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Unknown internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpJsonResponse"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/adm/rs/tenant-owner/owners/": {
            "post": {
                "tags": [
                    "Tenant_Owner__Owner"
                ],
                "summary": "Guest a user to work as a tenant owner",
                "operationId": "guest_tenant_owner_url",
                "parameters": [
                    {
                        "name": "x-mycelium-tenant-id",
                        "in": "header",
                        "description": "The tenant unique id.",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/GuestTenantOwnerBody"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "Owner created.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TenantOwnerConnection"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Owner already exists.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpJsonResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpJsonResponse"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpJsonResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Unknown internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpJsonResponse"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Tenant_Owner__Owner"
                ],
                "summary": "Revoke a user from working as a tenant owner",
                "operationId": "revoke_tenant_owner_url",
                "parameters": [
                    {
                        "name": "x-mycelium-tenant-id",
                        "in": "header",
                        "description": "The tenant unique id.",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/GuestTenantOwnerBody"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "204": {
                        "description": "Owner deleted."
                    },
                    "400": {
                        "description": "Owner deleted.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpJsonResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpJsonResponse"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpJsonResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Unknown internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpJsonResponse"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/adm/rs/tenant-owner/tenants/{tenant_id}/": {
            "patch": {
                "tags": [
                    "Tenant_Owner__Tenant"
                ],
                "summary": "Update the name and description of a tenant",
                "operationId": "update_tenant_name_and_description_url",
                "parameters": [
                    {
                        "name": "tenant_id",
                        "in": "path",
                        "description": "The tenant unique id.",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdateTenantNameAndDescriptionBody"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "202": {
                        "description": "Tenant updated."
                    },
                    "400": {
                        "description": "Tenant not updated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpJsonResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpJsonResponse"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpJsonResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Unknown internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpJsonResponse"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/adm/rs/tenant-owner/tenants/{tenant_id}/archive": {
            "patch": {
                "tags": [
                    "Tenant_Owner__Tenant"
                ],
                "summary": "Include an archive status to a tenant",
                "operationId": "update_tenant_archiving_status_url",
                "parameters": [
                    {
                        "name": "tenant_id",
                        "in": "path",
                        "description": "The tenant unique id.",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdateTenantArchivingBody"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "202": {
                        "description": "Tenant updated."
                    },
                    "400": {
                        "description": "Tenant not updated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpJsonResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpJsonResponse"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpJsonResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Unknown internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpJsonResponse"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/adm/rs/tenant-owner/tenants/{tenant_id}/trash": {
            "patch": {
                "tags": [
                    "Tenant_Owner__Tenant"
                ],
                "summary": "Include a trash status to a tenant",
                "operationId": "update_tenant_trashing_status_url",
                "parameters": [
                    {
                        "name": "tenant_id",
                        "in": "path",
                        "description": "The tenant unique id.",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdateTenantTrashingBody"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "202": {
                        "description": "Tenant updated."
                    },
                    "400": {
                        "description": "Tenant not updated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpJsonResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpJsonResponse"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpJsonResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Unknown internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpJsonResponse"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/adm/rs/tenant-owner/tenants/{tenant_id}/verify": {
            "patch": {
                "tags": [
                    "Tenant_Owner__Tenant"
                ],
                "summary": "Include a verified status to a tenant",
                "operationId": "update_tenant_verifying_status_url",
                "parameters": [
                    {
                        "name": "tenant_id",
                        "in": "path",
                        "description": "The tenant unique id.",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdateTenantVerifyingBody"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "202": {
                        "description": "Tenant updated."
                    },
                    "400": {
                        "description": "Tenant not updated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpJsonResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpJsonResponse"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpJsonResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Unknown internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpJsonResponse"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/adm/rs/users-manager/accounts/{account}/activate": {
            "patch": {
                "tags": [
                    "Users_Manager__Account"
                ],
                "summary": "Activate account",
                "description": "Any account could be activated and deactivated. This action turn an\naccount active.",
                "operationId": "activate_account_url",
                "parameters": [
                    {
                        "name": "account",
                        "in": "path",
                        "description": "The account primary key.",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "description": "Account activated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Account"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Account not activated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpJsonResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpJsonResponse"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpJsonResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Unknown internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpJsonResponse"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/adm/rs/users-manager/accounts/{account}/approve": {
            "patch": {
                "tags": [
                    "Users_Manager__Account"
                ],
                "summary": "Approve account after creation",
                "description": "New accounts should be approved after has permissions to perform\noperation on the system. These endpoint should approve such account.",
                "operationId": "approve_account_url",
                "parameters": [
                    {
                        "name": "account",
                        "in": "path",
                        "description": "The account primary key.",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "description": "Account approved.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Account"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Account not approved.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpJsonResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpJsonResponse"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpJsonResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Unknown internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpJsonResponse"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/adm/rs/users-manager/accounts/{account}/archive": {
            "patch": {
                "tags": [
                    "Users_Manager__Account"
                ],
                "summary": "Archive account",
                "description": "Set target account as archived.",
                "operationId": "archive_account_url",
                "parameters": [
                    {
                        "name": "account",
                        "in": "path",
                        "description": "The account primary key.",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "description": "Account activated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Account"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Account not activated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpJsonResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpJsonResponse"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpJsonResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Unknown internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpJsonResponse"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/adm/rs/users-manager/accounts/{account}/deactivate": {
            "patch": {
                "tags": [
                    "Users_Manager__Account"
                ],
                "summary": "Deactivate account",
                "description": "Any account could be activated and deactivated. This action turn an\naccount deactivated.",
                "operationId": "deactivate_account_url",
                "parameters": [
                    {
                        "name": "account",
                        "in": "path",
                        "description": "The account primary key.",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "description": "Account activated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Account"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Account not activated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpJsonResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpJsonResponse"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpJsonResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Unknown internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpJsonResponse"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/adm/rs/users-manager/accounts/{account}/disapprove": {
            "patch": {
                "tags": [
                    "Users_Manager__Account"
                ],
                "summary": "Disapprove account after creation",
                "description": "Also approved account should be disapproved at any time. These endpoint\nwork for this.",
                "operationId": "disapprove_account_url",
                "parameters": [
                    {
                        "name": "account",
                        "in": "path",
                        "description": "The account primary key.",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "description": "Account disapproved.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Account"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Account not disapproved.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpJsonResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpJsonResponse"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpJsonResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Unknown internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpJsonResponse"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/adm/rs/users-manager/accounts/{account}/unarchive": {
            "patch": {
                "tags": [
                    "Users_Manager__Account"
                ],
                "summary": "Unarchive account",
                "description": "Set target account as un-archived.",
                "operationId": "unarchive_account_url",
                "parameters": [
                    {
                        "name": "account",
                        "in": "path",
                        "description": "The account primary key.",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "description": "Account activated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Account"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Account not activated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpJsonResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpJsonResponse"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpJsonResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Unknown internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpJsonResponse"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/adm/su/managers/tenants/": {
            "get": {
                "tags": [
                    "Managers__Tenants"
                ],
                "summary": "List tenants",
                "operationId": "list_tenant_url",
                "parameters": [
                    {
                        "name": "name",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": [
                                "string",
                                "null"
                            ]
                        }
                    },
                    {
                        "name": "owner",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": [
                                "string",
                                "null"
                            ],
                            "format": "uuid"
                        }
                    },
                    {
                        "name": "metadataKey",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "oneOf": [
                                {
                                    "type": "null"
                                },
                                {
                                    "$ref": "#/components/schemas/TenantMetaKey"
                                }
                            ]
                        }
                    },
                    {
                        "name": "statusVerified",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": [
                                "boolean",
                                "null"
                            ]
                        }
                    },
                    {
                        "name": "statusArchived",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": [
                                "boolean",
                                "null"
                            ]
                        }
                    },
                    {
                        "name": "statusTrashed",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": [
                                "boolean",
                                "null"
                            ]
                        }
                    },
                    {
                        "name": "tagValue",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": [
                                "string",
                                "null"
                            ]
                        }
                    },
                    {
                        "name": "tagMeta",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": [
                                "string",
                                "null"
                            ]
                        }
                    },
                    {
                        "name": "skip",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": [
                                "integer",
                                "null"
                            ],
                            "format": "int32"
                        }
                    },
                    {
                        "name": "pageSize",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": [
                                "integer",
                                "null"
                            ],
                            "format": "int32"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Fetching success.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/Tenant"
                                    }
                                }
                            }
                        }
                    },
                    "204": {
                        "description": "Not found."
                    },
                    "401": {
                        "description": "Unauthorized.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpJsonResponse"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpJsonResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Unknown internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpJsonResponse"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Managers__Tenants"
                ],
                "summary": "Create a new tenant",
                "operationId": "create_tenant_url",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateTenantBody"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "Tenant created.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Tenant"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Tenant already exists.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpJsonResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpJsonResponse"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpJsonResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Unknown internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpJsonResponse"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/adm/su/managers/tenants/{id}": {
            "delete": {
                "tags": [
                    "Managers__Tenants"
                ],
                "summary": "Delete a tenant",
                "operationId": "delete_tenant_url",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The tenant primary key.",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Tenant successfully registered.",
                        "content": {
                            "text/plain": {
                                "schema": {
                                    "type": "string",
                                    "format": "uuid"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpJsonResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpJsonResponse"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpJsonResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Unknown internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpJsonResponse"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/adm/su/managers/tenants/{id}/owner/{owner_id}": {
            "patch": {
                "tags": [
                    "Managers__Tenants"
                ],
                "summary": "Include a tenant owner",
                "description": "A single tenant can have multiple owners. This endpoint allows to include a\nnew owner to the tenant.\n\n",
                "operationId": "include_tenant_owner_url",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The tenant primary key.",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    },
                    {
                        "name": "owner_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Owner included.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TenantOwnerConnection"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpJsonResponse"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpJsonResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Unknown internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpJsonResponse"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/adm/su/staffs/accounts/{account}/downgrade": {
            "patch": {
                "tags": [
                    "Staffs__Accounts"
                ],
                "summary": "Downgrade account privileges",
                "description": "Decrease permissions of the refereed account.",
                "operationId": "downgrade_account_privileges_url",
                "parameters": [
                    {
                        "name": "account",
                        "in": "path",
                        "description": "The account primary key.",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/DowngradeAccountPrivilegesBody"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "202": {
                        "description": "Account downgraded.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Account"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Account not downgraded.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpJsonResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpJsonResponse"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpJsonResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Unknown internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpJsonResponse"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/adm/su/staffs/accounts/{account}/upgrade": {
            "patch": {
                "tags": [
                    "Staffs__Accounts"
                ],
                "summary": "Upgrade account privileges",
                "description": "Increase permissions of the refereed account.",
                "operationId": "upgrade_account_privileges_url",
                "parameters": [
                    {
                        "name": "account",
                        "in": "path",
                        "description": "The account primary key.",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpgradeAccountPrivilegesBody"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "202": {
                        "description": "Account upgraded.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Account"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Account not upgraded.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpJsonResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpJsonResponse"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpJsonResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Unknown internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpJsonResponse"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/adm/svc/accounts/": {
            "post": {
                "tags": [
                    "Service__Account"
                ],
                "summary": "Create Subscription Account",
                "description": "Subscription accounts represents shared entities, like institutions,\ngroups, but not real persons.",
                "operationId": "create_subscription_account_service_url",
                "parameters": [
                    {
                        "name": "x-mycelium-connection-string",
                        "in": "header",
                        "description": "The connection string to the role-scoped database.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateSubscriptionAccountBody"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "Account created.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Account"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Account already exists.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpJsonResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpJsonResponse"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpJsonResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Unknown internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpJsonResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "ConnectionString": []
                    }
                ]
            }
        },
        "/adm/svc/auxiliary/actors": {
            "get": {
                "tags": [
                    "Service__Auxiliary"
                ],
                "summary": "Provide a datetime with the server's timezone.",
                "description": "This is usual during system checks.",
                "operationId": "list_actors_url",
                "responses": {
                    "200": {
                        "description": "The current datetime with timezone.",
                        "content": {
                            "text/plain": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {}
                ]
            }
        },
        "/adm/svc/guests/roles/{role_id}": {
            "post": {
                "tags": [
                    "Service__Guest"
                ],
                "summary": "Guest a user to work on account.",
                "description": "This action gives the ability of the target account (specified through\nthe `account` argument) to perform actions specified in the `role`\npath argument.",
                "operationId": "guest_to_default_account_url",
                "parameters": [
                    {
                        "name": "role_id",
                        "in": "path",
                        "description": "The guest-role unique id.",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    },
                    {
                        "name": "x-mycelium-connection-string",
                        "in": "header",
                        "description": "The connection string to the role-scoped database.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/GuestUserBody"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Guest already exist.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Account"
                                }
                            }
                        }
                    },
                    "201": {
                        "description": "Guesting done.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Account"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpJsonResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpJsonResponse"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpJsonResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Unknown internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpJsonResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "ConnectionString": []
                    }
                ]
            }
        },
        "/health/": {
            "get": {
                "tags": [
                    "Index__Heath_Check"
                ],
                "summary": "Provide a health check endpoint.",
                "description": "If the server is running it returns a 200 response with a JSON body\ncontaining the success message.",
                "operationId": "health_url",
                "responses": {
                    "200": {
                        "description": "Health check passed.",
                        "content": {
                            "text/plain": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/health/now": {
            "get": {
                "tags": [
                    "Index__Heath_Check"
                ],
                "summary": "Provide a datetime with the server's timezone.",
                "description": "This is usual during system checks.",
                "operationId": "now_url",
                "responses": {
                    "200": {
                        "description": "The current datetime with timezone.",
                        "content": {
                            "text/plain": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        }
    },
    "components": {
        "schemas": {
            "APIAccountType": {
                "type": "string",
                "enum": [
                    "staff",
                    "manager",
                    "user",
                    "subscription",
                    "standardRoleAssociated",
                    "tenantManager"
                ]
            },
            "Account": {
                "type": "object",
                "required": [
                    "name",
                    "slug",
                    "isActive",
                    "isChecked",
                    "isArchived",
                    "isDefault",
                    "owners",
                    "accountType",
                    "created"
                ],
                "properties": {
                    "id": {
                        "type": [
                            "string",
                            "null"
                        ],
                        "format": "uuid"
                    },
                    "name": {
                        "type": "string"
                    },
                    "slug": {
                        "type": "string"
                    },
                    "tags": {
                        "type": [
                            "array",
                            "null"
                        ],
                        "items": {
                            "$ref": "#/components/schemas/Tag"
                        }
                    },
                    "isActive": {
                        "type": "boolean"
                    },
                    "isChecked": {
                        "type": "boolean"
                    },
                    "isArchived": {
                        "type": "boolean"
                    },
                    "verboseStatus": {
                        "oneOf": [
                            {
                                "type": "null"
                            },
                            {
                                "$ref": "#/components/schemas/VerboseStatus"
                            }
                        ]
                    },
                    "isDefault": {
                        "type": "boolean"
                    },
                    "owners": {
                        "$ref": "#/components/schemas/Children_User_String",
                        "description": "The Account Owners\n\nThis is the list of account owners. The account owners are the users who\nhave the account owner role."
                    },
                    "accountType": {
                        "$ref": "#/components/schemas/AccountTypeV2",
                        "description": "The Account Type\n\nAccount type is the type of the account. The account type is used to\ncategorize the account."
                    },
                    "guestUsers": {
                        "oneOf": [
                            {
                                "type": "null"
                            },
                            {
                                "$ref": "#/components/schemas/Children_GuestUser_String",
                                "description": "The Account Guest Users\n\nThis is the list of guest users of the account."
                            }
                        ]
                    },
                    "created": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "updated": {
                        "type": [
                            "string",
                            "null"
                        ],
                        "format": "date-time"
                    }
                }
            },
            "AccountTypeV2": {
                "oneOf": [
                    {
                        "type": "string",
                        "description": "Staff account type\n\nStaff account type is a special account type that is used to represent\nstaff members in the system.",
                        "enum": [
                            "staff"
                        ]
                    },
                    {
                        "type": "string",
                        "description": "Manager account type\n\nManager account type is a special account type that is used to represent\nmanagers in the system.",
                        "enum": [
                            "manager"
                        ]
                    },
                    {
                        "type": "string",
                        "description": "User account type\n\nUser account type is the default account type for users in the system.",
                        "enum": [
                            "user"
                        ]
                    },
                    {
                        "type": "object",
                        "description": "Subscription account type\n\nA subscription account is a special account type that is used to\nrepresent legal entities that have a subscription to the service.",
                        "required": [
                            "subscription"
                        ],
                        "properties": {
                            "subscription": {
                                "type": "object",
                                "description": "Subscription account type\n\nA subscription account is a special account type that is used to\nrepresent legal entities that have a subscription to the service.",
                                "required": [
                                    "tenantId"
                                ],
                                "properties": {
                                    "tenantId": {
                                        "type": "string",
                                        "format": "uuid"
                                    }
                                }
                            }
                        }
                    },
                    {
                        "type": "object",
                        "description": "Role associated account type\n\nRole associated account type is an special type of account, created to\nconnect users to a specific standard role in the application.",
                        "required": [
                            "standardRoleAssociated"
                        ],
                        "properties": {
                            "standardRoleAssociated": {
                                "type": "object",
                                "description": "Role associated account type\n\nRole associated account type is an special type of account, created to\nconnect users to a specific standard role in the application.",
                                "required": [
                                    "tenantId",
                                    "roleName",
                                    "roleId"
                                ],
                                "properties": {
                                    "tenantId": {
                                        "type": "string",
                                        "format": "uuid"
                                    },
                                    "roleName": {
                                        "$ref": "#/components/schemas/ActorName"
                                    },
                                    "roleId": {
                                        "type": "string",
                                        "format": "uuid"
                                    }
                                }
                            }
                        }
                    },
                    {
                        "type": "object",
                        "required": [
                            "tenantManager"
                        ],
                        "properties": {
                            "tenantManager": {
                                "type": "object",
                                "required": [
                                    "tenantId"
                                ],
                                "properties": {
                                    "tenantId": {
                                        "type": "string",
                                        "format": "uuid"
                                    }
                                }
                            }
                        }
                    }
                ]
            },
            "ActorName": {
                "oneOf": [
                    {
                        "type": "object",
                        "required": [
                            "customRole"
                        ],
                        "properties": {
                            "customRole": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "type": "string",
                        "description": "Beginner\n\nThis actor is used when no role is assigned to the user.",
                        "enum": [
                            "beginner"
                        ]
                    },
                    {
                        "type": "string",
                        "description": "Subscriptions manager\n\nThis actor is responsible for managing subscriptions accounts.",
                        "enum": [
                            "subscriptionsManager"
                        ]
                    },
                    {
                        "type": "string",
                        "description": "Users account manager\n\nThis actor is responsible for managing users accounts.",
                        "enum": [
                            "usersManager"
                        ]
                    },
                    {
                        "type": "string",
                        "description": "Account manager\n\nThis actor is responsible for managing a single subscription account.",
                        "enum": [
                            "accountManager"
                        ]
                    },
                    {
                        "type": "string",
                        "description": "Guest manager\n\nThis actor is responsible for managing roles, guest-roles, and\nguest-users.",
                        "enum": [
                            "guestManager"
                        ]
                    },
                    {
                        "type": "string",
                        "description": "System manager\n\nThis actor is responsible for managing system, including error messages,\nwebhooks, and others.",
                        "enum": [
                            "systemManager"
                        ]
                    },
                    {
                        "type": "string",
                        "description": "Tenant owner\n\nThis actor is responsible for managing tenant metadata, tags, and owner.",
                        "enum": [
                            "tenantOwner"
                        ]
                    },
                    {
                        "type": "string",
                        "description": "Tenant manager\n\nThis actor is responsible for managing tenants.",
                        "enum": [
                            "tenantManager"
                        ]
                    },
                    {
                        "type": "string",
                        "description": "Service\n\nThis is a service entity.",
                        "enum": [
                            "service"
                        ]
                    }
                ]
            },
            "AzureLoginResponse": {
                "type": "object",
                "required": [
                    "authorizeUrl"
                ],
                "properties": {
                    "authorizeUrl": {
                        "type": "string"
                    }
                }
            },
            "CallbackResponse": {
                "type": "object",
                "required": [
                    "accessToken",
                    "tokenType"
                ],
                "properties": {
                    "accessToken": {
                        "type": "string"
                    },
                    "tokenType": {
                        "type": "string"
                    }
                }
            },
            "CheckEmailStatusBody": {
                "type": "object",
                "required": [
                    "email"
                ],
                "properties": {
                    "email": {
                        "type": "string"
                    }
                }
            },
            "CheckTokenBody": {
                "type": "object",
                "required": [
                    "token",
                    "email"
                ],
                "properties": {
                    "token": {
                        "type": "string"
                    },
                    "email": {
                        "type": "string"
                    }
                }
            },
            "CheckUserCredentialsBody": {
                "type": "object",
                "required": [
                    "email",
                    "password"
                ],
                "properties": {
                    "email": {
                        "type": "string"
                    },
                    "password": {
                        "type": "string"
                    }
                }
            },
            "Children_Account_String": {
                "oneOf": [
                    {
                        "type": "object",
                        "required": [
                            "records"
                        ],
                        "properties": {
                            "records": {
                                "type": "array",
                                "items": {
                                    "type": "object",
                                    "required": [
                                        "name",
                                        "slug",
                                        "isActive",
                                        "isChecked",
                                        "isArchived",
                                        "isDefault",
                                        "owners",
                                        "accountType",
                                        "created"
                                    ],
                                    "properties": {
                                        "id": {
                                            "type": [
                                                "string",
                                                "null"
                                            ],
                                            "format": "uuid"
                                        },
                                        "name": {
                                            "type": "string"
                                        },
                                        "slug": {
                                            "type": "string"
                                        },
                                        "tags": {
                                            "type": [
                                                "array",
                                                "null"
                                            ],
                                            "items": {
                                                "$ref": "#/components/schemas/Tag"
                                            }
                                        },
                                        "isActive": {
                                            "type": "boolean"
                                        },
                                        "isChecked": {
                                            "type": "boolean"
                                        },
                                        "isArchived": {
                                            "type": "boolean"
                                        },
                                        "verboseStatus": {
                                            "oneOf": [
                                                {
                                                    "type": "null"
                                                },
                                                {
                                                    "$ref": "#/components/schemas/VerboseStatus"
                                                }
                                            ]
                                        },
                                        "isDefault": {
                                            "type": "boolean"
                                        },
                                        "owners": {
                                            "$ref": "#/components/schemas/Children_User_String",
                                            "description": "The Account Owners\n\nThis is the list of account owners. The account owners are the users who\nhave the account owner role."
                                        },
                                        "accountType": {
                                            "$ref": "#/components/schemas/AccountTypeV2",
                                            "description": "The Account Type\n\nAccount type is the type of the account. The account type is used to\ncategorize the account."
                                        },
                                        "guestUsers": {
                                            "oneOf": [
                                                {
                                                    "type": "null"
                                                },
                                                {
                                                    "$ref": "#/components/schemas/Children_GuestUser_String",
                                                    "description": "The Account Guest Users\n\nThis is the list of guest users of the account."
                                                }
                                            ]
                                        },
                                        "created": {
                                            "type": "string",
                                            "format": "date-time"
                                        },
                                        "updated": {
                                            "type": [
                                                "string",
                                                "null"
                                            ],
                                            "format": "date-time"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    {
                        "type": "object",
                        "required": [
                            "ids"
                        ],
                        "properties": {
                            "ids": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                ],
                "description": "A children record\n\nThis enumerator allow represents the children elements using their primary\nkeys (Ids option) or the true records (Record option)."
            },
            "Children_GuestRole_String": {
                "oneOf": [
                    {
                        "type": "object",
                        "required": [
                            "records"
                        ],
                        "properties": {
                            "records": {
                                "type": "array",
                                "items": {
                                    "type": "object",
                                    "required": [
                                        "name",
                                        "role",
                                        "permission"
                                    ],
                                    "properties": {
                                        "id": {
                                            "type": [
                                                "string",
                                                "null"
                                            ],
                                            "format": "uuid"
                                        },
                                        "name": {
                                            "type": "string"
                                        },
                                        "description": {
                                            "type": [
                                                "string",
                                                "null"
                                            ]
                                        },
                                        "role": {
                                            "$ref": "#/components/schemas/Parent_Role_String"
                                        },
                                        "permission": {
                                            "$ref": "#/components/schemas/Permission"
                                        },
                                        "children": {
                                            "oneOf": [
                                                {
                                                    "type": "null"
                                                },
                                                {
                                                    "$ref": "#/components/schemas/Children_GuestRole_String",
                                                    "description": "Children roles represents guest roles that are children of the current\nrole, and should be used to determine the allowed roles for the role\nowner guest other users."
                                                }
                                            ]
                                        }
                                    }
                                }
                            }
                        }
                    },
                    {
                        "type": "object",
                        "required": [
                            "ids"
                        ],
                        "properties": {
                            "ids": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                ],
                "description": "A children record\n\nThis enumerator allow represents the children elements using their primary\nkeys (Ids option) or the true records (Record option)."
            },
            "Children_GuestUser_String": {
                "oneOf": [
                    {
                        "type": "object",
                        "required": [
                            "records"
                        ],
                        "properties": {
                            "records": {
                                "type": "array",
                                "items": {
                                    "type": "object",
                                    "required": [
                                        "email",
                                        "guestRole",
                                        "created"
                                    ],
                                    "properties": {
                                        "id": {
                                            "type": [
                                                "string",
                                                "null"
                                            ],
                                            "format": "uuid"
                                        },
                                        "email": {
                                            "$ref": "#/components/schemas/Email"
                                        },
                                        "guestRole": {
                                            "$ref": "#/components/schemas/Parent_GuestRole_String"
                                        },
                                        "created": {
                                            "type": "string",
                                            "format": "date-time"
                                        },
                                        "updated": {
                                            "type": [
                                                "string",
                                                "null"
                                            ],
                                            "format": "date-time"
                                        },
                                        "accounts": {
                                            "oneOf": [
                                                {
                                                    "type": "null"
                                                },
                                                {
                                                    "$ref": "#/components/schemas/Children_Account_String"
                                                }
                                            ]
                                        }
                                    }
                                }
                            }
                        }
                    },
                    {
                        "type": "object",
                        "required": [
                            "ids"
                        ],
                        "properties": {
                            "ids": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                ],
                "description": "A children record\n\nThis enumerator allow represents the children elements using their primary\nkeys (Ids option) or the true records (Record option)."
            },
            "Children_Owner_String": {
                "oneOf": [
                    {
                        "type": "object",
                        "required": [
                            "records"
                        ],
                        "properties": {
                            "records": {
                                "type": "array",
                                "items": {
                                    "type": "object",
                                    "required": [
                                        "id",
                                        "email",
                                        "isPrincipal"
                                    ],
                                    "properties": {
                                        "id": {
                                            "type": "string",
                                            "format": "uuid"
                                        },
                                        "email": {
                                            "type": "string",
                                            "description": "The owner email\n\nThe email of the user that administrate the profile. Email denotes the\ncentral part of the profile management. Email should be used to collect\nlicensed IDs and perform guest operations. Thus, it should be unique in\nthe Mycelium platform."
                                        },
                                        "firstName": {
                                            "type": [
                                                "string",
                                                "null"
                                            ],
                                            "description": "The owner first name"
                                        },
                                        "lastName": {
                                            "type": [
                                                "string",
                                                "null"
                                            ],
                                            "description": "The owner last name"
                                        },
                                        "username": {
                                            "type": [
                                                "string",
                                                "null"
                                            ],
                                            "description": "The owner username"
                                        },
                                        "isPrincipal": {
                                            "type": "boolean",
                                            "description": "If the owner is the principal account owner"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    {
                        "type": "object",
                        "required": [
                            "ids"
                        ],
                        "properties": {
                            "ids": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                ],
                "description": "A children record\n\nThis enumerator allow represents the children elements using their primary\nkeys (Ids option) or the true records (Record option)."
            },
            "Children_User_String": {
                "oneOf": [
                    {
                        "type": "object",
                        "required": [
                            "records"
                        ],
                        "properties": {
                            "records": {
                                "type": "array",
                                "items": {
                                    "type": "object",
                                    "required": [
                                        "username",
                                        "email",
                                        "isActive",
                                        "created",
                                        "isPrincipal",
                                        "mfa"
                                    ],
                                    "properties": {
                                        "id": {
                                            "type": [
                                                "string",
                                                "null"
                                            ],
                                            "format": "uuid"
                                        },
                                        "username": {
                                            "type": "string"
                                        },
                                        "email": {
                                            "$ref": "#/components/schemas/Email"
                                        },
                                        "firstName": {
                                            "type": [
                                                "string",
                                                "null"
                                            ]
                                        },
                                        "lastName": {
                                            "type": [
                                                "string",
                                                "null"
                                            ]
                                        },
                                        "isActive": {
                                            "type": "boolean"
                                        },
                                        "created": {
                                            "type": "string",
                                            "format": "date-time"
                                        },
                                        "updated": {
                                            "type": [
                                                "string",
                                                "null"
                                            ],
                                            "format": "date-time"
                                        },
                                        "account": {
                                            "oneOf": [
                                                {
                                                    "type": "null"
                                                },
                                                {
                                                    "$ref": "#/components/schemas/Parent_Account_String"
                                                }
                                            ]
                                        },
                                        "isPrincipal": {
                                            "type": "boolean",
                                            "description": "If the user is the principal user of the account.\n\nThe principal user contains information of the first email that created\nthe account. This information is used to send emails to the principal\nuser.\n\nPrincipal users should not be deleted or deactivated if the account has\nother users connected.\n"
                                        },
                                        "provider": {
                                            "oneOf": [
                                                {
                                                    "type": "null"
                                                },
                                                {
                                                    "$ref": "#/components/schemas/Provider",
                                                    "description": "The user provider.\n\nProvider is a optional field but it should be None only during the\ncollection of the user data from database. Such None initialization\nprevents that password hashes and salts should be exposed to the\noutside.\n\n! Thus, be careful on change this field.\n"
                                                }
                                            ]
                                        },
                                        "mfa": {
                                            "$ref": "#/components/schemas/MultiFactorAuthentication",
                                            "description": "The user TOTP\n\nWhen enabled the user has verified the TOTP and the auth url is set.\n"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    {
                        "type": "object",
                        "required": [
                            "ids"
                        ],
                        "properties": {
                            "ids": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                ],
                "description": "A children record\n\nThis enumerator allow represents the children elements using their primary\nkeys (Ids option) or the true records (Record option)."
            },
            "CreateDefaultAccountBody": {
                "type": "object",
                "required": [
                    "name"
                ],
                "properties": {
                    "name": {
                        "type": "string"
                    }
                }
            },
            "CreateDefaultUserBody": {
                "type": "object",
                "required": [
                    "email"
                ],
                "properties": {
                    "email": {
                        "type": "string"
                    },
                    "firstName": {
                        "type": [
                            "string",
                            "null"
                        ]
                    },
                    "lastName": {
                        "type": [
                            "string",
                            "null"
                        ]
                    },
                    "password": {
                        "type": [
                            "string",
                            "null"
                        ]
                    }
                }
            },
            "CreateErrorCodeBody": {
                "type": "object",
                "required": [
                    "prefix",
                    "message",
                    "isInternal"
                ],
                "properties": {
                    "prefix": {
                        "type": "string"
                    },
                    "message": {
                        "type": "string"
                    },
                    "details": {
                        "type": [
                            "string",
                            "null"
                        ]
                    },
                    "isInternal": {
                        "type": "boolean"
                    }
                }
            },
            "CreateGuestRoleBody": {
                "type": "object",
                "required": [
                    "name",
                    "description",
                    "guestRoleId"
                ],
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "guestRoleId": {
                        "type": "string",
                        "format": "uuid"
                    }
                }
            },
            "CreateRoleBody": {
                "type": "object",
                "required": [
                    "name",
                    "description"
                ],
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    }
                }
            },
            "CreateSubscriptionAccountBody": {
                "type": "object",
                "required": [
                    "name"
                ],
                "properties": {
                    "name": {
                        "type": "string"
                    }
                }
            },
            "CreateTagBody": {
                "type": "object",
                "required": [
                    "value",
                    "meta"
                ],
                "properties": {
                    "value": {
                        "type": "string"
                    },
                    "meta": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "propertyNames": {
                            "type": "string"
                        }
                    }
                }
            },
            "CreateTenantBody": {
                "type": "object",
                "required": [
                    "name",
                    "ownerId"
                ],
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name of the tenant"
                    },
                    "description": {
                        "type": [
                            "string",
                            "null"
                        ],
                        "description": "The description of the tenant"
                    },
                    "ownerId": {
                        "type": "string",
                        "format": "uuid",
                        "description": "The owner of the tenant"
                    }
                }
            },
            "CreateTenantMetaBody": {
                "type": "object",
                "required": [
                    "key",
                    "value"
                ],
                "properties": {
                    "key": {
                        "$ref": "#/components/schemas/TenantMetaKey"
                    },
                    "value": {
                        "type": "string"
                    }
                }
            },
            "CreateTokenBody": {
                "type": "object",
                "required": [
                    "permissionedRoles",
                    "expiration"
                ],
                "properties": {
                    "permissionedRoles": {
                        "type": "array",
                        "items": {
                            "type": "array",
                            "items": false,
                            "prefixItems": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "string",
                                    "enum": [
                                        "read",
                                        "write",
                                        "readWrite"
                                    ]
                                }
                            ]
                        }
                    },
                    "expiration": {
                        "type": "integer",
                        "format": "int64"
                    }
                }
            },
            "CreateTokenResponse": {
                "type": "object",
                "required": [
                    "connectionString"
                ],
                "properties": {
                    "connectionString": {
                        "type": "string"
                    }
                }
            },
            "CreateWebHookBody": {
                "type": "object",
                "required": [
                    "name",
                    "url",
                    "trigger"
                ],
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "description": {
                        "type": [
                            "string",
                            "null"
                        ]
                    },
                    "url": {
                        "type": "string"
                    },
                    "trigger": {
                        "$ref": "#/components/schemas/WebHookTrigger"
                    },
                    "secret": {
                        "oneOf": [
                            {
                                "type": "null"
                            },
                            {
                                "$ref": "#/components/schemas/WebHookSecret"
                            }
                        ]
                    }
                }
            },
            "DeleteTenantMetaBody": {
                "type": "object",
                "required": [
                    "key"
                ],
                "properties": {
                    "key": {
                        "$ref": "#/components/schemas/TenantMetaKey"
                    }
                }
            },
            "DowngradeAccountPrivilegesBody": {
                "type": "object",
                "required": [
                    "to"
                ],
                "properties": {
                    "to": {
                        "$ref": "#/components/schemas/DowngradeTargetAccountType"
                    }
                }
            },
            "DowngradeTargetAccountType": {
                "type": "string",
                "enum": [
                    "manager",
                    "user"
                ]
            },
            "Email": {
                "type": "object",
                "required": [
                    "username",
                    "domain"
                ],
                "properties": {
                    "username": {
                        "type": "string"
                    },
                    "domain": {
                        "type": "string"
                    }
                }
            },
            "EmailRegistrationStatus": {
                "oneOf": [
                    {
                        "type": "object",
                        "required": [
                            "registeredAndInternal"
                        ],
                        "properties": {
                            "registeredAndInternal": {
                                "$ref": "#/components/schemas/RegisteredWithProvider"
                            }
                        }
                    },
                    {
                        "type": "object",
                        "required": [
                            "registeredButExternal"
                        ],
                        "properties": {
                            "registeredButExternal": {
                                "$ref": "#/components/schemas/RegisteredWithProvider"
                            }
                        }
                    },
                    {
                        "type": "object",
                        "required": [
                            "waitingActivation"
                        ],
                        "properties": {
                            "waitingActivation": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "type": "object",
                        "required": [
                            "notRegistered"
                        ],
                        "properties": {
                            "notRegistered": {
                                "type": "string"
                            }
                        }
                    }
                ]
            },
            "ErrorCode": {
                "type": "object",
                "description": "ErrorCode is a struct that represents an error code.\n\nIt is used to represent errors that occur in the system. Error should be\ninternal or external. Internal errors are errors that are not expected to\noccur in the system. External errors are errors that are not expected to\noccur in the system.",
                "required": [
                    "prefix",
                    "errorNumber",
                    "message",
                    "isInternal",
                    "isNative"
                ],
                "properties": {
                    "prefix": {
                        "type": "string",
                        "description": "The prefix of the error."
                    },
                    "errorNumber": {
                        "type": "integer",
                        "format": "int32",
                        "description": "The code of the error."
                    },
                    "code": {
                        "type": [
                            "string",
                            "null"
                        ],
                        "description": "A compiled string of the prefix and code."
                    },
                    "message": {
                        "type": "string",
                        "description": "The message of the error."
                    },
                    "details": {
                        "type": [
                            "string",
                            "null"
                        ],
                        "description": "The details of the error."
                    },
                    "isInternal": {
                        "type": "boolean",
                        "description": "Whether the error is internal or external."
                    },
                    "isNative": {
                        "type": "boolean",
                        "description": "Whether the error is native of mycelium or not."
                    }
                }
            },
            "GuestRole": {
                "type": "object",
                "required": [
                    "name",
                    "role",
                    "permission"
                ],
                "properties": {
                    "id": {
                        "type": [
                            "string",
                            "null"
                        ],
                        "format": "uuid"
                    },
                    "name": {
                        "type": "string"
                    },
                    "description": {
                        "type": [
                            "string",
                            "null"
                        ]
                    },
                    "role": {
                        "$ref": "#/components/schemas/Parent_Role_String"
                    },
                    "permission": {
                        "$ref": "#/components/schemas/Permission"
                    },
                    "children": {
                        "oneOf": [
                            {
                                "type": "null"
                            },
                            {
                                "$ref": "#/components/schemas/Children_GuestRole_String",
                                "description": "Children roles represents guest roles that are children of the current\nrole, and should be used to determine the allowed roles for the role\nowner guest other users."
                            }
                        ]
                    }
                }
            },
            "GuestTenantOwnerBody": {
                "type": "object",
                "required": [
                    "email"
                ],
                "properties": {
                    "email": {
                        "type": "string"
                    }
                }
            },
            "GuestUser": {
                "type": "object",
                "required": [
                    "email",
                    "guestRole",
                    "created"
                ],
                "properties": {
                    "id": {
                        "type": [
                            "string",
                            "null"
                        ],
                        "format": "uuid"
                    },
                    "email": {
                        "$ref": "#/components/schemas/Email"
                    },
                    "guestRole": {
                        "$ref": "#/components/schemas/Parent_GuestRole_String"
                    },
                    "created": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "updated": {
                        "type": [
                            "string",
                            "null"
                        ],
                        "format": "date-time"
                    },
                    "accounts": {
                        "oneOf": [
                            {
                                "type": "null"
                            },
                            {
                                "$ref": "#/components/schemas/Children_Account_String"
                            }
                        ]
                    }
                }
            },
            "GuestUserBody": {
                "type": "object",
                "required": [
                    "email"
                ],
                "properties": {
                    "email": {
                        "type": "string"
                    }
                }
            },
            "HashMap": {
                "type": "object",
                "additionalProperties": {
                    "type": "string"
                },
                "propertyNames": {
                    "oneOf": [
                        {
                            "type": "string",
                            "description": "Federal Revenue Register\n\nThe Federal Revenue Register is the register of the federal revenue\nof the tenant.",
                            "enum": [
                                "federalRevenueRegister"
                            ]
                        },
                        {
                            "type": "string",
                            "description": "The type for the Federal Revenue Register\n\nIn Brazil, the FRR is CNPJ. In the US, the FRR is EIN.",
                            "enum": [
                                "fRRType"
                            ]
                        },
                        {
                            "type": "string",
                            "description": "The Country\n\nThe country of the tenant.",
                            "enum": [
                                "country"
                            ]
                        },
                        {
                            "type": "string",
                            "description": "The State\n\nThe state of the tenant.",
                            "enum": [
                                "state"
                            ]
                        },
                        {
                            "type": "string",
                            "description": "The Province\n\nThe province of the tenant.",
                            "enum": [
                                "province"
                            ]
                        },
                        {
                            "type": "string",
                            "description": "The City\n\nThe city of the tenant.",
                            "enum": [
                                "city"
                            ]
                        },
                        {
                            "type": "string",
                            "description": "The Address 1\n\nThe first address of the tenant.",
                            "enum": [
                                "address1"
                            ]
                        },
                        {
                            "type": "string",
                            "description": "The Address 2\n\nThe second address of the tenant.",
                            "enum": [
                                "address2"
                            ]
                        },
                        {
                            "type": "string",
                            "description": "The Zip Code\n\nThe zip code of the tenant.",
                            "enum": [
                                "zipCode"
                            ]
                        },
                        {
                            "type": "object",
                            "description": "To specify any other meta key\n\nSpecify any other meta key that is not listed here.",
                            "required": [
                                "other"
                            ],
                            "properties": {
                                "other": {
                                    "type": "string",
                                    "description": "To specify any other meta key\n\nSpecify any other meta key that is not listed here."
                                }
                            }
                        }
                    ]
                }
            },
            "HttpJsonResponse": {
                "type": "object",
                "properties": {
                    "msg": {
                        "type": [
                            "string",
                            "null"
                        ]
                    },
                    "code": {
                        "type": [
                            "string",
                            "null"
                        ]
                    },
                    "body": {
                        "type": [
                            "string",
                            "null"
                        ]
                    }
                }
            },
            "LicensedResource": {
                "type": "object",
                "required": [
                    "accId",
                    "isAccStd",
                    "tenantId",
                    "accName",
                    "guestRoleId",
                    "guestRoleName",
                    "role",
                    "perm"
                ],
                "properties": {
                    "accId": {
                        "type": "string",
                        "format": "uuid",
                        "description": "The guest account unique id\n\nThis is the unique identifier of the account that is own of the\nresource to be managed."
                    },
                    "isAccStd": {
                        "type": "boolean",
                        "description": "If the guest account is the standard account\n\nStandard accounts has permissions to act as special users into the\nMycelium system."
                    },
                    "tenantId": {
                        "type": "string",
                        "format": "uuid",
                        "description": "The guest account tenant unique id\n\nThis is the unique identifier of the tenant that is own of the resource\nto be managed."
                    },
                    "accName": {
                        "type": "string",
                        "description": "The guest account name\n\nThis is the name of the account that is own of the resource to be\nmanaged."
                    },
                    "guestRoleId": {
                        "type": "string",
                        "format": "uuid",
                        "description": "The guest account role unique id\n\nThis is the unique identifier of the role that is own of the resource\nto be managed."
                    },
                    "guestRoleName": {
                        "type": "string",
                        "description": "The guest account role name\n\nThis is the name of the role that is own of the resource to be\nmanaged."
                    },
                    "role": {
                        "type": "string",
                        "description": "The guest account role verbose name\n\nThis is the verbose name of the role that is own of the resource to be\nmanaged."
                    },
                    "perm": {
                        "$ref": "#/components/schemas/Permission",
                        "description": "The guest role permissions\n\nThis is the list of permissions that the guest role has."
                    }
                }
            },
            "LicensedResources": {
                "oneOf": [
                    {
                        "type": "object",
                        "required": [
                            "records"
                        ],
                        "properties": {
                            "records": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/LicensedResource"
                                }
                            }
                        }
                    },
                    {
                        "type": "object",
                        "required": [
                            "urls"
                        ],
                        "properties": {
                            "urls": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                ]
            },
            "ListErrorCodesParams": {
                "type": "object",
                "properties": {
                    "prefix": {
                        "type": [
                            "string",
                            "null"
                        ]
                    },
                    "code": {
                        "type": [
                            "integer",
                            "null"
                        ],
                        "format": "int32"
                    },
                    "isInternal": {
                        "type": [
                            "boolean",
                            "null"
                        ]
                    }
                }
            },
            "ListGuestRolesParams": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": [
                            "string",
                            "null"
                        ]
                    },
                    "guestRoleId": {
                        "type": [
                            "string",
                            "null"
                        ],
                        "format": "uuid"
                    }
                }
            },
            "ListLicensedAccountsOfEmailParams": {
                "type": "object",
                "required": [
                    "email"
                ],
                "properties": {
                    "email": {
                        "type": "string"
                    },
                    "roles": {
                        "type": [
                            "array",
                            "null"
                        ],
                        "items": {
                            "type": "string"
                        }
                    },
                    "permissionedRoles": {
                        "type": [
                            "array",
                            "null"
                        ],
                        "items": {
                            "type": "array",
                            "items": false,
                            "prefixItems": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "string",
                                    "enum": [
                                        "read",
                                        "write",
                                        "readWrite"
                                    ]
                                }
                            ]
                        }
                    }
                }
            },
            "ListRolesParams": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": [
                            "string",
                            "null"
                        ]
                    }
                }
            },
            "ListSubscriptionAccountParams": {
                "type": "object",
                "properties": {
                    "term": {
                        "type": [
                            "string",
                            "null"
                        ]
                    },
                    "tagValue": {
                        "type": [
                            "string",
                            "null"
                        ]
                    },
                    "accountType": {
                        "oneOf": [
                            {
                                "type": "null"
                            },
                            {
                                "$ref": "#/components/schemas/APIAccountType"
                            }
                        ]
                    },
                    "isOwnerActive": {
                        "type": [
                            "boolean",
                            "null"
                        ]
                    },
                    "status": {
                        "oneOf": [
                            {
                                "type": "null"
                            },
                            {
                                "$ref": "#/components/schemas/VerboseStatus"
                            }
                        ]
                    },
                    "roleName": {
                        "type": [
                            "string",
                            "null"
                        ]
                    },
                    "roleId": {
                        "type": [
                            "string",
                            "null"
                        ],
                        "format": "uuid"
                    }
                }
            },
            "ListTenantParams": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": [
                            "string",
                            "null"
                        ]
                    },
                    "owner": {
                        "type": [
                            "string",
                            "null"
                        ],
                        "format": "uuid"
                    },
                    "metadataKey": {
                        "oneOf": [
                            {
                                "type": "null"
                            },
                            {
                                "$ref": "#/components/schemas/TenantMetaKey"
                            }
                        ]
                    },
                    "statusVerified": {
                        "type": [
                            "boolean",
                            "null"
                        ]
                    },
                    "statusArchived": {
                        "type": [
                            "boolean",
                            "null"
                        ]
                    },
                    "statusTrashed": {
                        "type": [
                            "boolean",
                            "null"
                        ]
                    },
                    "tagValue": {
                        "type": [
                            "string",
                            "null"
                        ]
                    },
                    "tagMeta": {
                        "type": [
                            "string",
                            "null"
                        ]
                    }
                }
            },
            "ListWebHooksParams": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": [
                            "string",
                            "null"
                        ]
                    },
                    "trigger": {
                        "oneOf": [
                            {
                                "type": "null"
                            },
                            {
                                "$ref": "#/components/schemas/WebHookTrigger"
                            }
                        ]
                    }
                }
            },
            "MultiFactorAuthentication": {
                "type": "object",
                "required": [
                    "totp"
                ],
                "properties": {
                    "totp": {
                        "$ref": "#/components/schemas/Totp",
                        "description": "The TOTP\n\nThe TOTP is disabled by default.\n"
                    }
                }
            },
            "MyceliumLoginResponse": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/User"
                    },
                    {
                        "type": "object",
                        "required": [
                            "token",
                            "duration",
                            "totpRequired"
                        ],
                        "properties": {
                            "token": {
                                "type": "string"
                            },
                            "duration": {
                                "type": "string"
                            },
                            "totpRequired": {
                                "type": "boolean"
                            }
                        }
                    }
                ]
            },
            "Owner": {
                "type": "object",
                "required": [
                    "id",
                    "email",
                    "isPrincipal"
                ],
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "email": {
                        "type": "string",
                        "description": "The owner email\n\nThe email of the user that administrate the profile. Email denotes the\ncentral part of the profile management. Email should be used to collect\nlicensed IDs and perform guest operations. Thus, it should be unique in\nthe Mycelium platform."
                    },
                    "firstName": {
                        "type": [
                            "string",
                            "null"
                        ],
                        "description": "The owner first name"
                    },
                    "lastName": {
                        "type": [
                            "string",
                            "null"
                        ],
                        "description": "The owner last name"
                    },
                    "username": {
                        "type": [
                            "string",
                            "null"
                        ],
                        "description": "The owner username"
                    },
                    "isPrincipal": {
                        "type": "boolean",
                        "description": "If the owner is the principal account owner"
                    }
                }
            },
            "Parent_Account_String": {
                "oneOf": [
                    {
                        "type": "object",
                        "required": [
                            "record"
                        ],
                        "properties": {
                            "record": {
                                "type": "object",
                                "required": [
                                    "name",
                                    "slug",
                                    "isActive",
                                    "isChecked",
                                    "isArchived",
                                    "isDefault",
                                    "owners",
                                    "accountType",
                                    "created"
                                ],
                                "properties": {
                                    "id": {
                                        "type": [
                                            "string",
                                            "null"
                                        ],
                                        "format": "uuid"
                                    },
                                    "name": {
                                        "type": "string"
                                    },
                                    "slug": {
                                        "type": "string"
                                    },
                                    "tags": {
                                        "type": [
                                            "array",
                                            "null"
                                        ],
                                        "items": {
                                            "$ref": "#/components/schemas/Tag"
                                        }
                                    },
                                    "isActive": {
                                        "type": "boolean"
                                    },
                                    "isChecked": {
                                        "type": "boolean"
                                    },
                                    "isArchived": {
                                        "type": "boolean"
                                    },
                                    "verboseStatus": {
                                        "oneOf": [
                                            {
                                                "type": "null"
                                            },
                                            {
                                                "$ref": "#/components/schemas/VerboseStatus"
                                            }
                                        ]
                                    },
                                    "isDefault": {
                                        "type": "boolean"
                                    },
                                    "owners": {
                                        "$ref": "#/components/schemas/Children_User_String",
                                        "description": "The Account Owners\n\nThis is the list of account owners. The account owners are the users who\nhave the account owner role."
                                    },
                                    "accountType": {
                                        "$ref": "#/components/schemas/AccountTypeV2",
                                        "description": "The Account Type\n\nAccount type is the type of the account. The account type is used to\ncategorize the account."
                                    },
                                    "guestUsers": {
                                        "oneOf": [
                                            {
                                                "type": "null"
                                            },
                                            {
                                                "$ref": "#/components/schemas/Children_GuestUser_String",
                                                "description": "The Account Guest Users\n\nThis is the list of guest users of the account."
                                            }
                                        ]
                                    },
                                    "created": {
                                        "type": "string",
                                        "format": "date-time"
                                    },
                                    "updated": {
                                        "type": [
                                            "string",
                                            "null"
                                        ],
                                        "format": "date-time"
                                    }
                                }
                            }
                        }
                    },
                    {
                        "type": "object",
                        "required": [
                            "id"
                        ],
                        "properties": {
                            "id": {
                                "type": "string"
                            }
                        }
                    }
                ],
                "description": "A parent record\n\nThis enumerator allow represents the parent elements using their primary\nkey (Id option) or the true record (Record option)."
            },
            "Parent_GuestRole_String": {
                "oneOf": [
                    {
                        "type": "object",
                        "required": [
                            "record"
                        ],
                        "properties": {
                            "record": {
                                "type": "object",
                                "required": [
                                    "name",
                                    "role",
                                    "permission"
                                ],
                                "properties": {
                                    "id": {
                                        "type": [
                                            "string",
                                            "null"
                                        ],
                                        "format": "uuid"
                                    },
                                    "name": {
                                        "type": "string"
                                    },
                                    "description": {
                                        "type": [
                                            "string",
                                            "null"
                                        ]
                                    },
                                    "role": {
                                        "$ref": "#/components/schemas/Parent_Role_String"
                                    },
                                    "permission": {
                                        "$ref": "#/components/schemas/Permission"
                                    },
                                    "children": {
                                        "oneOf": [
                                            {
                                                "type": "null"
                                            },
                                            {
                                                "$ref": "#/components/schemas/Children_GuestRole_String",
                                                "description": "Children roles represents guest roles that are children of the current\nrole, and should be used to determine the allowed roles for the role\nowner guest other users."
                                            }
                                        ]
                                    }
                                }
                            }
                        }
                    },
                    {
                        "type": "object",
                        "required": [
                            "id"
                        ],
                        "properties": {
                            "id": {
                                "type": "string"
                            }
                        }
                    }
                ],
                "description": "A parent record\n\nThis enumerator allow represents the parent elements using their primary\nkey (Id option) or the true record (Record option)."
            },
            "Parent_Role_String": {
                "oneOf": [
                    {
                        "type": "object",
                        "required": [
                            "record"
                        ],
                        "properties": {
                            "record": {
                                "type": "object",
                                "required": [
                                    "name",
                                    "description"
                                ],
                                "properties": {
                                    "id": {
                                        "type": [
                                            "string",
                                            "null"
                                        ],
                                        "format": "uuid"
                                    },
                                    "name": {
                                        "type": "string"
                                    },
                                    "description": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    },
                    {
                        "type": "object",
                        "required": [
                            "id"
                        ],
                        "properties": {
                            "id": {
                                "type": "string"
                            }
                        }
                    }
                ],
                "description": "A parent record\n\nThis enumerator allow represents the parent elements using their primary\nkey (Id option) or the true record (Record option)."
            },
            "PasswordHash": {
                "type": "object"
            },
            "Permission": {
                "type": "string",
                "enum": [
                    "read",
                    "write",
                    "readWrite"
                ]
            },
            "Profile": {
                "type": "object",
                "description": "This object should be used over the application layer operations.",
                "required": [
                    "owners",
                    "accId",
                    "isSubscription",
                    "isManager",
                    "isStaff",
                    "ownerIsActive",
                    "accountIsActive",
                    "accountWasApproved",
                    "accountWasArchived"
                ],
                "properties": {
                    "owners": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Owner"
                        }
                    },
                    "accId": {
                        "type": "string",
                        "format": "uuid",
                        "description": "The account unique id\n\nSuch ID is related to the account primary-key instead of the owner\nprimary key. In the case of the subscription accounts (accounts flagged\nwith `is_subscription`) such ID should be propagated along the\napplication flow."
                    },
                    "isSubscription": {
                        "type": "boolean",
                        "description": "If profile belongs to a `subscription` account\n\nSubscription accounts should be used to manage legal entities. Only\nsubscription accounts should receive guest accounts."
                    },
                    "isManager": {
                        "type": "boolean",
                        "description": "If profile belongs to a `manager` account\n\nManager accounts should be used by users with elevated privileges inside\nthe Mycelium platform. Such user should perform actions like create\nroles, guest-roles, guest default-user accounts to work into\nsubscription accounts."
                    },
                    "isStaff": {
                        "type": "boolean",
                        "description": "If profile belongs to a `staff` account\n\nStaff user has elevated roles into the application. Like managers, staff\nusers has elevated privileges. Only staff user has permission to\ndelegate other staffs."
                    },
                    "ownerIsActive": {
                        "type": "boolean",
                        "description": "If the account owner is active\n\nProfiles exists to abstract account privileges. If the profile is\nrelated to an inactive owner the profile could not perform any action.\nOnly staff or manager user should perform the activation of such users."
                    },
                    "accountIsActive": {
                        "type": "boolean",
                        "description": "If the account itself is inactive\n\nWhen inactive accounts should not perform internal operations."
                    },
                    "accountWasApproved": {
                        "type": "boolean",
                        "description": "If the account was approved after registration\n\nNew accounts should be approved by manager or staff users after their\nregistration into the Mycelium platform. Case the approval was\nperformed, this flag should be true."
                    },
                    "accountWasArchived": {
                        "type": "boolean",
                        "description": "If the account was archived after registration\n\nNew accounts should be archived. After archived accounts should not be\nincluded at default filtering actions."
                    },
                    "verboseStatus": {
                        "oneOf": [
                            {
                                "type": "null"
                            },
                            {
                                "$ref": "#/components/schemas/VerboseStatus",
                                "description": "Indicate the profile status for humans\n\nThe profile status is composed of all account flags statuses\ncomposition. But it is not readable for humans. These struct attribute\nallows human users to understand the account status without read the\nflags, avoiding misinterpretation of this."
                            }
                        ]
                    },
                    "licensedResources": {
                        "oneOf": [
                            {
                                "type": "null"
                            },
                            {
                                "$ref": "#/components/schemas/LicensedResources",
                                "description": "Accounts guested to the current profile\n\nGuest accounts delivers information about the guest account role and\ntheir respective permissions inside the host account. A single account\nshould be several licenses into the same account."
                            }
                        ]
                    }
                }
            },
            "Provider": {
                "oneOf": [
                    {
                        "type": "object",
                        "required": [
                            "external"
                        ],
                        "properties": {
                            "external": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "type": "object",
                        "required": [
                            "internal"
                        ],
                        "properties": {
                            "internal": {
                                "$ref": "#/components/schemas/PasswordHash"
                            }
                        }
                    }
                ]
            },
            "RegisteredWithProvider": {
                "type": "object",
                "required": [
                    "email"
                ],
                "properties": {
                    "email": {
                        "$ref": "#/components/schemas/Email"
                    },
                    "provider": {
                        "oneOf": [
                            {
                                "type": "null"
                            },
                            {
                                "$ref": "#/components/schemas/Provider"
                            }
                        ]
                    }
                }
            },
            "ResetPasswordBody": {
                "type": "object",
                "required": [
                    "token",
                    "email",
                    "newPassword"
                ],
                "properties": {
                    "token": {
                        "type": "string"
                    },
                    "email": {
                        "type": "string"
                    },
                    "newPassword": {
                        "type": "string"
                    }
                }
            },
            "Role": {
                "type": "object",
                "required": [
                    "name",
                    "description"
                ],
                "properties": {
                    "id": {
                        "type": [
                            "string",
                            "null"
                        ],
                        "format": "uuid"
                    },
                    "name": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    }
                }
            },
            "StartPasswordResetBody": {
                "type": "object",
                "required": [
                    "email"
                ],
                "properties": {
                    "email": {
                        "type": "string"
                    }
                }
            },
            "Tag": {
                "type": "object",
                "required": [
                    "id",
                    "value"
                ],
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "value": {
                        "type": "string"
                    },
                    "meta": {
                        "type": [
                            "object",
                            "null"
                        ],
                        "additionalProperties": {
                            "type": "string"
                        },
                        "propertyNames": {
                            "type": "string"
                        }
                    }
                }
            },
            "Tenant": {
                "type": "object",
                "required": [
                    "name",
                    "owners",
                    "created"
                ],
                "properties": {
                    "id": {
                        "type": [
                            "string",
                            "null"
                        ],
                        "format": "uuid"
                    },
                    "name": {
                        "type": "string"
                    },
                    "description": {
                        "type": [
                            "string",
                            "null"
                        ]
                    },
                    "owners": {
                        "$ref": "#/components/schemas/Children_Owner_String",
                        "description": "The owner of the tenant\n\nThis is the email of the tenant owner, which is also the pub owner. The\ntenant owner should be set on tenant creation."
                    },
                    "manager": {
                        "oneOf": [
                            {
                                "type": "null"
                            },
                            {
                                "$ref": "#/components/schemas/Parent_Account_String",
                                "description": "The tenant manager\n\nThe account of the tenant manager."
                            }
                        ]
                    },
                    "tags": {
                        "type": [
                            "array",
                            "null"
                        ],
                        "items": {
                            "$ref": "#/components/schemas/Tag"
                        },
                        "description": "The tags of the tenant\n\nThis is the list of tags of the tenant. The tags are used to categorize\nthe tenant. The tags are used to categorize the tenant."
                    },
                    "meta": {
                        "type": [
                            "object",
                            "null"
                        ],
                        "description": "Meta information\n\nThis is the meta information of the tenant. The meta information is a\nkey-value pair of string. The key is the name of the meta information,\nand the value is the value of the meta information.",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "propertyNames": {
                            "oneOf": [
                                {
                                    "type": "string",
                                    "description": "Federal Revenue Register\n\nThe Federal Revenue Register is the register of the federal revenue\nof the tenant.",
                                    "enum": [
                                        "federalRevenueRegister"
                                    ]
                                },
                                {
                                    "type": "string",
                                    "description": "The type for the Federal Revenue Register\n\nIn Brazil, the FRR is CNPJ. In the US, the FRR is EIN.",
                                    "enum": [
                                        "fRRType"
                                    ]
                                },
                                {
                                    "type": "string",
                                    "description": "The Country\n\nThe country of the tenant.",
                                    "enum": [
                                        "country"
                                    ]
                                },
                                {
                                    "type": "string",
                                    "description": "The State\n\nThe state of the tenant.",
                                    "enum": [
                                        "state"
                                    ]
                                },
                                {
                                    "type": "string",
                                    "description": "The Province\n\nThe province of the tenant.",
                                    "enum": [
                                        "province"
                                    ]
                                },
                                {
                                    "type": "string",
                                    "description": "The City\n\nThe city of the tenant.",
                                    "enum": [
                                        "city"
                                    ]
                                },
                                {
                                    "type": "string",
                                    "description": "The Address 1\n\nThe first address of the tenant.",
                                    "enum": [
                                        "address1"
                                    ]
                                },
                                {
                                    "type": "string",
                                    "description": "The Address 2\n\nThe second address of the tenant.",
                                    "enum": [
                                        "address2"
                                    ]
                                },
                                {
                                    "type": "string",
                                    "description": "The Zip Code\n\nThe zip code of the tenant.",
                                    "enum": [
                                        "zipCode"
                                    ]
                                },
                                {
                                    "type": "object",
                                    "description": "To specify any other meta key\n\nSpecify any other meta key that is not listed here.",
                                    "required": [
                                        "other"
                                    ],
                                    "properties": {
                                        "other": {
                                            "type": "string",
                                            "description": "To specify any other meta key\n\nSpecify any other meta key that is not listed here."
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "status": {
                        "type": [
                            "array",
                            "null"
                        ],
                        "items": {
                            "$ref": "#/components/schemas/TenantStatus"
                        },
                        "description": "The status of the tenant\n\nThis is the status of the tenant. The status is a key-value pair of\nstring. The key is the name of the status (defined in `StatusKey`), and\nthe value is the value of the status."
                    },
                    "created": {
                        "type": "string",
                        "format": "date-time",
                        "description": "The date and time the tenant was created"
                    },
                    "updated": {
                        "type": [
                            "string",
                            "null"
                        ],
                        "format": "date-time",
                        "description": "The date and time the tenant was last updated"
                    }
                }
            },
            "TenantMetaKey": {
                "oneOf": [
                    {
                        "type": "string",
                        "description": "Federal Revenue Register\n\nThe Federal Revenue Register is the register of the federal revenue\nof the tenant.",
                        "enum": [
                            "federalRevenueRegister"
                        ]
                    },
                    {
                        "type": "string",
                        "description": "The type for the Federal Revenue Register\n\nIn Brazil, the FRR is CNPJ. In the US, the FRR is EIN.",
                        "enum": [
                            "fRRType"
                        ]
                    },
                    {
                        "type": "string",
                        "description": "The Country\n\nThe country of the tenant.",
                        "enum": [
                            "country"
                        ]
                    },
                    {
                        "type": "string",
                        "description": "The State\n\nThe state of the tenant.",
                        "enum": [
                            "state"
                        ]
                    },
                    {
                        "type": "string",
                        "description": "The Province\n\nThe province of the tenant.",
                        "enum": [
                            "province"
                        ]
                    },
                    {
                        "type": "string",
                        "description": "The City\n\nThe city of the tenant.",
                        "enum": [
                            "city"
                        ]
                    },
                    {
                        "type": "string",
                        "description": "The Address 1\n\nThe first address of the tenant.",
                        "enum": [
                            "address1"
                        ]
                    },
                    {
                        "type": "string",
                        "description": "The Address 2\n\nThe second address of the tenant.",
                        "enum": [
                            "address2"
                        ]
                    },
                    {
                        "type": "string",
                        "description": "The Zip Code\n\nThe zip code of the tenant.",
                        "enum": [
                            "zipCode"
                        ]
                    },
                    {
                        "type": "object",
                        "description": "To specify any other meta key\n\nSpecify any other meta key that is not listed here.",
                        "required": [
                            "other"
                        ],
                        "properties": {
                            "other": {
                                "type": "string",
                                "description": "To specify any other meta key\n\nSpecify any other meta key that is not listed here."
                            }
                        }
                    }
                ]
            },
            "TenantOwnerConnection": {
                "type": "object",
                "required": [
                    "tenantId",
                    "ownerId",
                    "guestBy",
                    "created"
                ],
                "properties": {
                    "tenantId": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "ownerId": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "guestBy": {
                        "type": "string"
                    },
                    "created": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "updated": {
                        "type": [
                            "string",
                            "null"
                        ],
                        "format": "date-time"
                    }
                }
            },
            "TenantStatus": {
                "oneOf": [
                    {
                        "type": "object",
                        "required": [
                            "verified"
                        ],
                        "properties": {
                            "verified": {
                                "type": "object",
                                "required": [
                                    "verified",
                                    "at",
                                    "by"
                                ],
                                "properties": {
                                    "verified": {
                                        "type": "boolean"
                                    },
                                    "at": {
                                        "type": "string",
                                        "format": "date-time"
                                    },
                                    "by": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    },
                    {
                        "type": "object",
                        "required": [
                            "trashed"
                        ],
                        "properties": {
                            "trashed": {
                                "type": "object",
                                "required": [
                                    "trashed",
                                    "at",
                                    "by"
                                ],
                                "properties": {
                                    "trashed": {
                                        "type": "boolean"
                                    },
                                    "at": {
                                        "type": "string",
                                        "format": "date-time"
                                    },
                                    "by": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    },
                    {
                        "type": "object",
                        "required": [
                            "archived"
                        ],
                        "properties": {
                            "archived": {
                                "type": "object",
                                "required": [
                                    "archived",
                                    "at",
                                    "by"
                                ],
                                "properties": {
                                    "archived": {
                                        "type": "boolean"
                                    },
                                    "at": {
                                        "type": "string",
                                        "format": "date-time"
                                    },
                                    "by": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                ]
            },
            "Totp": {
                "oneOf": [
                    {
                        "type": "string",
                        "enum": [
                            "disabled"
                        ]
                    },
                    {
                        "type": "object",
                        "description": "The TOTP when enabled\n\nThe TOTP is enabled when the user has verified the TOTP and the auth\nurl is set. The secret is not serialized to avoid that the secret is\nexposed to the outside.\n",
                        "required": [
                            "enabled"
                        ],
                        "properties": {
                            "enabled": {
                                "type": "object",
                                "description": "The TOTP when enabled\n\nThe TOTP is enabled when the user has verified the TOTP and the auth\nurl is set. The secret is not serialized to avoid that the secret is\nexposed to the outside.\n",
                                "required": [
                                    "verified",
                                    "issuer"
                                ],
                                "properties": {
                                    "verified": {
                                        "type": "boolean"
                                    },
                                    "issuer": {
                                        "type": "string"
                                    },
                                    "secret": {
                                        "type": [
                                            "string",
                                            "null"
                                        ]
                                    }
                                }
                            }
                        }
                    }
                ]
            },
            "TotpActivationStartedResponse": {
                "type": "object",
                "required": [
                    "totpUrl"
                ],
                "properties": {
                    "totpUrl": {
                        "type": "string"
                    }
                }
            },
            "TotpUpdatingValidationBody": {
                "type": "object",
                "required": [
                    "token"
                ],
                "properties": {
                    "token": {
                        "type": "string"
                    }
                }
            },
            "UpdateErrorCodeMessageAndDetailsBody": {
                "type": "object",
                "required": [
                    "message"
                ],
                "properties": {
                    "message": {
                        "type": "string"
                    },
                    "details": {
                        "type": [
                            "string",
                            "null"
                        ]
                    }
                }
            },
            "UpdateGuestRoleNameAndDescriptionBody": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": [
                            "string",
                            "null"
                        ]
                    },
                    "description": {
                        "type": [
                            "string",
                            "null"
                        ]
                    }
                }
            },
            "UpdateGuestRolePermissionsBody": {
                "type": "object",
                "required": [
                    "permission"
                ],
                "properties": {
                    "permission": {
                        "$ref": "#/components/schemas/Permission"
                    }
                }
            },
            "UpdateOwnAccountNameAccountBody": {
                "type": "object",
                "required": [
                    "name"
                ],
                "properties": {
                    "name": {
                        "type": "string"
                    }
                }
            },
            "UpdateSubscriptionAccountNameAndFlagsBody": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": [
                            "string",
                            "null"
                        ]
                    },
                    "isActive": {
                        "type": [
                            "boolean",
                            "null"
                        ]
                    },
                    "isChecked": {
                        "type": [
                            "boolean",
                            "null"
                        ]
                    },
                    "isArchived": {
                        "type": [
                            "boolean",
                            "null"
                        ]
                    },
                    "isDefault": {
                        "type": [
                            "boolean",
                            "null"
                        ]
                    }
                }
            },
            "UpdateTagBody": {
                "type": "object",
                "required": [
                    "value",
                    "meta"
                ],
                "properties": {
                    "value": {
                        "type": "string"
                    },
                    "meta": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "propertyNames": {
                            "type": "string"
                        }
                    }
                }
            },
            "UpdateTenantArchivingBody": {
                "type": "object",
                "required": [
                    "archived"
                ],
                "properties": {
                    "archived": {
                        "type": "boolean"
                    }
                }
            },
            "UpdateTenantNameAndDescriptionBody": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": [
                            "string",
                            "null"
                        ]
                    },
                    "description": {
                        "type": [
                            "string",
                            "null"
                        ]
                    }
                }
            },
            "UpdateTenantTrashingBody": {
                "type": "object",
                "required": [
                    "trashed"
                ],
                "properties": {
                    "trashed": {
                        "type": "boolean"
                    }
                }
            },
            "UpdateTenantVerifyingBody": {
                "type": "object",
                "required": [
                    "verified"
                ],
                "properties": {
                    "verified": {
                        "type": "boolean"
                    }
                }
            },
            "UpdateWebHookBody": {
                "type": "object",
                "required": [
                    "webhook"
                ],
                "properties": {
                    "webhook": {
                        "$ref": "#/components/schemas/WebHook"
                    }
                }
            },
            "UpgradeAccountPrivilegesBody": {
                "type": "object",
                "required": [
                    "to"
                ],
                "properties": {
                    "to": {
                        "$ref": "#/components/schemas/UpgradeTargetAccountType"
                    }
                }
            },
            "UpgradeTargetAccountType": {
                "type": "string",
                "enum": [
                    "staff",
                    "manager"
                ]
            },
            "User": {
                "type": "object",
                "required": [
                    "username",
                    "email",
                    "isActive",
                    "created",
                    "isPrincipal",
                    "mfa"
                ],
                "properties": {
                    "id": {
                        "type": [
                            "string",
                            "null"
                        ],
                        "format": "uuid"
                    },
                    "username": {
                        "type": "string"
                    },
                    "email": {
                        "$ref": "#/components/schemas/Email"
                    },
                    "firstName": {
                        "type": [
                            "string",
                            "null"
                        ]
                    },
                    "lastName": {
                        "type": [
                            "string",
                            "null"
                        ]
                    },
                    "isActive": {
                        "type": "boolean"
                    },
                    "created": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "updated": {
                        "type": [
                            "string",
                            "null"
                        ],
                        "format": "date-time"
                    },
                    "account": {
                        "oneOf": [
                            {
                                "type": "null"
                            },
                            {
                                "$ref": "#/components/schemas/Parent_Account_String"
                            }
                        ]
                    },
                    "isPrincipal": {
                        "type": "boolean",
                        "description": "If the user is the principal user of the account.\n\nThe principal user contains information of the first email that created\nthe account. This information is used to send emails to the principal\nuser.\n\nPrincipal users should not be deleted or deactivated if the account has\nother users connected.\n"
                    },
                    "provider": {
                        "oneOf": [
                            {
                                "type": "null"
                            },
                            {
                                "$ref": "#/components/schemas/Provider",
                                "description": "The user provider.\n\nProvider is a optional field but it should be None only during the\ncollection of the user data from database. Such None initialization\nprevents that password hashes and salts should be exposed to the\noutside.\n\n! Thus, be careful on change this field.\n"
                            }
                        ]
                    },
                    "mfa": {
                        "$ref": "#/components/schemas/MultiFactorAuthentication",
                        "description": "The user TOTP\n\nWhen enabled the user has verified the TOTP and the auth url is set.\n"
                    }
                }
            },
            "VerboseStatus": {
                "type": "string",
                "enum": [
                    "unverified",
                    "verified",
                    "inactive",
                    "archived",
                    "unknown"
                ]
            },
            "WebHook": {
                "type": "object",
                "required": [
                    "name",
                    "url",
                    "trigger",
                    "isActive",
                    "created"
                ],
                "properties": {
                    "id": {
                        "type": [
                            "string",
                            "null"
                        ],
                        "format": "uuid"
                    },
                    "name": {
                        "type": "string"
                    },
                    "description": {
                        "type": [
                            "string",
                            "null"
                        ]
                    },
                    "url": {
                        "type": "string"
                    },
                    "trigger": {
                        "$ref": "#/components/schemas/WebHookTrigger"
                    },
                    "isActive": {
                        "type": "boolean"
                    },
                    "created": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "updated": {
                        "type": [
                            "string",
                            "null"
                        ],
                        "format": "date-time"
                    },
                    "secret": {
                        "oneOf": [
                            {
                                "type": "null"
                            },
                            {
                                "$ref": "#/components/schemas/WebHookSecret"
                            }
                        ]
                    }
                }
            },
            "WebHookSecret": {
                "oneOf": [
                    {
                        "type": "object",
                        "description": "Authentication header\n\nThe secret is passed as an authentication header.\n",
                        "required": [
                            "authorizationHeader"
                        ],
                        "properties": {
                            "authorizationHeader": {
                                "type": "object",
                                "description": "Authentication header\n\nThe secret is passed as an authentication header.\n",
                                "required": [
                                    "token"
                                ],
                                "properties": {
                                    "name": {
                                        "type": [
                                            "string",
                                            "null"
                                        ],
                                        "description": "The header name\n\nThe name of the header. For example, if the name is `Authorization`,\nthe header will be `Authorization Bear: <token value>`. The default\nvalue is `Authorization`.\n"
                                    },
                                    "prefix": {
                                        "type": [
                                            "string",
                                            "null"
                                        ],
                                        "description": "The header prefix\n\nIf present the prefix is added to the header. For example, if the\nprefix is `Bearer`, the header will be `Authorization Bearer: <token\nvalue>`.\n"
                                    },
                                    "token": {
                                        "type": "string",
                                        "description": "The header token\n\nThe token is the value of the header. For example, if the token is\n`1234`, the header will be `Authorization Bearer: 123\n"
                                    }
                                }
                            }
                        }
                    },
                    {
                        "type": "object",
                        "required": [
                            "queryParameter"
                        ],
                        "properties": {
                            "queryParameter": {
                                "type": "object",
                                "required": [
                                    "name",
                                    "token"
                                ],
                                "properties": {
                                    "name": {
                                        "type": "string",
                                        "description": "The query parameter name\n\nThe name of the query parameter. For example, if the name is `token`,\nthe query parameter will be `?token=<token value>`.\n"
                                    },
                                    "token": {
                                        "type": "string",
                                        "description": "The query parameter value\n\nThe value of the query parameter. For example, if the value is `1234`,\nthe query parameter will be `?token=1234`.\n"
                                    }
                                }
                            }
                        }
                    }
                ]
            },
            "WebHookTrigger": {
                "type": "string",
                "enum": [
                    "createSubscriptionAccount",
                    "updateSubscriptionAccount",
                    "deleteSubscriptionAccount",
                    "createUserAccount",
                    "updateUserAccount",
                    "deleteUserAccount",
                    "inviteGuestAccount",
                    "uninviteGuestAccount"
                ]
            }
        },
        "responses": {
            "AzureLoginResponse": {
                "description": "",
                "content": {
                    "application/json": {
                        "schema": {
                            "type": "object",
                            "required": [
                                "authorizeUrl"
                            ],
                            "properties": {
                                "authorizeUrl": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            },
            "CallbackResponse": {
                "description": "",
                "content": {
                    "application/json": {
                        "schema": {
                            "type": "object",
                            "required": [
                                "accessToken",
                                "tokenType"
                            ],
                            "properties": {
                                "accessToken": {
                                    "type": "string"
                                },
                                "tokenType": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            },
            "CreateTokenResponse": {
                "description": "",
                "content": {
                    "application/json": {
                        "schema": {
                            "type": "object",
                            "required": [
                                "connectionString"
                            ],
                            "properties": {
                                "connectionString": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            },
            "HttpJsonResponse": {
                "description": "",
                "content": {
                    "application/json": {
                        "schema": {
                            "type": "object",
                            "properties": {
                                "msg": {
                                    "type": [
                                        "string",
                                        "null"
                                    ]
                                },
                                "code": {
                                    "type": [
                                        "string",
                                        "null"
                                    ]
                                },
                                "body": {
                                    "type": [
                                        "string",
                                        "null"
                                    ]
                                }
                            }
                        }
                    }
                }
            },
            "MyceliumLoginResponse": {
                "description": "",
                "content": {
                    "application/json": {
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/components/schemas/User"
                                },
                                {
                                    "type": "object",
                                    "required": [
                                        "token",
                                        "duration",
                                        "totpRequired"
                                    ],
                                    "properties": {
                                        "token": {
                                            "type": "string"
                                        },
                                        "duration": {
                                            "type": "string"
                                        },
                                        "totpRequired": {
                                            "type": "boolean"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            },
            "TotpActivationFinishedResponse": {
                "description": "",
                "content": {
                    "application/json": {
                        "schema": {
                            "type": "object",
                            "required": [
                                "finished"
                            ],
                            "properties": {
                                "finished": {
                                    "type": "boolean"
                                }
                            }
                        }
                    }
                }
            },
            "TotpActivationStartedResponse": {
                "description": "",
                "content": {
                    "application/json": {
                        "schema": {
                            "type": "object",
                            "required": [
                                "totpUrl"
                            ],
                            "properties": {
                                "totpUrl": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        "securitySchemes": {
            "Bearer": {
                "type": "http",
                "scheme": "bearer",
                "bearerFormat": "Bearer"
            },
            "ConnectionString": {
                "type": "apiKey",
                "in": "header",
                "name": "x-mycelium-connection-string",
                "description": "A valid Mycelium Connection String"
            }
        }
    },
    "security": [
        {},
        {
            "Bearer": []
        }
    ]
}